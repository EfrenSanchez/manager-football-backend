### This file was autogenerated by Nexus 0.11.6
### Do not make changes to this file directly


type AggregateAssist {
  count: Int!
}

type AggregateBooking {
  count: Int!
}

type AggregateGoal {
  count: Int!
}

type AggregateInjury {
  count: Int!
}

type AggregateMatch {
  count: Int!
}

type AggregatePlayer {
  count: Int!
}

type AggregateStaff {
  count: Int!
}

type AggregateTeam {
  count: Int!
}

type Assessment {
  id: ID!
  personality: Float
  physical: Float
  psychology: Float
  tactical: Float
  technical: Float
}

input AssessmentCreateInput {
  id: ID
  personality: Float
  physical: Float
  psychology: Float
  tactical: Float
  technical: Float
}

input AssessmentCreateOneInput {
  create: AssessmentCreateInput
}

input AssessmentUpdateDataInput {
  personality: Float
  physical: Float
  psychology: Float
  tactical: Float
  technical: Float
}

input AssessmentUpdateOneInput {
  connect: AssessmentWhereUniqueInput
  create: AssessmentCreateInput
  delete: Boolean
  disconnect: Boolean
  update: AssessmentUpdateDataInput
  upsert: AssessmentUpsertNestedInput
}

input AssessmentUpsertNestedInput {
  create: AssessmentCreateInput!
  update: AssessmentUpdateDataInput!
}

input AssessmentWhereInput {
  AND: [AssessmentWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  personality: Float
  personality_gt: Float
  personality_gte: Float
  personality_in: [Float!]
  personality_lt: Float
  personality_lte: Float
  personality_not: Float
  personality_not_in: [Float!]
  physical: Float
  physical_gt: Float
  physical_gte: Float
  physical_in: [Float!]
  physical_lt: Float
  physical_lte: Float
  physical_not: Float
  physical_not_in: [Float!]
  psychology: Float
  psychology_gt: Float
  psychology_gte: Float
  psychology_in: [Float!]
  psychology_lt: Float
  psychology_lte: Float
  psychology_not: Float
  psychology_not_in: [Float!]
  tactical: Float
  tactical_gt: Float
  tactical_gte: Float
  tactical_in: [Float!]
  tactical_lt: Float
  tactical_lte: Float
  tactical_not: Float
  tactical_not_in: [Float!]
  technical: Float
  technical_gt: Float
  technical_gte: Float
  technical_in: [Float!]
  technical_lt: Float
  technical_lte: Float
  technical_not: Float
  technical_not_in: [Float!]
}

input AssessmentWhereUniqueInput {
  id: ID
}

type Assist {
  desc: String
  id: ID!
  match: Match!
  min: Float
  player: Player!
}

type AssistConnection {
  aggregate: AggregateAssist!
  edges: [AssistEdge!]!
  pageInfo: PageInfo!
}

input AssistCreateInput {
  desc: String
  id: ID
  match: MatchCreateOneWithoutAssistInput!
  min: Float
  player: PlayerCreateOneWithoutAssistInput!
}

input AssistCreateManyWithoutMatchInput {
  connect: [AssistWhereUniqueInput!]
  create: [AssistCreateWithoutMatchInput!]
}

input AssistCreateManyWithoutPlayerInput {
  connect: [AssistWhereUniqueInput!]
  create: [AssistCreateWithoutPlayerInput!]
}

input AssistCreateWithoutMatchInput {
  desc: String
  id: ID
  min: Float
  player: PlayerCreateOneWithoutAssistInput!
}

input AssistCreateWithoutPlayerInput {
  desc: String
  id: ID
  match: MatchCreateOneWithoutAssistInput!
  min: Float
}

type AssistEdge {
  cursor: String!
  node: Assist!
}

enum AssistOrderByInput {
  desc_ASC
  desc_DESC
  id_ASC
  id_DESC
  min_ASC
  min_DESC
}

input AssistScalarWhereInput {
  AND: [AssistScalarWhereInput!]
  desc: String
  desc_contains: String
  desc_ends_with: String
  desc_gt: String
  desc_gte: String
  desc_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_not: String
  desc_not_contains: String
  desc_not_ends_with: String
  desc_not_in: [String!]
  desc_not_starts_with: String
  desc_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  min: Float
  min_gt: Float
  min_gte: Float
  min_in: [Float!]
  min_lt: Float
  min_lte: Float
  min_not: Float
  min_not_in: [Float!]
  NOT: [AssistScalarWhereInput!]
  OR: [AssistScalarWhereInput!]
}

input AssistUpdateInput {
  desc: String
  match: MatchUpdateOneRequiredWithoutAssistInput
  min: Float
  player: PlayerUpdateOneRequiredWithoutAssistInput
}

input AssistUpdateManyDataInput {
  desc: String
  min: Float
}

input AssistUpdateManyMutationInput {
  desc: String
  min: Float
}

input AssistUpdateManyWithoutMatchInput {
  connect: [AssistWhereUniqueInput!]
  create: [AssistCreateWithoutMatchInput!]
  delete: [AssistWhereUniqueInput!]
  deleteMany: [AssistScalarWhereInput!]
  disconnect: [AssistWhereUniqueInput!]
  set: [AssistWhereUniqueInput!]
  update: [AssistUpdateWithWhereUniqueWithoutMatchInput!]
  updateMany: [AssistUpdateManyWithWhereNestedInput!]
  upsert: [AssistUpsertWithWhereUniqueWithoutMatchInput!]
}

input AssistUpdateManyWithoutPlayerInput {
  connect: [AssistWhereUniqueInput!]
  create: [AssistCreateWithoutPlayerInput!]
  delete: [AssistWhereUniqueInput!]
  deleteMany: [AssistScalarWhereInput!]
  disconnect: [AssistWhereUniqueInput!]
  set: [AssistWhereUniqueInput!]
  update: [AssistUpdateWithWhereUniqueWithoutPlayerInput!]
  updateMany: [AssistUpdateManyWithWhereNestedInput!]
  upsert: [AssistUpsertWithWhereUniqueWithoutPlayerInput!]
}

input AssistUpdateManyWithWhereNestedInput {
  data: AssistUpdateManyDataInput!
  where: AssistScalarWhereInput!
}

input AssistUpdateWithoutMatchDataInput {
  desc: String
  min: Float
  player: PlayerUpdateOneRequiredWithoutAssistInput
}

input AssistUpdateWithoutPlayerDataInput {
  desc: String
  match: MatchUpdateOneRequiredWithoutAssistInput
  min: Float
}

input AssistUpdateWithWhereUniqueWithoutMatchInput {
  data: AssistUpdateWithoutMatchDataInput!
  where: AssistWhereUniqueInput!
}

input AssistUpdateWithWhereUniqueWithoutPlayerInput {
  data: AssistUpdateWithoutPlayerDataInput!
  where: AssistWhereUniqueInput!
}

input AssistUpsertWithWhereUniqueWithoutMatchInput {
  create: AssistCreateWithoutMatchInput!
  update: AssistUpdateWithoutMatchDataInput!
  where: AssistWhereUniqueInput!
}

input AssistUpsertWithWhereUniqueWithoutPlayerInput {
  create: AssistCreateWithoutPlayerInput!
  update: AssistUpdateWithoutPlayerDataInput!
  where: AssistWhereUniqueInput!
}

input AssistWhereInput {
  AND: [AssistWhereInput!]
  desc: String
  desc_contains: String
  desc_ends_with: String
  desc_gt: String
  desc_gte: String
  desc_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_not: String
  desc_not_contains: String
  desc_not_ends_with: String
  desc_not_in: [String!]
  desc_not_starts_with: String
  desc_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  match: MatchWhereInput
  min: Float
  min_gt: Float
  min_gte: Float
  min_in: [Float!]
  min_lt: Float
  min_lte: Float
  min_not: Float
  min_not_in: [Float!]
  player: PlayerWhereInput
}

input AssistWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

type Booking {
  card: ColorCard
  desc: String
  id: ID!
  match: Match!
  min: Float
  player: Player!
}

type BookingConnection {
  aggregate: AggregateBooking!
  edges: [BookingEdge!]!
  pageInfo: PageInfo!
}

input BookingCreateInput {
  card: ColorCard
  desc: String
  id: ID
  match: MatchCreateOneWithoutBookingsInput!
  min: Float
  player: PlayerCreateOneWithoutBookingsInput!
}

input BookingCreateManyWithoutMatchInput {
  connect: [BookingWhereUniqueInput!]
  create: [BookingCreateWithoutMatchInput!]
}

input BookingCreateManyWithoutPlayerInput {
  connect: [BookingWhereUniqueInput!]
  create: [BookingCreateWithoutPlayerInput!]
}

input BookingCreateWithoutMatchInput {
  card: ColorCard
  desc: String
  id: ID
  min: Float
  player: PlayerCreateOneWithoutBookingsInput!
}

input BookingCreateWithoutPlayerInput {
  card: ColorCard
  desc: String
  id: ID
  match: MatchCreateOneWithoutBookingsInput!
  min: Float
}

type BookingEdge {
  cursor: String!
  node: Booking!
}

enum BookingOrderByInput {
  card_ASC
  card_DESC
  desc_ASC
  desc_DESC
  id_ASC
  id_DESC
  min_ASC
  min_DESC
}

input BookingScalarWhereInput {
  AND: [BookingScalarWhereInput!]
  card: ColorCard
  card_in: [ColorCard!]
  card_not: ColorCard
  card_not_in: [ColorCard!]
  desc: String
  desc_contains: String
  desc_ends_with: String
  desc_gt: String
  desc_gte: String
  desc_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_not: String
  desc_not_contains: String
  desc_not_ends_with: String
  desc_not_in: [String!]
  desc_not_starts_with: String
  desc_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  min: Float
  min_gt: Float
  min_gte: Float
  min_in: [Float!]
  min_lt: Float
  min_lte: Float
  min_not: Float
  min_not_in: [Float!]
  NOT: [BookingScalarWhereInput!]
  OR: [BookingScalarWhereInput!]
}

input BookingUpdateInput {
  card: ColorCard
  desc: String
  match: MatchUpdateOneRequiredWithoutBookingsInput
  min: Float
  player: PlayerUpdateOneRequiredWithoutBookingsInput
}

input BookingUpdateManyDataInput {
  card: ColorCard
  desc: String
  min: Float
}

input BookingUpdateManyMutationInput {
  card: ColorCard
  desc: String
  min: Float
}

input BookingUpdateManyWithoutMatchInput {
  connect: [BookingWhereUniqueInput!]
  create: [BookingCreateWithoutMatchInput!]
  delete: [BookingWhereUniqueInput!]
  deleteMany: [BookingScalarWhereInput!]
  disconnect: [BookingWhereUniqueInput!]
  set: [BookingWhereUniqueInput!]
  update: [BookingUpdateWithWhereUniqueWithoutMatchInput!]
  updateMany: [BookingUpdateManyWithWhereNestedInput!]
  upsert: [BookingUpsertWithWhereUniqueWithoutMatchInput!]
}

input BookingUpdateManyWithoutPlayerInput {
  connect: [BookingWhereUniqueInput!]
  create: [BookingCreateWithoutPlayerInput!]
  delete: [BookingWhereUniqueInput!]
  deleteMany: [BookingScalarWhereInput!]
  disconnect: [BookingWhereUniqueInput!]
  set: [BookingWhereUniqueInput!]
  update: [BookingUpdateWithWhereUniqueWithoutPlayerInput!]
  updateMany: [BookingUpdateManyWithWhereNestedInput!]
  upsert: [BookingUpsertWithWhereUniqueWithoutPlayerInput!]
}

input BookingUpdateManyWithWhereNestedInput {
  data: BookingUpdateManyDataInput!
  where: BookingScalarWhereInput!
}

input BookingUpdateWithoutMatchDataInput {
  card: ColorCard
  desc: String
  min: Float
  player: PlayerUpdateOneRequiredWithoutBookingsInput
}

input BookingUpdateWithoutPlayerDataInput {
  card: ColorCard
  desc: String
  match: MatchUpdateOneRequiredWithoutBookingsInput
  min: Float
}

input BookingUpdateWithWhereUniqueWithoutMatchInput {
  data: BookingUpdateWithoutMatchDataInput!
  where: BookingWhereUniqueInput!
}

input BookingUpdateWithWhereUniqueWithoutPlayerInput {
  data: BookingUpdateWithoutPlayerDataInput!
  where: BookingWhereUniqueInput!
}

input BookingUpsertWithWhereUniqueWithoutMatchInput {
  create: BookingCreateWithoutMatchInput!
  update: BookingUpdateWithoutMatchDataInput!
  where: BookingWhereUniqueInput!
}

input BookingUpsertWithWhereUniqueWithoutPlayerInput {
  create: BookingCreateWithoutPlayerInput!
  update: BookingUpdateWithoutPlayerDataInput!
  where: BookingWhereUniqueInput!
}

input BookingWhereInput {
  AND: [BookingWhereInput!]
  card: ColorCard
  card_in: [ColorCard!]
  card_not: ColorCard
  card_not_in: [ColorCard!]
  desc: String
  desc_contains: String
  desc_ends_with: String
  desc_gt: String
  desc_gte: String
  desc_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_not: String
  desc_not_contains: String
  desc_not_ends_with: String
  desc_not_in: [String!]
  desc_not_starts_with: String
  desc_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  match: MatchWhereInput
  min: Float
  min_gt: Float
  min_gte: Float
  min_in: [Float!]
  min_lt: Float
  min_lte: Float
  min_not: Float
  min_not_in: [Float!]
  player: PlayerWhereInput
}

input BookingWhereUniqueInput {
  id: ID
}

enum ColorCard {
  RED
  YELLOW
}

enum Competiton {
  CUP
  FRIENDLY
  LEAGUE
}

scalar DateTime

enum Foot {
  AMB
  LEFT
  RIGHT
  UNKNOWN
}

type Goal {
  desc: String
  id: ID!
  match: Match!
  min: Float
  player: Player!
}

type GoalConnection {
  aggregate: AggregateGoal!
  edges: [GoalEdge!]!
  pageInfo: PageInfo!
}

input GoalCreateInput {
  desc: String
  id: ID
  match: MatchCreateOneWithoutGoalsInput!
  min: Float
  player: PlayerCreateOneWithoutGoalsInput!
}

input GoalCreateManyWithoutMatchInput {
  connect: [GoalWhereUniqueInput!]
  create: [GoalCreateWithoutMatchInput!]
}

input GoalCreateManyWithoutPlayerInput {
  connect: [GoalWhereUniqueInput!]
  create: [GoalCreateWithoutPlayerInput!]
}

input GoalCreateWithoutMatchInput {
  desc: String
  id: ID
  min: Float
  player: PlayerCreateOneWithoutGoalsInput!
}

input GoalCreateWithoutPlayerInput {
  desc: String
  id: ID
  match: MatchCreateOneWithoutGoalsInput!
  min: Float
}

type GoalEdge {
  cursor: String!
  node: Goal!
}

enum GoalOrderByInput {
  desc_ASC
  desc_DESC
  id_ASC
  id_DESC
  min_ASC
  min_DESC
}

input GoalScalarWhereInput {
  AND: [GoalScalarWhereInput!]
  desc: String
  desc_contains: String
  desc_ends_with: String
  desc_gt: String
  desc_gte: String
  desc_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_not: String
  desc_not_contains: String
  desc_not_ends_with: String
  desc_not_in: [String!]
  desc_not_starts_with: String
  desc_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  min: Float
  min_gt: Float
  min_gte: Float
  min_in: [Float!]
  min_lt: Float
  min_lte: Float
  min_not: Float
  min_not_in: [Float!]
  NOT: [GoalScalarWhereInput!]
  OR: [GoalScalarWhereInput!]
}

input GoalUpdateInput {
  desc: String
  match: MatchUpdateOneRequiredWithoutGoalsInput
  min: Float
  player: PlayerUpdateOneRequiredWithoutGoalsInput
}

input GoalUpdateManyDataInput {
  desc: String
  min: Float
}

input GoalUpdateManyMutationInput {
  desc: String
  min: Float
}

input GoalUpdateManyWithoutMatchInput {
  connect: [GoalWhereUniqueInput!]
  create: [GoalCreateWithoutMatchInput!]
  delete: [GoalWhereUniqueInput!]
  deleteMany: [GoalScalarWhereInput!]
  disconnect: [GoalWhereUniqueInput!]
  set: [GoalWhereUniqueInput!]
  update: [GoalUpdateWithWhereUniqueWithoutMatchInput!]
  updateMany: [GoalUpdateManyWithWhereNestedInput!]
  upsert: [GoalUpsertWithWhereUniqueWithoutMatchInput!]
}

input GoalUpdateManyWithoutPlayerInput {
  connect: [GoalWhereUniqueInput!]
  create: [GoalCreateWithoutPlayerInput!]
  delete: [GoalWhereUniqueInput!]
  deleteMany: [GoalScalarWhereInput!]
  disconnect: [GoalWhereUniqueInput!]
  set: [GoalWhereUniqueInput!]
  update: [GoalUpdateWithWhereUniqueWithoutPlayerInput!]
  updateMany: [GoalUpdateManyWithWhereNestedInput!]
  upsert: [GoalUpsertWithWhereUniqueWithoutPlayerInput!]
}

input GoalUpdateManyWithWhereNestedInput {
  data: GoalUpdateManyDataInput!
  where: GoalScalarWhereInput!
}

input GoalUpdateWithoutMatchDataInput {
  desc: String
  min: Float
  player: PlayerUpdateOneRequiredWithoutGoalsInput
}

input GoalUpdateWithoutPlayerDataInput {
  desc: String
  match: MatchUpdateOneRequiredWithoutGoalsInput
  min: Float
}

input GoalUpdateWithWhereUniqueWithoutMatchInput {
  data: GoalUpdateWithoutMatchDataInput!
  where: GoalWhereUniqueInput!
}

input GoalUpdateWithWhereUniqueWithoutPlayerInput {
  data: GoalUpdateWithoutPlayerDataInput!
  where: GoalWhereUniqueInput!
}

input GoalUpsertWithWhereUniqueWithoutMatchInput {
  create: GoalCreateWithoutMatchInput!
  update: GoalUpdateWithoutMatchDataInput!
  where: GoalWhereUniqueInput!
}

input GoalUpsertWithWhereUniqueWithoutPlayerInput {
  create: GoalCreateWithoutPlayerInput!
  update: GoalUpdateWithoutPlayerDataInput!
  where: GoalWhereUniqueInput!
}

input GoalWhereInput {
  AND: [GoalWhereInput!]
  desc: String
  desc_contains: String
  desc_ends_with: String
  desc_gt: String
  desc_gte: String
  desc_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_not: String
  desc_not_contains: String
  desc_not_ends_with: String
  desc_not_in: [String!]
  desc_not_starts_with: String
  desc_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  match: MatchWhereInput
  min: Float
  min_gt: Float
  min_gte: Float
  min_in: [Float!]
  min_lt: Float
  min_lte: Float
  min_not: Float
  min_not_in: [Float!]
  player: PlayerWhereInput
}

input GoalWhereUniqueInput {
  id: ID
}

type HomeAndAway {
  awayTeam: Int
  homeTeam: Int
}

input HomeAndAwayCreateInput {
  awayTeam: Int
  homeTeam: Int
}

input HomeAndAwayCreateOneInput {
  create: HomeAndAwayCreateInput
}

input HomeAndAwayUpdateDataInput {
  awayTeam: Int
  homeTeam: Int
}

input HomeAndAwayUpdateOneInput {
  create: HomeAndAwayCreateInput
  delete: Boolean
  disconnect: Boolean
  update: HomeAndAwayUpdateDataInput
  upsert: HomeAndAwayUpsertNestedInput
}

input HomeAndAwayUpdateOneRequiredInput {
  create: HomeAndAwayCreateInput
  update: HomeAndAwayUpdateDataInput
  upsert: HomeAndAwayUpsertNestedInput
}

input HomeAndAwayUpsertNestedInput {
  create: HomeAndAwayCreateInput!
  update: HomeAndAwayUpdateDataInput!
}

input HomeAndAwayWhereInput {
  AND: [HomeAndAwayWhereInput!]
  awayTeam: Int
  awayTeam_gt: Int
  awayTeam_gte: Int
  awayTeam_in: [Int!]
  awayTeam_lt: Int
  awayTeam_lte: Int
  awayTeam_not: Int
  awayTeam_not_in: [Int!]
  homeTeam: Int
  homeTeam_gt: Int
  homeTeam_gte: Int
  homeTeam_in: [Int!]
  homeTeam_lt: Int
  homeTeam_lte: Int
  homeTeam_not: Int
  homeTeam_not_in: [Int!]
}

type Injury {
  desc: String!
  endAt: DateTime
  id: ID!
  player: Player
  startAt: DateTime!
}

type InjuryConnection {
  aggregate: AggregateInjury!
  edges: [InjuryEdge!]!
  pageInfo: PageInfo!
}

input InjuryCreateInput {
  desc: String!
  endAt: DateTime
  id: ID
  player: PlayerCreateOneWithoutInjuryInput
  startAt: DateTime!
}

input InjuryCreateManyWithoutPlayerInput {
  connect: [InjuryWhereUniqueInput!]
  create: [InjuryCreateWithoutPlayerInput!]
}

input InjuryCreateWithoutPlayerInput {
  desc: String!
  endAt: DateTime
  id: ID
  startAt: DateTime!
}

type InjuryEdge {
  cursor: String!
  node: Injury!
}

enum InjuryOrderByInput {
  desc_ASC
  desc_DESC
  endAt_ASC
  endAt_DESC
  id_ASC
  id_DESC
  startAt_ASC
  startAt_DESC
}

input InjuryScalarWhereInput {
  AND: [InjuryScalarWhereInput!]
  desc: String
  desc_contains: String
  desc_ends_with: String
  desc_gt: String
  desc_gte: String
  desc_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_not: String
  desc_not_contains: String
  desc_not_ends_with: String
  desc_not_in: [String!]
  desc_not_starts_with: String
  desc_starts_with: String
  endAt: DateTime
  endAt_gt: DateTime
  endAt_gte: DateTime
  endAt_in: [DateTime!]
  endAt_lt: DateTime
  endAt_lte: DateTime
  endAt_not: DateTime
  endAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [InjuryScalarWhereInput!]
  OR: [InjuryScalarWhereInput!]
  startAt: DateTime
  startAt_gt: DateTime
  startAt_gte: DateTime
  startAt_in: [DateTime!]
  startAt_lt: DateTime
  startAt_lte: DateTime
  startAt_not: DateTime
  startAt_not_in: [DateTime!]
}

input InjuryUpdateInput {
  desc: String
  endAt: DateTime
  player: PlayerUpdateOneWithoutInjuryInput
  startAt: DateTime
}

input InjuryUpdateManyDataInput {
  desc: String
  endAt: DateTime
  startAt: DateTime
}

input InjuryUpdateManyMutationInput {
  desc: String
  endAt: DateTime
  startAt: DateTime
}

input InjuryUpdateManyWithoutPlayerInput {
  connect: [InjuryWhereUniqueInput!]
  create: [InjuryCreateWithoutPlayerInput!]
  delete: [InjuryWhereUniqueInput!]
  deleteMany: [InjuryScalarWhereInput!]
  disconnect: [InjuryWhereUniqueInput!]
  set: [InjuryWhereUniqueInput!]
  update: [InjuryUpdateWithWhereUniqueWithoutPlayerInput!]
  updateMany: [InjuryUpdateManyWithWhereNestedInput!]
  upsert: [InjuryUpsertWithWhereUniqueWithoutPlayerInput!]
}

input InjuryUpdateManyWithWhereNestedInput {
  data: InjuryUpdateManyDataInput!
  where: InjuryScalarWhereInput!
}

input InjuryUpdateWithoutPlayerDataInput {
  desc: String
  endAt: DateTime
  startAt: DateTime
}

input InjuryUpdateWithWhereUniqueWithoutPlayerInput {
  data: InjuryUpdateWithoutPlayerDataInput!
  where: InjuryWhereUniqueInput!
}

input InjuryUpsertWithWhereUniqueWithoutPlayerInput {
  create: InjuryCreateWithoutPlayerInput!
  update: InjuryUpdateWithoutPlayerDataInput!
  where: InjuryWhereUniqueInput!
}

input InjuryWhereInput {
  AND: [InjuryWhereInput!]
  desc: String
  desc_contains: String
  desc_ends_with: String
  desc_gt: String
  desc_gte: String
  desc_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_not: String
  desc_not_contains: String
  desc_not_ends_with: String
  desc_not_in: [String!]
  desc_not_starts_with: String
  desc_starts_with: String
  endAt: DateTime
  endAt_gt: DateTime
  endAt_gte: DateTime
  endAt_in: [DateTime!]
  endAt_lt: DateTime
  endAt_lte: DateTime
  endAt_not: DateTime
  endAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  player: PlayerWhereInput
  startAt: DateTime
  startAt_gt: DateTime
  startAt_gte: DateTime
  startAt_in: [DateTime!]
  startAt_lt: DateTime
  startAt_lte: DateTime
  startAt_not: DateTime
  startAt_not_in: [DateTime!]
}

input InjuryWhereUniqueInput {
  id: ID
}

scalar Long

type Match {
  assist(after: String, before: String, first: Int, last: Int, orderBy: AssistOrderByInput, skip: Int, where: AssistWhereInput): [Assist!]
  bench(after: String, before: String, first: Int, last: Int, orderBy: PlayerOrderByInput, skip: Int, where: PlayerWhereInput): [Player!]
  bookings(after: String, before: String, first: Int, last: Int, orderBy: BookingOrderByInput, skip: Int, where: BookingWhereInput): [Booking!]
  captain: Player!
  competition: Competiton
  date: DateTime
  desc: String
  finished: Boolean
  goals(after: String, before: String, first: Int, last: Int, orderBy: GoalOrderByInput, skip: Int, where: GoalWhereInput): [Goal!]
  homeTeam: Boolean
  id: ID!
  jornada: Int!
  lineup(after: String, before: String, first: Int, last: Int, orderBy: PlayerOrderByInput, skip: Int, where: PlayerWhereInput): [Player!]
  opponent: Team
  referees: String
  score: Score!
  staff(after: String, before: String, first: Int, last: Int, orderBy: StaffOrderByInput, skip: Int, where: StaffWhereInput): [Staff!]
  substitutions: [Substitutions!]
  win: Boolean
}

type MatchConnection {
  aggregate: AggregateMatch!
  edges: [MatchEdge!]!
  pageInfo: PageInfo!
}

input MatchCreateInput {
  assist: AssistCreateManyWithoutMatchInput
  bench: PlayerCreateManyWithoutBenchInput
  bookings: BookingCreateManyWithoutMatchInput
  captain: PlayerCreateOneInput!
  competition: Competiton
  date: DateTime
  desc: String
  finished: Boolean
  goals: GoalCreateManyWithoutMatchInput
  homeTeam: Boolean
  id: ID
  jornada: Int!
  lineup: PlayerCreateManyWithoutLineupInput
  opponent: TeamCreateOneInput
  referees: String
  score: ScoreCreateOneInput!
  staff: StaffCreateManyWithoutMatchesInput
  substitutions: SubstitutionsCreateManyInput
  win: Boolean
}

input MatchCreateManyWithoutBenchInput {
  connect: [MatchWhereUniqueInput!]
  create: [MatchCreateWithoutBenchInput!]
}

input MatchCreateManyWithoutLineupInput {
  connect: [MatchWhereUniqueInput!]
  create: [MatchCreateWithoutLineupInput!]
}

input MatchCreateManyWithoutStaffInput {
  connect: [MatchWhereUniqueInput!]
  create: [MatchCreateWithoutStaffInput!]
}

input MatchCreateOneWithoutAssistInput {
  connect: MatchWhereUniqueInput
  create: MatchCreateWithoutAssistInput
}

input MatchCreateOneWithoutBookingsInput {
  connect: MatchWhereUniqueInput
  create: MatchCreateWithoutBookingsInput
}

input MatchCreateOneWithoutGoalsInput {
  connect: MatchWhereUniqueInput
  create: MatchCreateWithoutGoalsInput
}

input MatchCreateWithoutAssistInput {
  bench: PlayerCreateManyWithoutBenchInput
  bookings: BookingCreateManyWithoutMatchInput
  captain: PlayerCreateOneInput!
  competition: Competiton
  date: DateTime
  desc: String
  finished: Boolean
  goals: GoalCreateManyWithoutMatchInput
  homeTeam: Boolean
  id: ID
  jornada: Int!
  lineup: PlayerCreateManyWithoutLineupInput
  opponent: TeamCreateOneInput
  referees: String
  score: ScoreCreateOneInput!
  staff: StaffCreateManyWithoutMatchesInput
  substitutions: SubstitutionsCreateManyInput
  win: Boolean
}

input MatchCreateWithoutBenchInput {
  assist: AssistCreateManyWithoutMatchInput
  bookings: BookingCreateManyWithoutMatchInput
  captain: PlayerCreateOneInput!
  competition: Competiton
  date: DateTime
  desc: String
  finished: Boolean
  goals: GoalCreateManyWithoutMatchInput
  homeTeam: Boolean
  id: ID
  jornada: Int!
  lineup: PlayerCreateManyWithoutLineupInput
  opponent: TeamCreateOneInput
  referees: String
  score: ScoreCreateOneInput!
  staff: StaffCreateManyWithoutMatchesInput
  substitutions: SubstitutionsCreateManyInput
  win: Boolean
}

input MatchCreateWithoutBookingsInput {
  assist: AssistCreateManyWithoutMatchInput
  bench: PlayerCreateManyWithoutBenchInput
  captain: PlayerCreateOneInput!
  competition: Competiton
  date: DateTime
  desc: String
  finished: Boolean
  goals: GoalCreateManyWithoutMatchInput
  homeTeam: Boolean
  id: ID
  jornada: Int!
  lineup: PlayerCreateManyWithoutLineupInput
  opponent: TeamCreateOneInput
  referees: String
  score: ScoreCreateOneInput!
  staff: StaffCreateManyWithoutMatchesInput
  substitutions: SubstitutionsCreateManyInput
  win: Boolean
}

input MatchCreateWithoutGoalsInput {
  assist: AssistCreateManyWithoutMatchInput
  bench: PlayerCreateManyWithoutBenchInput
  bookings: BookingCreateManyWithoutMatchInput
  captain: PlayerCreateOneInput!
  competition: Competiton
  date: DateTime
  desc: String
  finished: Boolean
  homeTeam: Boolean
  id: ID
  jornada: Int!
  lineup: PlayerCreateManyWithoutLineupInput
  opponent: TeamCreateOneInput
  referees: String
  score: ScoreCreateOneInput!
  staff: StaffCreateManyWithoutMatchesInput
  substitutions: SubstitutionsCreateManyInput
  win: Boolean
}

input MatchCreateWithoutLineupInput {
  assist: AssistCreateManyWithoutMatchInput
  bench: PlayerCreateManyWithoutBenchInput
  bookings: BookingCreateManyWithoutMatchInput
  captain: PlayerCreateOneInput!
  competition: Competiton
  date: DateTime
  desc: String
  finished: Boolean
  goals: GoalCreateManyWithoutMatchInput
  homeTeam: Boolean
  id: ID
  jornada: Int!
  opponent: TeamCreateOneInput
  referees: String
  score: ScoreCreateOneInput!
  staff: StaffCreateManyWithoutMatchesInput
  substitutions: SubstitutionsCreateManyInput
  win: Boolean
}

input MatchCreateWithoutStaffInput {
  assist: AssistCreateManyWithoutMatchInput
  bench: PlayerCreateManyWithoutBenchInput
  bookings: BookingCreateManyWithoutMatchInput
  captain: PlayerCreateOneInput!
  competition: Competiton
  date: DateTime
  desc: String
  finished: Boolean
  goals: GoalCreateManyWithoutMatchInput
  homeTeam: Boolean
  id: ID
  jornada: Int!
  lineup: PlayerCreateManyWithoutLineupInput
  opponent: TeamCreateOneInput
  referees: String
  score: ScoreCreateOneInput!
  substitutions: SubstitutionsCreateManyInput
  win: Boolean
}

type MatchEdge {
  cursor: String!
  node: Match!
}

enum MatchOrderByInput {
  competition_ASC
  competition_DESC
  date_ASC
  date_DESC
  desc_ASC
  desc_DESC
  finished_ASC
  finished_DESC
  homeTeam_ASC
  homeTeam_DESC
  id_ASC
  id_DESC
  jornada_ASC
  jornada_DESC
  referees_ASC
  referees_DESC
  win_ASC
  win_DESC
}

input MatchScalarWhereInput {
  AND: [MatchScalarWhereInput!]
  competition: Competiton
  competition_in: [Competiton!]
  competition_not: Competiton
  competition_not_in: [Competiton!]
  date: DateTime
  date_gt: DateTime
  date_gte: DateTime
  date_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_not: DateTime
  date_not_in: [DateTime!]
  desc: String
  desc_contains: String
  desc_ends_with: String
  desc_gt: String
  desc_gte: String
  desc_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_not: String
  desc_not_contains: String
  desc_not_ends_with: String
  desc_not_in: [String!]
  desc_not_starts_with: String
  desc_starts_with: String
  finished: Boolean
  finished_not: Boolean
  homeTeam: Boolean
  homeTeam_not: Boolean
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  jornada: Int
  jornada_gt: Int
  jornada_gte: Int
  jornada_in: [Int!]
  jornada_lt: Int
  jornada_lte: Int
  jornada_not: Int
  jornada_not_in: [Int!]
  NOT: [MatchScalarWhereInput!]
  OR: [MatchScalarWhereInput!]
  referees: String
  referees_contains: String
  referees_ends_with: String
  referees_gt: String
  referees_gte: String
  referees_in: [String!]
  referees_lt: String
  referees_lte: String
  referees_not: String
  referees_not_contains: String
  referees_not_ends_with: String
  referees_not_in: [String!]
  referees_not_starts_with: String
  referees_starts_with: String
  win: Boolean
  win_not: Boolean
}

input MatchUpdateInput {
  assist: AssistUpdateManyWithoutMatchInput
  bench: PlayerUpdateManyWithoutBenchInput
  bookings: BookingUpdateManyWithoutMatchInput
  captain: PlayerUpdateOneRequiredInput
  competition: Competiton
  date: DateTime
  desc: String
  finished: Boolean
  goals: GoalUpdateManyWithoutMatchInput
  homeTeam: Boolean
  jornada: Int
  lineup: PlayerUpdateManyWithoutLineupInput
  opponent: TeamUpdateOneInput
  referees: String
  score: ScoreUpdateOneRequiredInput
  staff: StaffUpdateManyWithoutMatchesInput
  substitutions: SubstitutionsUpdateManyInput
  win: Boolean
}

input MatchUpdateManyDataInput {
  competition: Competiton
  date: DateTime
  desc: String
  finished: Boolean
  homeTeam: Boolean
  jornada: Int
  referees: String
  win: Boolean
}

input MatchUpdateManyMutationInput {
  competition: Competiton
  date: DateTime
  desc: String
  finished: Boolean
  homeTeam: Boolean
  jornada: Int
  referees: String
  win: Boolean
}

input MatchUpdateManyWithoutBenchInput {
  connect: [MatchWhereUniqueInput!]
  create: [MatchCreateWithoutBenchInput!]
  delete: [MatchWhereUniqueInput!]
  deleteMany: [MatchScalarWhereInput!]
  disconnect: [MatchWhereUniqueInput!]
  set: [MatchWhereUniqueInput!]
  update: [MatchUpdateWithWhereUniqueWithoutBenchInput!]
  updateMany: [MatchUpdateManyWithWhereNestedInput!]
  upsert: [MatchUpsertWithWhereUniqueWithoutBenchInput!]
}

input MatchUpdateManyWithoutLineupInput {
  connect: [MatchWhereUniqueInput!]
  create: [MatchCreateWithoutLineupInput!]
  delete: [MatchWhereUniqueInput!]
  deleteMany: [MatchScalarWhereInput!]
  disconnect: [MatchWhereUniqueInput!]
  set: [MatchWhereUniqueInput!]
  update: [MatchUpdateWithWhereUniqueWithoutLineupInput!]
  updateMany: [MatchUpdateManyWithWhereNestedInput!]
  upsert: [MatchUpsertWithWhereUniqueWithoutLineupInput!]
}

input MatchUpdateManyWithoutStaffInput {
  connect: [MatchWhereUniqueInput!]
  create: [MatchCreateWithoutStaffInput!]
  delete: [MatchWhereUniqueInput!]
  deleteMany: [MatchScalarWhereInput!]
  disconnect: [MatchWhereUniqueInput!]
  set: [MatchWhereUniqueInput!]
  update: [MatchUpdateWithWhereUniqueWithoutStaffInput!]
  updateMany: [MatchUpdateManyWithWhereNestedInput!]
  upsert: [MatchUpsertWithWhereUniqueWithoutStaffInput!]
}

input MatchUpdateManyWithWhereNestedInput {
  data: MatchUpdateManyDataInput!
  where: MatchScalarWhereInput!
}

input MatchUpdateOneRequiredWithoutAssistInput {
  connect: MatchWhereUniqueInput
  create: MatchCreateWithoutAssistInput
  update: MatchUpdateWithoutAssistDataInput
  upsert: MatchUpsertWithoutAssistInput
}

input MatchUpdateOneRequiredWithoutBookingsInput {
  connect: MatchWhereUniqueInput
  create: MatchCreateWithoutBookingsInput
  update: MatchUpdateWithoutBookingsDataInput
  upsert: MatchUpsertWithoutBookingsInput
}

input MatchUpdateOneRequiredWithoutGoalsInput {
  connect: MatchWhereUniqueInput
  create: MatchCreateWithoutGoalsInput
  update: MatchUpdateWithoutGoalsDataInput
  upsert: MatchUpsertWithoutGoalsInput
}

input MatchUpdateWithoutAssistDataInput {
  bench: PlayerUpdateManyWithoutBenchInput
  bookings: BookingUpdateManyWithoutMatchInput
  captain: PlayerUpdateOneRequiredInput
  competition: Competiton
  date: DateTime
  desc: String
  finished: Boolean
  goals: GoalUpdateManyWithoutMatchInput
  homeTeam: Boolean
  jornada: Int
  lineup: PlayerUpdateManyWithoutLineupInput
  opponent: TeamUpdateOneInput
  referees: String
  score: ScoreUpdateOneRequiredInput
  staff: StaffUpdateManyWithoutMatchesInput
  substitutions: SubstitutionsUpdateManyInput
  win: Boolean
}

input MatchUpdateWithoutBenchDataInput {
  assist: AssistUpdateManyWithoutMatchInput
  bookings: BookingUpdateManyWithoutMatchInput
  captain: PlayerUpdateOneRequiredInput
  competition: Competiton
  date: DateTime
  desc: String
  finished: Boolean
  goals: GoalUpdateManyWithoutMatchInput
  homeTeam: Boolean
  jornada: Int
  lineup: PlayerUpdateManyWithoutLineupInput
  opponent: TeamUpdateOneInput
  referees: String
  score: ScoreUpdateOneRequiredInput
  staff: StaffUpdateManyWithoutMatchesInput
  substitutions: SubstitutionsUpdateManyInput
  win: Boolean
}

input MatchUpdateWithoutBookingsDataInput {
  assist: AssistUpdateManyWithoutMatchInput
  bench: PlayerUpdateManyWithoutBenchInput
  captain: PlayerUpdateOneRequiredInput
  competition: Competiton
  date: DateTime
  desc: String
  finished: Boolean
  goals: GoalUpdateManyWithoutMatchInput
  homeTeam: Boolean
  jornada: Int
  lineup: PlayerUpdateManyWithoutLineupInput
  opponent: TeamUpdateOneInput
  referees: String
  score: ScoreUpdateOneRequiredInput
  staff: StaffUpdateManyWithoutMatchesInput
  substitutions: SubstitutionsUpdateManyInput
  win: Boolean
}

input MatchUpdateWithoutGoalsDataInput {
  assist: AssistUpdateManyWithoutMatchInput
  bench: PlayerUpdateManyWithoutBenchInput
  bookings: BookingUpdateManyWithoutMatchInput
  captain: PlayerUpdateOneRequiredInput
  competition: Competiton
  date: DateTime
  desc: String
  finished: Boolean
  homeTeam: Boolean
  jornada: Int
  lineup: PlayerUpdateManyWithoutLineupInput
  opponent: TeamUpdateOneInput
  referees: String
  score: ScoreUpdateOneRequiredInput
  staff: StaffUpdateManyWithoutMatchesInput
  substitutions: SubstitutionsUpdateManyInput
  win: Boolean
}

input MatchUpdateWithoutLineupDataInput {
  assist: AssistUpdateManyWithoutMatchInput
  bench: PlayerUpdateManyWithoutBenchInput
  bookings: BookingUpdateManyWithoutMatchInput
  captain: PlayerUpdateOneRequiredInput
  competition: Competiton
  date: DateTime
  desc: String
  finished: Boolean
  goals: GoalUpdateManyWithoutMatchInput
  homeTeam: Boolean
  jornada: Int
  opponent: TeamUpdateOneInput
  referees: String
  score: ScoreUpdateOneRequiredInput
  staff: StaffUpdateManyWithoutMatchesInput
  substitutions: SubstitutionsUpdateManyInput
  win: Boolean
}

input MatchUpdateWithoutStaffDataInput {
  assist: AssistUpdateManyWithoutMatchInput
  bench: PlayerUpdateManyWithoutBenchInput
  bookings: BookingUpdateManyWithoutMatchInput
  captain: PlayerUpdateOneRequiredInput
  competition: Competiton
  date: DateTime
  desc: String
  finished: Boolean
  goals: GoalUpdateManyWithoutMatchInput
  homeTeam: Boolean
  jornada: Int
  lineup: PlayerUpdateManyWithoutLineupInput
  opponent: TeamUpdateOneInput
  referees: String
  score: ScoreUpdateOneRequiredInput
  substitutions: SubstitutionsUpdateManyInput
  win: Boolean
}

input MatchUpdateWithWhereUniqueWithoutBenchInput {
  data: MatchUpdateWithoutBenchDataInput!
  where: MatchWhereUniqueInput!
}

input MatchUpdateWithWhereUniqueWithoutLineupInput {
  data: MatchUpdateWithoutLineupDataInput!
  where: MatchWhereUniqueInput!
}

input MatchUpdateWithWhereUniqueWithoutStaffInput {
  data: MatchUpdateWithoutStaffDataInput!
  where: MatchWhereUniqueInput!
}

input MatchUpsertWithoutAssistInput {
  create: MatchCreateWithoutAssistInput!
  update: MatchUpdateWithoutAssistDataInput!
}

input MatchUpsertWithoutBookingsInput {
  create: MatchCreateWithoutBookingsInput!
  update: MatchUpdateWithoutBookingsDataInput!
}

input MatchUpsertWithoutGoalsInput {
  create: MatchCreateWithoutGoalsInput!
  update: MatchUpdateWithoutGoalsDataInput!
}

input MatchUpsertWithWhereUniqueWithoutBenchInput {
  create: MatchCreateWithoutBenchInput!
  update: MatchUpdateWithoutBenchDataInput!
  where: MatchWhereUniqueInput!
}

input MatchUpsertWithWhereUniqueWithoutLineupInput {
  create: MatchCreateWithoutLineupInput!
  update: MatchUpdateWithoutLineupDataInput!
  where: MatchWhereUniqueInput!
}

input MatchUpsertWithWhereUniqueWithoutStaffInput {
  create: MatchCreateWithoutStaffInput!
  update: MatchUpdateWithoutStaffDataInput!
  where: MatchWhereUniqueInput!
}

input MatchWhereInput {
  AND: [MatchWhereInput!]
  assist_some: AssistWhereInput
  bench_some: PlayerWhereInput
  bookings_some: BookingWhereInput
  captain: PlayerWhereInput
  competition: Competiton
  competition_in: [Competiton!]
  competition_not: Competiton
  competition_not_in: [Competiton!]
  date: DateTime
  date_gt: DateTime
  date_gte: DateTime
  date_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_not: DateTime
  date_not_in: [DateTime!]
  desc: String
  desc_contains: String
  desc_ends_with: String
  desc_gt: String
  desc_gte: String
  desc_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_not: String
  desc_not_contains: String
  desc_not_ends_with: String
  desc_not_in: [String!]
  desc_not_starts_with: String
  desc_starts_with: String
  finished: Boolean
  finished_not: Boolean
  goals_some: GoalWhereInput
  homeTeam: Boolean
  homeTeam_not: Boolean
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  jornada: Int
  jornada_gt: Int
  jornada_gte: Int
  jornada_in: [Int!]
  jornada_lt: Int
  jornada_lte: Int
  jornada_not: Int
  jornada_not_in: [Int!]
  lineup_some: PlayerWhereInput
  opponent: TeamWhereInput
  referees: String
  referees_contains: String
  referees_ends_with: String
  referees_gt: String
  referees_gte: String
  referees_in: [String!]
  referees_lt: String
  referees_lte: String
  referees_not: String
  referees_not_contains: String
  referees_not_ends_with: String
  referees_not_in: [String!]
  referees_not_starts_with: String
  referees_starts_with: String
  score: ScoreWhereInput
  staff_some: StaffWhereInput
  substitutions_every: SubstitutionsRestrictedWhereInput
  substitutions_none: SubstitutionsRestrictedWhereInput
  substitutions_some: SubstitutionsWhereInput
  win: Boolean
  win_not: Boolean
}

input MatchWhereUniqueInput {
  id: ID
  jornada: Int
}

type Mutation {
  createAssist(data: AssistCreateInput!): Assist!
  createBooking(data: BookingCreateInput!): Booking!
  createGoal(data: GoalCreateInput!): Goal!
  createInjury(data: InjuryCreateInput!): Injury!
  createMatch(data: MatchCreateInput!): Match!
  createPlayer(data: PlayerCreateInput!): Player!
  createStaff(data: StaffCreateInput!): Staff!
  createTeam(data: TeamCreateInput!): Team!
  deleteAssist(where: AssistWhereUniqueInput!): Assist
  deleteBooking(where: BookingWhereUniqueInput!): Booking
  deleteGoal(where: GoalWhereUniqueInput!): Goal
  deleteInjury(where: InjuryWhereUniqueInput!): Injury
  deleteManyAssists(where: AssistWhereInput): BatchPayload!
  deleteManyBookings(where: BookingWhereInput): BatchPayload!
  deleteManyGoals(where: GoalWhereInput): BatchPayload!
  deleteManyInjuries(where: InjuryWhereInput): BatchPayload!
  deleteManyMatches(where: MatchWhereInput): BatchPayload!
  deleteManyPlayers(where: PlayerWhereInput): BatchPayload!
  deleteManyStaffs(where: StaffWhereInput): BatchPayload!
  deleteManyTeams(where: TeamWhereInput): BatchPayload!
  deleteMatch(where: MatchWhereUniqueInput!): Match
  deletePlayer(where: PlayerWhereUniqueInput!): Player
  deleteStaff(where: StaffWhereUniqueInput!): Staff
  deleteTeam(where: TeamWhereUniqueInput!): Team
  updateAssist(data: AssistUpdateInput!, where: AssistWhereUniqueInput!): Assist
  updateBooking(data: BookingUpdateInput!, where: BookingWhereUniqueInput!): Booking
  updateGoal(data: GoalUpdateInput!, where: GoalWhereUniqueInput!): Goal
  updateInjury(data: InjuryUpdateInput!, where: InjuryWhereUniqueInput!): Injury
  updateManyAssists(data: AssistUpdateManyMutationInput!, where: AssistWhereInput): BatchPayload!
  updateManyBookings(data: BookingUpdateManyMutationInput!, where: BookingWhereInput): BatchPayload!
  updateManyGoals(data: GoalUpdateManyMutationInput!, where: GoalWhereInput): BatchPayload!
  updateManyInjuries(data: InjuryUpdateManyMutationInput!, where: InjuryWhereInput): BatchPayload!
  updateManyMatches(data: MatchUpdateManyMutationInput!, where: MatchWhereInput): BatchPayload!
  updateManyPlayers(data: PlayerUpdateManyMutationInput!, where: PlayerWhereInput): BatchPayload!
  updateManyStaffs(data: StaffUpdateManyMutationInput!, where: StaffWhereInput): BatchPayload!
  updateManyTeams(data: TeamUpdateManyMutationInput!, where: TeamWhereInput): BatchPayload!
  updateMatch(data: MatchUpdateInput!, where: MatchWhereUniqueInput!): Match
  updatePlayer(data: PlayerUpdateInput!, where: PlayerWhereUniqueInput!): Player
  updateStaff(data: StaffUpdateInput!, where: StaffWhereUniqueInput!): Staff
  updateTeam(data: TeamUpdateInput!, where: TeamWhereUniqueInput!): Team
  upsertAssist(create: AssistCreateInput!, update: AssistUpdateInput!, where: AssistWhereUniqueInput!): Assist!
  upsertBooking(create: BookingCreateInput!, update: BookingUpdateInput!, where: BookingWhereUniqueInput!): Booking!
  upsertGoal(create: GoalCreateInput!, update: GoalUpdateInput!, where: GoalWhereUniqueInput!): Goal!
  upsertInjury(create: InjuryCreateInput!, update: InjuryUpdateInput!, where: InjuryWhereUniqueInput!): Injury!
  upsertMatch(create: MatchCreateInput!, update: MatchUpdateInput!, where: MatchWhereUniqueInput!): Match!
  upsertPlayer(create: PlayerCreateInput!, update: PlayerUpdateInput!, where: PlayerWhereUniqueInput!): Player!
  upsertStaff(create: StaffCreateInput!, update: StaffUpdateInput!, where: StaffWhereUniqueInput!): Staff!
  upsertTeam(create: TeamCreateInput!, update: TeamUpdateInput!, where: TeamWhereUniqueInput!): Team!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type PersonalInfo {
  brothers: Int
  childs: Int
  clubBrothers: Int
  dateOfBirth: DateTime
  dni: String!
  email: String
  firstName: String!
  id: ID!
  lastName: String
  name: String!
  origin: String
  poscBrothers: Int
  status: String
  tel: Int
}

input PersonalInfoCreateInput {
  brothers: Int
  childs: Int
  clubBrothers: Int
  dateOfBirth: DateTime
  dni: String!
  email: String
  firstName: String!
  id: ID
  lastName: String
  name: String!
  origin: String
  poscBrothers: Int
  status: String
  tel: Int
}

input PersonalInfoCreateOneInput {
  create: PersonalInfoCreateInput
}

input PersonalInfoUpdateDataInput {
  brothers: Int
  childs: Int
  clubBrothers: Int
  dateOfBirth: DateTime
  dni: String
  email: String
  firstName: String
  lastName: String
  name: String
  origin: String
  poscBrothers: Int
  status: String
  tel: Int
}

input PersonalInfoUpdateOneInput {
  connect: PersonalInfoWhereUniqueInput
  create: PersonalInfoCreateInput
  delete: Boolean
  disconnect: Boolean
  update: PersonalInfoUpdateDataInput
  upsert: PersonalInfoUpsertNestedInput
}

input PersonalInfoUpsertNestedInput {
  create: PersonalInfoCreateInput!
  update: PersonalInfoUpdateDataInput!
}

input PersonalInfoWhereInput {
  AND: [PersonalInfoWhereInput!]
  brothers: Int
  brothers_gt: Int
  brothers_gte: Int
  brothers_in: [Int!]
  brothers_lt: Int
  brothers_lte: Int
  brothers_not: Int
  brothers_not_in: [Int!]
  childs: Int
  childs_gt: Int
  childs_gte: Int
  childs_in: [Int!]
  childs_lt: Int
  childs_lte: Int
  childs_not: Int
  childs_not_in: [Int!]
  clubBrothers: Int
  clubBrothers_gt: Int
  clubBrothers_gte: Int
  clubBrothers_in: [Int!]
  clubBrothers_lt: Int
  clubBrothers_lte: Int
  clubBrothers_not: Int
  clubBrothers_not_in: [Int!]
  dateOfBirth: DateTime
  dateOfBirth_gt: DateTime
  dateOfBirth_gte: DateTime
  dateOfBirth_in: [DateTime!]
  dateOfBirth_lt: DateTime
  dateOfBirth_lte: DateTime
  dateOfBirth_not: DateTime
  dateOfBirth_not_in: [DateTime!]
  dni: String
  dni_contains: String
  dni_ends_with: String
  dni_gt: String
  dni_gte: String
  dni_in: [String!]
  dni_lt: String
  dni_lte: String
  dni_not: String
  dni_not_contains: String
  dni_not_ends_with: String
  dni_not_in: [String!]
  dni_not_starts_with: String
  dni_starts_with: String
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  firstName: String
  firstName_contains: String
  firstName_ends_with: String
  firstName_gt: String
  firstName_gte: String
  firstName_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_not: String
  firstName_not_contains: String
  firstName_not_ends_with: String
  firstName_not_in: [String!]
  firstName_not_starts_with: String
  firstName_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  lastName: String
  lastName_contains: String
  lastName_ends_with: String
  lastName_gt: String
  lastName_gte: String
  lastName_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_not: String
  lastName_not_contains: String
  lastName_not_ends_with: String
  lastName_not_in: [String!]
  lastName_not_starts_with: String
  lastName_starts_with: String
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  origin: String
  origin_contains: String
  origin_ends_with: String
  origin_gt: String
  origin_gte: String
  origin_in: [String!]
  origin_lt: String
  origin_lte: String
  origin_not: String
  origin_not_contains: String
  origin_not_ends_with: String
  origin_not_in: [String!]
  origin_not_starts_with: String
  origin_starts_with: String
  poscBrothers: Int
  poscBrothers_gt: Int
  poscBrothers_gte: Int
  poscBrothers_in: [Int!]
  poscBrothers_lt: Int
  poscBrothers_lte: Int
  poscBrothers_not: Int
  poscBrothers_not_in: [Int!]
  status: String
  status_contains: String
  status_ends_with: String
  status_gt: String
  status_gte: String
  status_in: [String!]
  status_lt: String
  status_lte: String
  status_not: String
  status_not_contains: String
  status_not_ends_with: String
  status_not_in: [String!]
  status_not_starts_with: String
  status_starts_with: String
  tel: Int
  tel_gt: Int
  tel_gte: Int
  tel_in: [Int!]
  tel_lt: Int
  tel_lte: Int
  tel_not: Int
  tel_not_in: [Int!]
}

input PersonalInfoWhereUniqueInput {
  id: ID
}

type Player {
  altPosition: PlayerPosition
  assessment: Assessment
  assist(after: String, before: String, first: Int, last: Int, orderBy: AssistOrderByInput, skip: Int, where: AssistWhereInput): [Assist!]
  bench(after: String, before: String, first: Int, last: Int, orderBy: MatchOrderByInput, skip: Int, where: MatchWhereInput): [Match!]
  bookings(after: String, before: String, first: Int, last: Int, orderBy: BookingOrderByInput, skip: Int, where: BookingWhereInput): [Booking!]
  captain: Boolean
  foot: Foot
  from: WhereFrom
  goals(after: String, before: String, first: Int, last: Int, orderBy: GoalOrderByInput, skip: Int, where: GoalWhereInput): [Goal!]
  id: ID!
  imgUrl: String
  injured: Boolean
  injury(after: String, before: String, first: Int, last: Int, orderBy: InjuryOrderByInput, skip: Int, where: InjuryWhereInput): [Injury!]
  lineup(after: String, before: String, first: Int, last: Int, orderBy: MatchOrderByInput, skip: Int, where: MatchWhereInput): [Match!]
  nick: String!
  personalInfo: PersonalInfo
  position: PlayerPosition!
  shirtNumber: Int!
  sizes: Size
  team: Team
}

type PlayerConnection {
  aggregate: AggregatePlayer!
  edges: [PlayerEdge!]!
  pageInfo: PageInfo!
}

input PlayerCreateInput {
  altPosition: PlayerPosition
  assessment: AssessmentCreateOneInput
  assist: AssistCreateManyWithoutPlayerInput
  bench: MatchCreateManyWithoutBenchInput
  bookings: BookingCreateManyWithoutPlayerInput
  captain: Boolean
  foot: Foot
  from: WhereFromCreateOneInput
  goals: GoalCreateManyWithoutPlayerInput
  id: ID
  imgUrl: String
  injured: Boolean
  injury: InjuryCreateManyWithoutPlayerInput
  lineup: MatchCreateManyWithoutLineupInput
  nick: String!
  personalInfo: PersonalInfoCreateOneInput
  position: PlayerPosition!
  shirtNumber: Int!
  sizes: SizeCreateOneInput
  team: TeamCreateOneWithoutPlayersInput
}

input PlayerCreateManyWithoutBenchInput {
  connect: [PlayerWhereUniqueInput!]
  create: [PlayerCreateWithoutBenchInput!]
}

input PlayerCreateManyWithoutLineupInput {
  connect: [PlayerWhereUniqueInput!]
  create: [PlayerCreateWithoutLineupInput!]
}

input PlayerCreateManyWithoutTeamInput {
  connect: [PlayerWhereUniqueInput!]
  create: [PlayerCreateWithoutTeamInput!]
}

input PlayerCreateOneInput {
  connect: PlayerWhereUniqueInput
  create: PlayerCreateInput
}

input PlayerCreateOneWithoutAssistInput {
  connect: PlayerWhereUniqueInput
  create: PlayerCreateWithoutAssistInput
}

input PlayerCreateOneWithoutBookingsInput {
  connect: PlayerWhereUniqueInput
  create: PlayerCreateWithoutBookingsInput
}

input PlayerCreateOneWithoutGoalsInput {
  connect: PlayerWhereUniqueInput
  create: PlayerCreateWithoutGoalsInput
}

input PlayerCreateOneWithoutInjuryInput {
  connect: PlayerWhereUniqueInput
  create: PlayerCreateWithoutInjuryInput
}

input PlayerCreateWithoutAssistInput {
  altPosition: PlayerPosition
  assessment: AssessmentCreateOneInput
  bench: MatchCreateManyWithoutBenchInput
  bookings: BookingCreateManyWithoutPlayerInput
  captain: Boolean
  foot: Foot
  from: WhereFromCreateOneInput
  goals: GoalCreateManyWithoutPlayerInput
  id: ID
  imgUrl: String
  injured: Boolean
  injury: InjuryCreateManyWithoutPlayerInput
  lineup: MatchCreateManyWithoutLineupInput
  nick: String!
  personalInfo: PersonalInfoCreateOneInput
  position: PlayerPosition!
  shirtNumber: Int!
  sizes: SizeCreateOneInput
  team: TeamCreateOneWithoutPlayersInput
}

input PlayerCreateWithoutBenchInput {
  altPosition: PlayerPosition
  assessment: AssessmentCreateOneInput
  assist: AssistCreateManyWithoutPlayerInput
  bookings: BookingCreateManyWithoutPlayerInput
  captain: Boolean
  foot: Foot
  from: WhereFromCreateOneInput
  goals: GoalCreateManyWithoutPlayerInput
  id: ID
  imgUrl: String
  injured: Boolean
  injury: InjuryCreateManyWithoutPlayerInput
  lineup: MatchCreateManyWithoutLineupInput
  nick: String!
  personalInfo: PersonalInfoCreateOneInput
  position: PlayerPosition!
  shirtNumber: Int!
  sizes: SizeCreateOneInput
  team: TeamCreateOneWithoutPlayersInput
}

input PlayerCreateWithoutBookingsInput {
  altPosition: PlayerPosition
  assessment: AssessmentCreateOneInput
  assist: AssistCreateManyWithoutPlayerInput
  bench: MatchCreateManyWithoutBenchInput
  captain: Boolean
  foot: Foot
  from: WhereFromCreateOneInput
  goals: GoalCreateManyWithoutPlayerInput
  id: ID
  imgUrl: String
  injured: Boolean
  injury: InjuryCreateManyWithoutPlayerInput
  lineup: MatchCreateManyWithoutLineupInput
  nick: String!
  personalInfo: PersonalInfoCreateOneInput
  position: PlayerPosition!
  shirtNumber: Int!
  sizes: SizeCreateOneInput
  team: TeamCreateOneWithoutPlayersInput
}

input PlayerCreateWithoutGoalsInput {
  altPosition: PlayerPosition
  assessment: AssessmentCreateOneInput
  assist: AssistCreateManyWithoutPlayerInput
  bench: MatchCreateManyWithoutBenchInput
  bookings: BookingCreateManyWithoutPlayerInput
  captain: Boolean
  foot: Foot
  from: WhereFromCreateOneInput
  id: ID
  imgUrl: String
  injured: Boolean
  injury: InjuryCreateManyWithoutPlayerInput
  lineup: MatchCreateManyWithoutLineupInput
  nick: String!
  personalInfo: PersonalInfoCreateOneInput
  position: PlayerPosition!
  shirtNumber: Int!
  sizes: SizeCreateOneInput
  team: TeamCreateOneWithoutPlayersInput
}

input PlayerCreateWithoutInjuryInput {
  altPosition: PlayerPosition
  assessment: AssessmentCreateOneInput
  assist: AssistCreateManyWithoutPlayerInput
  bench: MatchCreateManyWithoutBenchInput
  bookings: BookingCreateManyWithoutPlayerInput
  captain: Boolean
  foot: Foot
  from: WhereFromCreateOneInput
  goals: GoalCreateManyWithoutPlayerInput
  id: ID
  imgUrl: String
  injured: Boolean
  lineup: MatchCreateManyWithoutLineupInput
  nick: String!
  personalInfo: PersonalInfoCreateOneInput
  position: PlayerPosition!
  shirtNumber: Int!
  sizes: SizeCreateOneInput
  team: TeamCreateOneWithoutPlayersInput
}

input PlayerCreateWithoutLineupInput {
  altPosition: PlayerPosition
  assessment: AssessmentCreateOneInput
  assist: AssistCreateManyWithoutPlayerInput
  bench: MatchCreateManyWithoutBenchInput
  bookings: BookingCreateManyWithoutPlayerInput
  captain: Boolean
  foot: Foot
  from: WhereFromCreateOneInput
  goals: GoalCreateManyWithoutPlayerInput
  id: ID
  imgUrl: String
  injured: Boolean
  injury: InjuryCreateManyWithoutPlayerInput
  nick: String!
  personalInfo: PersonalInfoCreateOneInput
  position: PlayerPosition!
  shirtNumber: Int!
  sizes: SizeCreateOneInput
  team: TeamCreateOneWithoutPlayersInput
}

input PlayerCreateWithoutTeamInput {
  altPosition: PlayerPosition
  assessment: AssessmentCreateOneInput
  assist: AssistCreateManyWithoutPlayerInput
  bench: MatchCreateManyWithoutBenchInput
  bookings: BookingCreateManyWithoutPlayerInput
  captain: Boolean
  foot: Foot
  from: WhereFromCreateOneInput
  goals: GoalCreateManyWithoutPlayerInput
  id: ID
  imgUrl: String
  injured: Boolean
  injury: InjuryCreateManyWithoutPlayerInput
  lineup: MatchCreateManyWithoutLineupInput
  nick: String!
  personalInfo: PersonalInfoCreateOneInput
  position: PlayerPosition!
  shirtNumber: Int!
  sizes: SizeCreateOneInput
}

type PlayerEdge {
  cursor: String!
  node: Player!
}

enum PlayerOrderByInput {
  altPosition_ASC
  altPosition_DESC
  captain_ASC
  captain_DESC
  foot_ASC
  foot_DESC
  id_ASC
  id_DESC
  imgUrl_ASC
  imgUrl_DESC
  injured_ASC
  injured_DESC
  nick_ASC
  nick_DESC
  position_ASC
  position_DESC
  shirtNumber_ASC
  shirtNumber_DESC
}

enum PlayerPosition {
  ATTACKING_MIDFIELD
  CENTRE_BACK
  CENTRE_FORWARD
  CENTRE_MIDFIELD
  DEFENSIVE_MIDFIELD
  GOALKEEPER
  LEFT_BACK
  LEFT_MIDFIELD
  LEFT_WINGER
  RIGHT_BACK
  RIGHT_MIDFIELD
  RIGHT_WINGER
  SECOND_STRIKE
}

input PlayerScalarWhereInput {
  altPosition: PlayerPosition
  altPosition_in: [PlayerPosition!]
  altPosition_not: PlayerPosition
  altPosition_not_in: [PlayerPosition!]
  AND: [PlayerScalarWhereInput!]
  captain: Boolean
  captain_not: Boolean
  foot: Foot
  foot_in: [Foot!]
  foot_not: Foot
  foot_not_in: [Foot!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  imgUrl: String
  imgUrl_contains: String
  imgUrl_ends_with: String
  imgUrl_gt: String
  imgUrl_gte: String
  imgUrl_in: [String!]
  imgUrl_lt: String
  imgUrl_lte: String
  imgUrl_not: String
  imgUrl_not_contains: String
  imgUrl_not_ends_with: String
  imgUrl_not_in: [String!]
  imgUrl_not_starts_with: String
  imgUrl_starts_with: String
  injured: Boolean
  injured_not: Boolean
  nick: String
  nick_contains: String
  nick_ends_with: String
  nick_gt: String
  nick_gte: String
  nick_in: [String!]
  nick_lt: String
  nick_lte: String
  nick_not: String
  nick_not_contains: String
  nick_not_ends_with: String
  nick_not_in: [String!]
  nick_not_starts_with: String
  nick_starts_with: String
  NOT: [PlayerScalarWhereInput!]
  OR: [PlayerScalarWhereInput!]
  position: PlayerPosition
  position_in: [PlayerPosition!]
  position_not: PlayerPosition
  position_not_in: [PlayerPosition!]
  shirtNumber: Int
  shirtNumber_gt: Int
  shirtNumber_gte: Int
  shirtNumber_in: [Int!]
  shirtNumber_lt: Int
  shirtNumber_lte: Int
  shirtNumber_not: Int
  shirtNumber_not_in: [Int!]
}

input PlayerUpdateDataInput {
  altPosition: PlayerPosition
  assessment: AssessmentUpdateOneInput
  assist: AssistUpdateManyWithoutPlayerInput
  bench: MatchUpdateManyWithoutBenchInput
  bookings: BookingUpdateManyWithoutPlayerInput
  captain: Boolean
  foot: Foot
  from: WhereFromUpdateOneInput
  goals: GoalUpdateManyWithoutPlayerInput
  imgUrl: String
  injured: Boolean
  injury: InjuryUpdateManyWithoutPlayerInput
  lineup: MatchUpdateManyWithoutLineupInput
  nick: String
  personalInfo: PersonalInfoUpdateOneInput
  position: PlayerPosition
  shirtNumber: Int
  sizes: SizeUpdateOneInput
  team: TeamUpdateOneWithoutPlayersInput
}

input PlayerUpdateInput {
  altPosition: PlayerPosition
  assessment: AssessmentUpdateOneInput
  assist: AssistUpdateManyWithoutPlayerInput
  bench: MatchUpdateManyWithoutBenchInput
  bookings: BookingUpdateManyWithoutPlayerInput
  captain: Boolean
  foot: Foot
  from: WhereFromUpdateOneInput
  goals: GoalUpdateManyWithoutPlayerInput
  imgUrl: String
  injured: Boolean
  injury: InjuryUpdateManyWithoutPlayerInput
  lineup: MatchUpdateManyWithoutLineupInput
  nick: String
  personalInfo: PersonalInfoUpdateOneInput
  position: PlayerPosition
  shirtNumber: Int
  sizes: SizeUpdateOneInput
  team: TeamUpdateOneWithoutPlayersInput
}

input PlayerUpdateManyDataInput {
  altPosition: PlayerPosition
  captain: Boolean
  foot: Foot
  imgUrl: String
  injured: Boolean
  nick: String
  position: PlayerPosition
  shirtNumber: Int
}

input PlayerUpdateManyMutationInput {
  altPosition: PlayerPosition
  captain: Boolean
  foot: Foot
  imgUrl: String
  injured: Boolean
  nick: String
  position: PlayerPosition
  shirtNumber: Int
}

input PlayerUpdateManyWithoutBenchInput {
  connect: [PlayerWhereUniqueInput!]
  create: [PlayerCreateWithoutBenchInput!]
  delete: [PlayerWhereUniqueInput!]
  deleteMany: [PlayerScalarWhereInput!]
  disconnect: [PlayerWhereUniqueInput!]
  set: [PlayerWhereUniqueInput!]
  update: [PlayerUpdateWithWhereUniqueWithoutBenchInput!]
  updateMany: [PlayerUpdateManyWithWhereNestedInput!]
  upsert: [PlayerUpsertWithWhereUniqueWithoutBenchInput!]
}

input PlayerUpdateManyWithoutLineupInput {
  connect: [PlayerWhereUniqueInput!]
  create: [PlayerCreateWithoutLineupInput!]
  delete: [PlayerWhereUniqueInput!]
  deleteMany: [PlayerScalarWhereInput!]
  disconnect: [PlayerWhereUniqueInput!]
  set: [PlayerWhereUniqueInput!]
  update: [PlayerUpdateWithWhereUniqueWithoutLineupInput!]
  updateMany: [PlayerUpdateManyWithWhereNestedInput!]
  upsert: [PlayerUpsertWithWhereUniqueWithoutLineupInput!]
}

input PlayerUpdateManyWithoutTeamInput {
  connect: [PlayerWhereUniqueInput!]
  create: [PlayerCreateWithoutTeamInput!]
  delete: [PlayerWhereUniqueInput!]
  deleteMany: [PlayerScalarWhereInput!]
  disconnect: [PlayerWhereUniqueInput!]
  set: [PlayerWhereUniqueInput!]
  update: [PlayerUpdateWithWhereUniqueWithoutTeamInput!]
  updateMany: [PlayerUpdateManyWithWhereNestedInput!]
  upsert: [PlayerUpsertWithWhereUniqueWithoutTeamInput!]
}

input PlayerUpdateManyWithWhereNestedInput {
  data: PlayerUpdateManyDataInput!
  where: PlayerScalarWhereInput!
}

input PlayerUpdateOneRequiredInput {
  connect: PlayerWhereUniqueInput
  create: PlayerCreateInput
  update: PlayerUpdateDataInput
  upsert: PlayerUpsertNestedInput
}

input PlayerUpdateOneRequiredWithoutAssistInput {
  connect: PlayerWhereUniqueInput
  create: PlayerCreateWithoutAssistInput
  update: PlayerUpdateWithoutAssistDataInput
  upsert: PlayerUpsertWithoutAssistInput
}

input PlayerUpdateOneRequiredWithoutBookingsInput {
  connect: PlayerWhereUniqueInput
  create: PlayerCreateWithoutBookingsInput
  update: PlayerUpdateWithoutBookingsDataInput
  upsert: PlayerUpsertWithoutBookingsInput
}

input PlayerUpdateOneRequiredWithoutGoalsInput {
  connect: PlayerWhereUniqueInput
  create: PlayerCreateWithoutGoalsInput
  update: PlayerUpdateWithoutGoalsDataInput
  upsert: PlayerUpsertWithoutGoalsInput
}

input PlayerUpdateOneWithoutInjuryInput {
  connect: PlayerWhereUniqueInput
  create: PlayerCreateWithoutInjuryInput
  delete: Boolean
  disconnect: Boolean
  update: PlayerUpdateWithoutInjuryDataInput
  upsert: PlayerUpsertWithoutInjuryInput
}

input PlayerUpdateWithoutAssistDataInput {
  altPosition: PlayerPosition
  assessment: AssessmentUpdateOneInput
  bench: MatchUpdateManyWithoutBenchInput
  bookings: BookingUpdateManyWithoutPlayerInput
  captain: Boolean
  foot: Foot
  from: WhereFromUpdateOneInput
  goals: GoalUpdateManyWithoutPlayerInput
  imgUrl: String
  injured: Boolean
  injury: InjuryUpdateManyWithoutPlayerInput
  lineup: MatchUpdateManyWithoutLineupInput
  nick: String
  personalInfo: PersonalInfoUpdateOneInput
  position: PlayerPosition
  shirtNumber: Int
  sizes: SizeUpdateOneInput
  team: TeamUpdateOneWithoutPlayersInput
}

input PlayerUpdateWithoutBenchDataInput {
  altPosition: PlayerPosition
  assessment: AssessmentUpdateOneInput
  assist: AssistUpdateManyWithoutPlayerInput
  bookings: BookingUpdateManyWithoutPlayerInput
  captain: Boolean
  foot: Foot
  from: WhereFromUpdateOneInput
  goals: GoalUpdateManyWithoutPlayerInput
  imgUrl: String
  injured: Boolean
  injury: InjuryUpdateManyWithoutPlayerInput
  lineup: MatchUpdateManyWithoutLineupInput
  nick: String
  personalInfo: PersonalInfoUpdateOneInput
  position: PlayerPosition
  shirtNumber: Int
  sizes: SizeUpdateOneInput
  team: TeamUpdateOneWithoutPlayersInput
}

input PlayerUpdateWithoutBookingsDataInput {
  altPosition: PlayerPosition
  assessment: AssessmentUpdateOneInput
  assist: AssistUpdateManyWithoutPlayerInput
  bench: MatchUpdateManyWithoutBenchInput
  captain: Boolean
  foot: Foot
  from: WhereFromUpdateOneInput
  goals: GoalUpdateManyWithoutPlayerInput
  imgUrl: String
  injured: Boolean
  injury: InjuryUpdateManyWithoutPlayerInput
  lineup: MatchUpdateManyWithoutLineupInput
  nick: String
  personalInfo: PersonalInfoUpdateOneInput
  position: PlayerPosition
  shirtNumber: Int
  sizes: SizeUpdateOneInput
  team: TeamUpdateOneWithoutPlayersInput
}

input PlayerUpdateWithoutGoalsDataInput {
  altPosition: PlayerPosition
  assessment: AssessmentUpdateOneInput
  assist: AssistUpdateManyWithoutPlayerInput
  bench: MatchUpdateManyWithoutBenchInput
  bookings: BookingUpdateManyWithoutPlayerInput
  captain: Boolean
  foot: Foot
  from: WhereFromUpdateOneInput
  imgUrl: String
  injured: Boolean
  injury: InjuryUpdateManyWithoutPlayerInput
  lineup: MatchUpdateManyWithoutLineupInput
  nick: String
  personalInfo: PersonalInfoUpdateOneInput
  position: PlayerPosition
  shirtNumber: Int
  sizes: SizeUpdateOneInput
  team: TeamUpdateOneWithoutPlayersInput
}

input PlayerUpdateWithoutInjuryDataInput {
  altPosition: PlayerPosition
  assessment: AssessmentUpdateOneInput
  assist: AssistUpdateManyWithoutPlayerInput
  bench: MatchUpdateManyWithoutBenchInput
  bookings: BookingUpdateManyWithoutPlayerInput
  captain: Boolean
  foot: Foot
  from: WhereFromUpdateOneInput
  goals: GoalUpdateManyWithoutPlayerInput
  imgUrl: String
  injured: Boolean
  lineup: MatchUpdateManyWithoutLineupInput
  nick: String
  personalInfo: PersonalInfoUpdateOneInput
  position: PlayerPosition
  shirtNumber: Int
  sizes: SizeUpdateOneInput
  team: TeamUpdateOneWithoutPlayersInput
}

input PlayerUpdateWithoutLineupDataInput {
  altPosition: PlayerPosition
  assessment: AssessmentUpdateOneInput
  assist: AssistUpdateManyWithoutPlayerInput
  bench: MatchUpdateManyWithoutBenchInput
  bookings: BookingUpdateManyWithoutPlayerInput
  captain: Boolean
  foot: Foot
  from: WhereFromUpdateOneInput
  goals: GoalUpdateManyWithoutPlayerInput
  imgUrl: String
  injured: Boolean
  injury: InjuryUpdateManyWithoutPlayerInput
  nick: String
  personalInfo: PersonalInfoUpdateOneInput
  position: PlayerPosition
  shirtNumber: Int
  sizes: SizeUpdateOneInput
  team: TeamUpdateOneWithoutPlayersInput
}

input PlayerUpdateWithoutTeamDataInput {
  altPosition: PlayerPosition
  assessment: AssessmentUpdateOneInput
  assist: AssistUpdateManyWithoutPlayerInput
  bench: MatchUpdateManyWithoutBenchInput
  bookings: BookingUpdateManyWithoutPlayerInput
  captain: Boolean
  foot: Foot
  from: WhereFromUpdateOneInput
  goals: GoalUpdateManyWithoutPlayerInput
  imgUrl: String
  injured: Boolean
  injury: InjuryUpdateManyWithoutPlayerInput
  lineup: MatchUpdateManyWithoutLineupInput
  nick: String
  personalInfo: PersonalInfoUpdateOneInput
  position: PlayerPosition
  shirtNumber: Int
  sizes: SizeUpdateOneInput
}

input PlayerUpdateWithWhereUniqueWithoutBenchInput {
  data: PlayerUpdateWithoutBenchDataInput!
  where: PlayerWhereUniqueInput!
}

input PlayerUpdateWithWhereUniqueWithoutLineupInput {
  data: PlayerUpdateWithoutLineupDataInput!
  where: PlayerWhereUniqueInput!
}

input PlayerUpdateWithWhereUniqueWithoutTeamInput {
  data: PlayerUpdateWithoutTeamDataInput!
  where: PlayerWhereUniqueInput!
}

input PlayerUpsertNestedInput {
  create: PlayerCreateInput!
  update: PlayerUpdateDataInput!
}

input PlayerUpsertWithoutAssistInput {
  create: PlayerCreateWithoutAssistInput!
  update: PlayerUpdateWithoutAssistDataInput!
}

input PlayerUpsertWithoutBookingsInput {
  create: PlayerCreateWithoutBookingsInput!
  update: PlayerUpdateWithoutBookingsDataInput!
}

input PlayerUpsertWithoutGoalsInput {
  create: PlayerCreateWithoutGoalsInput!
  update: PlayerUpdateWithoutGoalsDataInput!
}

input PlayerUpsertWithoutInjuryInput {
  create: PlayerCreateWithoutInjuryInput!
  update: PlayerUpdateWithoutInjuryDataInput!
}

input PlayerUpsertWithWhereUniqueWithoutBenchInput {
  create: PlayerCreateWithoutBenchInput!
  update: PlayerUpdateWithoutBenchDataInput!
  where: PlayerWhereUniqueInput!
}

input PlayerUpsertWithWhereUniqueWithoutLineupInput {
  create: PlayerCreateWithoutLineupInput!
  update: PlayerUpdateWithoutLineupDataInput!
  where: PlayerWhereUniqueInput!
}

input PlayerUpsertWithWhereUniqueWithoutTeamInput {
  create: PlayerCreateWithoutTeamInput!
  update: PlayerUpdateWithoutTeamDataInput!
  where: PlayerWhereUniqueInput!
}

input PlayerWhereInput {
  altPosition: PlayerPosition
  altPosition_in: [PlayerPosition!]
  altPosition_not: PlayerPosition
  altPosition_not_in: [PlayerPosition!]
  AND: [PlayerWhereInput!]
  assessment: AssessmentWhereInput
  assist_some: AssistWhereInput
  bench_some: MatchWhereInput
  bookings_some: BookingWhereInput
  captain: Boolean
  captain_not: Boolean
  foot: Foot
  foot_in: [Foot!]
  foot_not: Foot
  foot_not_in: [Foot!]
  from: WhereFromWhereInput
  goals_some: GoalWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  imgUrl: String
  imgUrl_contains: String
  imgUrl_ends_with: String
  imgUrl_gt: String
  imgUrl_gte: String
  imgUrl_in: [String!]
  imgUrl_lt: String
  imgUrl_lte: String
  imgUrl_not: String
  imgUrl_not_contains: String
  imgUrl_not_ends_with: String
  imgUrl_not_in: [String!]
  imgUrl_not_starts_with: String
  imgUrl_starts_with: String
  injured: Boolean
  injured_not: Boolean
  injury_some: InjuryWhereInput
  lineup_some: MatchWhereInput
  nick: String
  nick_contains: String
  nick_ends_with: String
  nick_gt: String
  nick_gte: String
  nick_in: [String!]
  nick_lt: String
  nick_lte: String
  nick_not: String
  nick_not_contains: String
  nick_not_ends_with: String
  nick_not_in: [String!]
  nick_not_starts_with: String
  nick_starts_with: String
  personalInfo: PersonalInfoWhereInput
  position: PlayerPosition
  position_in: [PlayerPosition!]
  position_not: PlayerPosition
  position_not_in: [PlayerPosition!]
  shirtNumber: Int
  shirtNumber_gt: Int
  shirtNumber_gte: Int
  shirtNumber_in: [Int!]
  shirtNumber_lt: Int
  shirtNumber_lte: Int
  shirtNumber_not: Int
  shirtNumber_not_in: [Int!]
  sizes: SizeWhereInput
  team: TeamWhereInput
}

input PlayerWhereUniqueInput {
  id: ID
}

type Query {
  assist(where: AssistWhereUniqueInput!): Assist
  assists(after: String, before: String, first: Int, last: Int, orderBy: AssistOrderByInput, skip: Int, where: AssistWhereInput): [Assist!]!
  assistsConnection(after: String, before: String, first: Int, last: Int, orderBy: AssistOrderByInput, skip: Int, where: AssistWhereInput): AssistConnection!
  booking(where: BookingWhereUniqueInput!): Booking
  bookings(after: String, before: String, first: Int, last: Int, orderBy: BookingOrderByInput, skip: Int, where: BookingWhereInput): [Booking!]!
  bookingsConnection(after: String, before: String, first: Int, last: Int, orderBy: BookingOrderByInput, skip: Int, where: BookingWhereInput): BookingConnection!
  goal(where: GoalWhereUniqueInput!): Goal
  goals(after: String, before: String, first: Int, last: Int, orderBy: GoalOrderByInput, skip: Int, where: GoalWhereInput): [Goal!]!
  goalsConnection(after: String, before: String, first: Int, last: Int, orderBy: GoalOrderByInput, skip: Int, where: GoalWhereInput): GoalConnection!
  injuries(after: String, before: String, first: Int, last: Int, orderBy: InjuryOrderByInput, skip: Int, where: InjuryWhereInput): [Injury!]!
  injuriesConnection(after: String, before: String, first: Int, last: Int, orderBy: InjuryOrderByInput, skip: Int, where: InjuryWhereInput): InjuryConnection!
  injury(where: InjuryWhereUniqueInput!): Injury
  match(where: MatchWhereUniqueInput!): Match
  matches(after: String, before: String, first: Int, last: Int, orderBy: MatchOrderByInput, skip: Int, where: MatchWhereInput): [Match!]!
  matchesConnection(after: String, before: String, first: Int, last: Int, orderBy: MatchOrderByInput, skip: Int, where: MatchWhereInput): MatchConnection!
  player(where: PlayerWhereUniqueInput!): Player
  players(after: String, before: String, first: Int, last: Int, orderBy: PlayerOrderByInput, skip: Int, where: PlayerWhereInput): [Player!]!
  playersConnection(after: String, before: String, first: Int, last: Int, orderBy: PlayerOrderByInput, skip: Int, where: PlayerWhereInput): PlayerConnection!
  staff(where: StaffWhereUniqueInput!): Staff
  staffs(after: String, before: String, first: Int, last: Int, orderBy: StaffOrderByInput, skip: Int, where: StaffWhereInput): [Staff!]!
  staffsConnection(after: String, before: String, first: Int, last: Int, orderBy: StaffOrderByInput, skip: Int, where: StaffWhereInput): StaffConnection!
  team(where: TeamWhereUniqueInput!): Team
  teams(after: String, before: String, first: Int, last: Int, orderBy: TeamOrderByInput, skip: Int, where: TeamWhereInput): [Team!]!
  teamsConnection(after: String, before: String, first: Int, last: Int, orderBy: TeamOrderByInput, skip: Int, where: TeamWhereInput): TeamConnection!
}

type Score {
  extraTime: HomeAndAway
  fullTime: HomeAndAway!
  halfTime: HomeAndAway
  id: ID!
  penalties: HomeAndAway
}

input ScoreCreateInput {
  extraTime: HomeAndAwayCreateOneInput
  fullTime: HomeAndAwayCreateOneInput!
  halfTime: HomeAndAwayCreateOneInput
  id: ID
  penalties: HomeAndAwayCreateOneInput
}

input ScoreCreateOneInput {
  create: ScoreCreateInput
}

input ScoreUpdateDataInput {
  extraTime: HomeAndAwayUpdateOneInput
  fullTime: HomeAndAwayUpdateOneRequiredInput
  halfTime: HomeAndAwayUpdateOneInput
  penalties: HomeAndAwayUpdateOneInput
}

input ScoreUpdateOneRequiredInput {
  connect: ScoreWhereUniqueInput
  create: ScoreCreateInput
  update: ScoreUpdateDataInput
  upsert: ScoreUpsertNestedInput
}

input ScoreUpsertNestedInput {
  create: ScoreCreateInput!
  update: ScoreUpdateDataInput!
}

input ScoreWhereInput {
  AND: [ScoreWhereInput!]
  extraTime: HomeAndAwayWhereInput
  fullTime: HomeAndAwayWhereInput
  halfTime: HomeAndAwayWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  penalties: HomeAndAwayWhereInput
}

input ScoreWhereUniqueInput {
  id: ID
}

type Size {
  clothing: String
  id: ID!
  step: Int
}

input SizeCreateInput {
  clothing: String
  id: ID
  step: Int
}

input SizeCreateOneInput {
  create: SizeCreateInput
}

input SizeUpdateDataInput {
  clothing: String
  step: Int
}

input SizeUpdateOneInput {
  connect: SizeWhereUniqueInput
  create: SizeCreateInput
  delete: Boolean
  disconnect: Boolean
  update: SizeUpdateDataInput
  upsert: SizeUpsertNestedInput
}

input SizeUpsertNestedInput {
  create: SizeCreateInput!
  update: SizeUpdateDataInput!
}

input SizeWhereInput {
  AND: [SizeWhereInput!]
  clothing: String
  clothing_contains: String
  clothing_ends_with: String
  clothing_gt: String
  clothing_gte: String
  clothing_in: [String!]
  clothing_lt: String
  clothing_lte: String
  clothing_not: String
  clothing_not_contains: String
  clothing_not_ends_with: String
  clothing_not_in: [String!]
  clothing_not_starts_with: String
  clothing_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  step: Int
  step_gt: Int
  step_gte: Int
  step_in: [Int!]
  step_lt: Int
  step_lte: Int
  step_not: Int
  step_not_in: [Int!]
}

input SizeWhereUniqueInput {
  id: ID
}

type Staff {
  from: StaffFrom
  id: ID!
  imgUrl: String
  matches(after: String, before: String, first: Int, last: Int, orderBy: MatchOrderByInput, skip: Int, where: MatchWhereInput): [Match!]
  nick: String!
  personalInfo: StaffInfo
  role: String
  sizes: StaffSize
  team: Team
}

type StaffConnection {
  aggregate: AggregateStaff!
  edges: [StaffEdge!]!
  pageInfo: PageInfo!
}

input StaffCreateInput {
  from: StaffFromCreateOneInput
  id: ID
  imgUrl: String
  matches: MatchCreateManyWithoutStaffInput
  nick: String!
  personalInfo: StaffInfoCreateOneInput
  role: String
  sizes: StaffSizeCreateOneInput
  team: TeamCreateOneWithoutStaffInput
}

input StaffCreateManyWithoutMatchesInput {
  connect: [StaffWhereUniqueInput!]
  create: [StaffCreateWithoutMatchesInput!]
}

input StaffCreateManyWithoutTeamInput {
  connect: [StaffWhereUniqueInput!]
  create: [StaffCreateWithoutTeamInput!]
}

input StaffCreateWithoutMatchesInput {
  from: StaffFromCreateOneInput
  id: ID
  imgUrl: String
  nick: String!
  personalInfo: StaffInfoCreateOneInput
  role: String
  sizes: StaffSizeCreateOneInput
  team: TeamCreateOneWithoutStaffInput
}

input StaffCreateWithoutTeamInput {
  from: StaffFromCreateOneInput
  id: ID
  imgUrl: String
  matches: MatchCreateManyWithoutStaffInput
  nick: String!
  personalInfo: StaffInfoCreateOneInput
  role: String
  sizes: StaffSizeCreateOneInput
}

type StaffEdge {
  cursor: String!
  node: Staff!
}

type StaffFrom {
  address: String
  countruy: String
  number: Int
  PC: Int
  province: String
  town: String
}

input StaffFromCreateInput {
  address: String
  countruy: String
  number: Int
  PC: Int
  province: String
  town: String
}

input StaffFromCreateOneInput {
  create: StaffFromCreateInput
}

input StaffFromUpdateDataInput {
  address: String
  countruy: String
  number: Int
  PC: Int
  province: String
  town: String
}

input StaffFromUpdateOneInput {
  create: StaffFromCreateInput
  delete: Boolean
  disconnect: Boolean
  update: StaffFromUpdateDataInput
  upsert: StaffFromUpsertNestedInput
}

input StaffFromUpsertNestedInput {
  create: StaffFromCreateInput!
  update: StaffFromUpdateDataInput!
}

input StaffFromWhereInput {
  address: String
  address_contains: String
  address_ends_with: String
  address_gt: String
  address_gte: String
  address_in: [String!]
  address_lt: String
  address_lte: String
  address_not: String
  address_not_contains: String
  address_not_ends_with: String
  address_not_in: [String!]
  address_not_starts_with: String
  address_starts_with: String
  AND: [StaffFromWhereInput!]
  countruy: String
  countruy_contains: String
  countruy_ends_with: String
  countruy_gt: String
  countruy_gte: String
  countruy_in: [String!]
  countruy_lt: String
  countruy_lte: String
  countruy_not: String
  countruy_not_contains: String
  countruy_not_ends_with: String
  countruy_not_in: [String!]
  countruy_not_starts_with: String
  countruy_starts_with: String
  number: Int
  number_gt: Int
  number_gte: Int
  number_in: [Int!]
  number_lt: Int
  number_lte: Int
  number_not: Int
  number_not_in: [Int!]
  PC: Int
  PC_gt: Int
  PC_gte: Int
  PC_in: [Int!]
  PC_lt: Int
  PC_lte: Int
  PC_not: Int
  PC_not_in: [Int!]
  province: String
  province_contains: String
  province_ends_with: String
  province_gt: String
  province_gte: String
  province_in: [String!]
  province_lt: String
  province_lte: String
  province_not: String
  province_not_contains: String
  province_not_ends_with: String
  province_not_in: [String!]
  province_not_starts_with: String
  province_starts_with: String
  town: String
  town_contains: String
  town_ends_with: String
  town_gt: String
  town_gte: String
  town_in: [String!]
  town_lt: String
  town_lte: String
  town_not: String
  town_not_contains: String
  town_not_ends_with: String
  town_not_in: [String!]
  town_not_starts_with: String
  town_starts_with: String
}

type StaffInfo {
  dateOfBirth: DateTime
  dni: String!
  email: String
  firstName: String!
  lastName: String
  name: String!
  tel: Int
}

input StaffInfoCreateInput {
  dateOfBirth: DateTime
  dni: String!
  email: String
  firstName: String!
  lastName: String
  name: String!
  tel: Int
}

input StaffInfoCreateOneInput {
  create: StaffInfoCreateInput
}

input StaffInfoUpdateDataInput {
  dateOfBirth: DateTime
  dni: String
  email: String
  firstName: String
  lastName: String
  name: String
  tel: Int
}

input StaffInfoUpdateOneInput {
  create: StaffInfoCreateInput
  delete: Boolean
  disconnect: Boolean
  update: StaffInfoUpdateDataInput
  upsert: StaffInfoUpsertNestedInput
}

input StaffInfoUpsertNestedInput {
  create: StaffInfoCreateInput!
  update: StaffInfoUpdateDataInput!
}

input StaffInfoWhereInput {
  AND: [StaffInfoWhereInput!]
  dateOfBirth: DateTime
  dateOfBirth_gt: DateTime
  dateOfBirth_gte: DateTime
  dateOfBirth_in: [DateTime!]
  dateOfBirth_lt: DateTime
  dateOfBirth_lte: DateTime
  dateOfBirth_not: DateTime
  dateOfBirth_not_in: [DateTime!]
  dni: String
  dni_contains: String
  dni_ends_with: String
  dni_gt: String
  dni_gte: String
  dni_in: [String!]
  dni_lt: String
  dni_lte: String
  dni_not: String
  dni_not_contains: String
  dni_not_ends_with: String
  dni_not_in: [String!]
  dni_not_starts_with: String
  dni_starts_with: String
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  firstName: String
  firstName_contains: String
  firstName_ends_with: String
  firstName_gt: String
  firstName_gte: String
  firstName_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_not: String
  firstName_not_contains: String
  firstName_not_ends_with: String
  firstName_not_in: [String!]
  firstName_not_starts_with: String
  firstName_starts_with: String
  lastName: String
  lastName_contains: String
  lastName_ends_with: String
  lastName_gt: String
  lastName_gte: String
  lastName_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_not: String
  lastName_not_contains: String
  lastName_not_ends_with: String
  lastName_not_in: [String!]
  lastName_not_starts_with: String
  lastName_starts_with: String
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  tel: Int
  tel_gt: Int
  tel_gte: Int
  tel_in: [Int!]
  tel_lt: Int
  tel_lte: Int
  tel_not: Int
  tel_not_in: [Int!]
}

enum StaffOrderByInput {
  id_ASC
  id_DESC
  imgUrl_ASC
  imgUrl_DESC
  nick_ASC
  nick_DESC
  role_ASC
  role_DESC
}

input StaffScalarWhereInput {
  AND: [StaffScalarWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  imgUrl: String
  imgUrl_contains: String
  imgUrl_ends_with: String
  imgUrl_gt: String
  imgUrl_gte: String
  imgUrl_in: [String!]
  imgUrl_lt: String
  imgUrl_lte: String
  imgUrl_not: String
  imgUrl_not_contains: String
  imgUrl_not_ends_with: String
  imgUrl_not_in: [String!]
  imgUrl_not_starts_with: String
  imgUrl_starts_with: String
  nick: String
  nick_contains: String
  nick_ends_with: String
  nick_gt: String
  nick_gte: String
  nick_in: [String!]
  nick_lt: String
  nick_lte: String
  nick_not: String
  nick_not_contains: String
  nick_not_ends_with: String
  nick_not_in: [String!]
  nick_not_starts_with: String
  nick_starts_with: String
  NOT: [StaffScalarWhereInput!]
  OR: [StaffScalarWhereInput!]
  role: String
  role_contains: String
  role_ends_with: String
  role_gt: String
  role_gte: String
  role_in: [String!]
  role_lt: String
  role_lte: String
  role_not: String
  role_not_contains: String
  role_not_ends_with: String
  role_not_in: [String!]
  role_not_starts_with: String
  role_starts_with: String
}

type StaffSize {
  clothing: String
  step: Int
}

input StaffSizeCreateInput {
  clothing: String
  step: Int
}

input StaffSizeCreateOneInput {
  create: StaffSizeCreateInput
}

input StaffSizeUpdateDataInput {
  clothing: String
  step: Int
}

input StaffSizeUpdateOneInput {
  create: StaffSizeCreateInput
  delete: Boolean
  disconnect: Boolean
  update: StaffSizeUpdateDataInput
  upsert: StaffSizeUpsertNestedInput
}

input StaffSizeUpsertNestedInput {
  create: StaffSizeCreateInput!
  update: StaffSizeUpdateDataInput!
}

input StaffSizeWhereInput {
  AND: [StaffSizeWhereInput!]
  clothing: String
  clothing_contains: String
  clothing_ends_with: String
  clothing_gt: String
  clothing_gte: String
  clothing_in: [String!]
  clothing_lt: String
  clothing_lte: String
  clothing_not: String
  clothing_not_contains: String
  clothing_not_ends_with: String
  clothing_not_in: [String!]
  clothing_not_starts_with: String
  clothing_starts_with: String
  step: Int
  step_gt: Int
  step_gte: Int
  step_in: [Int!]
  step_lt: Int
  step_lte: Int
  step_not: Int
  step_not_in: [Int!]
}

input StaffUpdateInput {
  from: StaffFromUpdateOneInput
  imgUrl: String
  matches: MatchUpdateManyWithoutStaffInput
  nick: String
  personalInfo: StaffInfoUpdateOneInput
  role: String
  sizes: StaffSizeUpdateOneInput
  team: TeamUpdateOneWithoutStaffInput
}

input StaffUpdateManyDataInput {
  imgUrl: String
  nick: String
  role: String
}

input StaffUpdateManyMutationInput {
  imgUrl: String
  nick: String
  role: String
}

input StaffUpdateManyWithoutMatchesInput {
  connect: [StaffWhereUniqueInput!]
  create: [StaffCreateWithoutMatchesInput!]
  delete: [StaffWhereUniqueInput!]
  deleteMany: [StaffScalarWhereInput!]
  disconnect: [StaffWhereUniqueInput!]
  set: [StaffWhereUniqueInput!]
  update: [StaffUpdateWithWhereUniqueWithoutMatchesInput!]
  updateMany: [StaffUpdateManyWithWhereNestedInput!]
  upsert: [StaffUpsertWithWhereUniqueWithoutMatchesInput!]
}

input StaffUpdateManyWithoutTeamInput {
  connect: [StaffWhereUniqueInput!]
  create: [StaffCreateWithoutTeamInput!]
  delete: [StaffWhereUniqueInput!]
  deleteMany: [StaffScalarWhereInput!]
  disconnect: [StaffWhereUniqueInput!]
  set: [StaffWhereUniqueInput!]
  update: [StaffUpdateWithWhereUniqueWithoutTeamInput!]
  updateMany: [StaffUpdateManyWithWhereNestedInput!]
  upsert: [StaffUpsertWithWhereUniqueWithoutTeamInput!]
}

input StaffUpdateManyWithWhereNestedInput {
  data: StaffUpdateManyDataInput!
  where: StaffScalarWhereInput!
}

input StaffUpdateWithoutMatchesDataInput {
  from: StaffFromUpdateOneInput
  imgUrl: String
  nick: String
  personalInfo: StaffInfoUpdateOneInput
  role: String
  sizes: StaffSizeUpdateOneInput
  team: TeamUpdateOneWithoutStaffInput
}

input StaffUpdateWithoutTeamDataInput {
  from: StaffFromUpdateOneInput
  imgUrl: String
  matches: MatchUpdateManyWithoutStaffInput
  nick: String
  personalInfo: StaffInfoUpdateOneInput
  role: String
  sizes: StaffSizeUpdateOneInput
}

input StaffUpdateWithWhereUniqueWithoutMatchesInput {
  data: StaffUpdateWithoutMatchesDataInput!
  where: StaffWhereUniqueInput!
}

input StaffUpdateWithWhereUniqueWithoutTeamInput {
  data: StaffUpdateWithoutTeamDataInput!
  where: StaffWhereUniqueInput!
}

input StaffUpsertWithWhereUniqueWithoutMatchesInput {
  create: StaffCreateWithoutMatchesInput!
  update: StaffUpdateWithoutMatchesDataInput!
  where: StaffWhereUniqueInput!
}

input StaffUpsertWithWhereUniqueWithoutTeamInput {
  create: StaffCreateWithoutTeamInput!
  update: StaffUpdateWithoutTeamDataInput!
  where: StaffWhereUniqueInput!
}

input StaffWhereInput {
  AND: [StaffWhereInput!]
  from: StaffFromWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  imgUrl: String
  imgUrl_contains: String
  imgUrl_ends_with: String
  imgUrl_gt: String
  imgUrl_gte: String
  imgUrl_in: [String!]
  imgUrl_lt: String
  imgUrl_lte: String
  imgUrl_not: String
  imgUrl_not_contains: String
  imgUrl_not_ends_with: String
  imgUrl_not_in: [String!]
  imgUrl_not_starts_with: String
  imgUrl_starts_with: String
  matches_some: MatchWhereInput
  nick: String
  nick_contains: String
  nick_ends_with: String
  nick_gt: String
  nick_gte: String
  nick_in: [String!]
  nick_lt: String
  nick_lte: String
  nick_not: String
  nick_not_contains: String
  nick_not_ends_with: String
  nick_not_in: [String!]
  nick_not_starts_with: String
  nick_starts_with: String
  personalInfo: StaffInfoWhereInput
  role: String
  role_contains: String
  role_ends_with: String
  role_gt: String
  role_gte: String
  role_in: [String!]
  role_lt: String
  role_lte: String
  role_not: String
  role_not_contains: String
  role_not_ends_with: String
  role_not_in: [String!]
  role_not_starts_with: String
  role_starts_with: String
  sizes: StaffSizeWhereInput
  team: TeamWhereInput
}

input StaffWhereUniqueInput {
  id: ID
}

type Substitutions {
  id: ID!
  min: Float
  playerIn: Player!
  playerOut: Player!
}

input SubstitutionsCreateInput {
  id: ID
  min: Float
  playerIn: PlayerCreateOneInput!
  playerOut: PlayerCreateOneInput!
}

input SubstitutionsCreateManyInput {
  create: [SubstitutionsCreateInput!]
}

input SubstitutionsRestrictedWhereInput {
  AND: [SubstitutionsRestrictedWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  min: Float
  min_gt: Float
  min_gte: Float
  min_in: [Float!]
  min_lt: Float
  min_lte: Float
  min_not: Float
  min_not_in: [Float!]
}

input SubstitutionsScalarWhereInput {
  AND: [SubstitutionsScalarWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  min: Float
  min_gt: Float
  min_gte: Float
  min_in: [Float!]
  min_lt: Float
  min_lte: Float
  min_not: Float
  min_not_in: [Float!]
  NOT: [SubstitutionsScalarWhereInput!]
  OR: [SubstitutionsScalarWhereInput!]
}

input SubstitutionsUpdateDataInput {
  min: Float
  playerIn: PlayerUpdateOneRequiredInput
  playerOut: PlayerUpdateOneRequiredInput
}

input SubstitutionsUpdateManyDataInput {
  min: Float
}

input SubstitutionsUpdateManyInput {
  create: [SubstitutionsCreateInput!]
  delete: [SubstitutionsWhereUniqueInput!]
  deleteMany: [SubstitutionsScalarWhereInput!]
  update: [SubstitutionsUpdateWithWhereUniqueNestedInput!]
  updateMany: [SubstitutionsUpdateManyWithWhereNestedInput!]
  upsert: [SubstitutionsUpsertWithWhereUniqueNestedInput!]
}

input SubstitutionsUpdateManyWithWhereNestedInput {
  data: SubstitutionsUpdateManyDataInput!
  where: SubstitutionsScalarWhereInput!
}

input SubstitutionsUpdateWithWhereUniqueNestedInput {
  data: SubstitutionsUpdateDataInput!
  where: SubstitutionsWhereUniqueInput!
}

input SubstitutionsUpsertWithWhereUniqueNestedInput {
  create: SubstitutionsCreateInput!
  update: SubstitutionsUpdateDataInput!
  where: SubstitutionsWhereUniqueInput!
}

input SubstitutionsWhereInput {
  AND: [SubstitutionsWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  min: Float
  min_gt: Float
  min_gte: Float
  min_in: [Float!]
  min_lt: Float
  min_lte: Float
  min_not: Float
  min_not_in: [Float!]
  playerIn: PlayerWhereInput
  playerOut: PlayerWhereInput
}

input SubstitutionsWhereUniqueInput {
  id: ID
}

type Team {
  id: ID!
  logoUrl: String
  name: String!
  players(after: String, before: String, first: Int, last: Int, orderBy: PlayerOrderByInput, skip: Int, where: PlayerWhereInput): [Player!]
  staff(after: String, before: String, first: Int, last: Int, orderBy: StaffOrderByInput, skip: Int, where: StaffWhereInput): [Staff!]
}

type TeamConnection {
  aggregate: AggregateTeam!
  edges: [TeamEdge!]!
  pageInfo: PageInfo!
}

input TeamCreateInput {
  id: ID
  logoUrl: String
  name: String!
  players: PlayerCreateManyWithoutTeamInput
  staff: StaffCreateManyWithoutTeamInput
}

input TeamCreateOneInput {
  connect: TeamWhereUniqueInput
  create: TeamCreateInput
}

input TeamCreateOneWithoutPlayersInput {
  connect: TeamWhereUniqueInput
  create: TeamCreateWithoutPlayersInput
}

input TeamCreateOneWithoutStaffInput {
  connect: TeamWhereUniqueInput
  create: TeamCreateWithoutStaffInput
}

input TeamCreateWithoutPlayersInput {
  id: ID
  logoUrl: String
  name: String!
  staff: StaffCreateManyWithoutTeamInput
}

input TeamCreateWithoutStaffInput {
  id: ID
  logoUrl: String
  name: String!
  players: PlayerCreateManyWithoutTeamInput
}

type TeamEdge {
  cursor: String!
  node: Team!
}

enum TeamOrderByInput {
  id_ASC
  id_DESC
  logoUrl_ASC
  logoUrl_DESC
  name_ASC
  name_DESC
}

input TeamUpdateDataInput {
  logoUrl: String
  name: String
  players: PlayerUpdateManyWithoutTeamInput
  staff: StaffUpdateManyWithoutTeamInput
}

input TeamUpdateInput {
  logoUrl: String
  name: String
  players: PlayerUpdateManyWithoutTeamInput
  staff: StaffUpdateManyWithoutTeamInput
}

input TeamUpdateManyMutationInput {
  logoUrl: String
  name: String
}

input TeamUpdateOneInput {
  connect: TeamWhereUniqueInput
  create: TeamCreateInput
  delete: Boolean
  disconnect: Boolean
  update: TeamUpdateDataInput
  upsert: TeamUpsertNestedInput
}

input TeamUpdateOneWithoutPlayersInput {
  connect: TeamWhereUniqueInput
  create: TeamCreateWithoutPlayersInput
  delete: Boolean
  disconnect: Boolean
  update: TeamUpdateWithoutPlayersDataInput
  upsert: TeamUpsertWithoutPlayersInput
}

input TeamUpdateOneWithoutStaffInput {
  connect: TeamWhereUniqueInput
  create: TeamCreateWithoutStaffInput
  delete: Boolean
  disconnect: Boolean
  update: TeamUpdateWithoutStaffDataInput
  upsert: TeamUpsertWithoutStaffInput
}

input TeamUpdateWithoutPlayersDataInput {
  logoUrl: String
  name: String
  staff: StaffUpdateManyWithoutTeamInput
}

input TeamUpdateWithoutStaffDataInput {
  logoUrl: String
  name: String
  players: PlayerUpdateManyWithoutTeamInput
}

input TeamUpsertNestedInput {
  create: TeamCreateInput!
  update: TeamUpdateDataInput!
}

input TeamUpsertWithoutPlayersInput {
  create: TeamCreateWithoutPlayersInput!
  update: TeamUpdateWithoutPlayersDataInput!
}

input TeamUpsertWithoutStaffInput {
  create: TeamCreateWithoutStaffInput!
  update: TeamUpdateWithoutStaffDataInput!
}

input TeamWhereInput {
  AND: [TeamWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  logoUrl: String
  logoUrl_contains: String
  logoUrl_ends_with: String
  logoUrl_gt: String
  logoUrl_gte: String
  logoUrl_in: [String!]
  logoUrl_lt: String
  logoUrl_lte: String
  logoUrl_not: String
  logoUrl_not_contains: String
  logoUrl_not_ends_with: String
  logoUrl_not_in: [String!]
  logoUrl_not_starts_with: String
  logoUrl_starts_with: String
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  players_some: PlayerWhereInput
  staff_some: StaffWhereInput
}

input TeamWhereUniqueInput {
  id: ID
  name: String
}

type WhereFrom {
  address: String
  countruy: String
  extra: Boolean
  id: ID!
  nationality: String
  number: Int
  PC: Int
  placeOfBirth: String
  province: String
  town: String
}

input WhereFromCreateInput {
  address: String
  countruy: String
  extra: Boolean
  id: ID
  nationality: String
  number: Int
  PC: Int
  placeOfBirth: String
  province: String
  town: String
}

input WhereFromCreateOneInput {
  create: WhereFromCreateInput
}

input WhereFromUpdateDataInput {
  address: String
  countruy: String
  extra: Boolean
  nationality: String
  number: Int
  PC: Int
  placeOfBirth: String
  province: String
  town: String
}

input WhereFromUpdateOneInput {
  connect: WhereFromWhereUniqueInput
  create: WhereFromCreateInput
  delete: Boolean
  disconnect: Boolean
  update: WhereFromUpdateDataInput
  upsert: WhereFromUpsertNestedInput
}

input WhereFromUpsertNestedInput {
  create: WhereFromCreateInput!
  update: WhereFromUpdateDataInput!
}

input WhereFromWhereInput {
  address: String
  address_contains: String
  address_ends_with: String
  address_gt: String
  address_gte: String
  address_in: [String!]
  address_lt: String
  address_lte: String
  address_not: String
  address_not_contains: String
  address_not_ends_with: String
  address_not_in: [String!]
  address_not_starts_with: String
  address_starts_with: String
  AND: [WhereFromWhereInput!]
  countruy: String
  countruy_contains: String
  countruy_ends_with: String
  countruy_gt: String
  countruy_gte: String
  countruy_in: [String!]
  countruy_lt: String
  countruy_lte: String
  countruy_not: String
  countruy_not_contains: String
  countruy_not_ends_with: String
  countruy_not_in: [String!]
  countruy_not_starts_with: String
  countruy_starts_with: String
  extra: Boolean
  extra_not: Boolean
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  nationality: String
  nationality_contains: String
  nationality_ends_with: String
  nationality_gt: String
  nationality_gte: String
  nationality_in: [String!]
  nationality_lt: String
  nationality_lte: String
  nationality_not: String
  nationality_not_contains: String
  nationality_not_ends_with: String
  nationality_not_in: [String!]
  nationality_not_starts_with: String
  nationality_starts_with: String
  number: Int
  number_gt: Int
  number_gte: Int
  number_in: [Int!]
  number_lt: Int
  number_lte: Int
  number_not: Int
  number_not_in: [Int!]
  PC: Int
  PC_gt: Int
  PC_gte: Int
  PC_in: [Int!]
  PC_lt: Int
  PC_lte: Int
  PC_not: Int
  PC_not_in: [Int!]
  placeOfBirth: String
  placeOfBirth_contains: String
  placeOfBirth_ends_with: String
  placeOfBirth_gt: String
  placeOfBirth_gte: String
  placeOfBirth_in: [String!]
  placeOfBirth_lt: String
  placeOfBirth_lte: String
  placeOfBirth_not: String
  placeOfBirth_not_contains: String
  placeOfBirth_not_ends_with: String
  placeOfBirth_not_in: [String!]
  placeOfBirth_not_starts_with: String
  placeOfBirth_starts_with: String
  province: String
  province_contains: String
  province_ends_with: String
  province_gt: String
  province_gte: String
  province_in: [String!]
  province_lt: String
  province_lte: String
  province_not: String
  province_not_contains: String
  province_not_ends_with: String
  province_not_in: [String!]
  province_not_starts_with: String
  province_starts_with: String
  town: String
  town_contains: String
  town_ends_with: String
  town_gt: String
  town_gte: String
  town_in: [String!]
  town_lt: String
  town_lte: String
  town_not: String
  town_not_contains: String
  town_not_ends_with: String
  town_not_in: [String!]
  town_not_starts_with: String
  town_starts_with: String
}

input WhereFromWhereUniqueInput {
  id: ID
}
