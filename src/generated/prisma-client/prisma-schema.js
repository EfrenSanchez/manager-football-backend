module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.30.2). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateAssist {
  count: Int!
}

type AggregateBooking {
  count: Int!
}

type AggregateGoal {
  count: Int!
}

type AggregateInjury {
  count: Int!
}

type AggregateMatch {
  count: Int!
}

type AggregatePlayer {
  count: Int!
}

type AggregateStaff {
  count: Int!
}

type AggregateTeam {
  count: Int!
}

type Assessment {
  id: ID!
  personality: Float
  psychology: Float
  technical: Float
  tactical: Float
  physical: Float
}

input AssessmentCreateInput {
  id: ID
  personality: Float
  psychology: Float
  technical: Float
  tactical: Float
  physical: Float
}

input AssessmentCreateOneInput {
  create: AssessmentCreateInput
}

input AssessmentUpdateDataInput {
  personality: Float
  psychology: Float
  technical: Float
  tactical: Float
  physical: Float
}

input AssessmentUpdateOneInput {
  create: AssessmentCreateInput
  update: AssessmentUpdateDataInput
  upsert: AssessmentUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: AssessmentWhereUniqueInput
}

input AssessmentUpsertNestedInput {
  update: AssessmentUpdateDataInput!
  create: AssessmentCreateInput!
}

input AssessmentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  personality: Float
  personality_not: Float
  personality_in: [Float!]
  personality_not_in: [Float!]
  personality_lt: Float
  personality_lte: Float
  personality_gt: Float
  personality_gte: Float
  psychology: Float
  psychology_not: Float
  psychology_in: [Float!]
  psychology_not_in: [Float!]
  psychology_lt: Float
  psychology_lte: Float
  psychology_gt: Float
  psychology_gte: Float
  technical: Float
  technical_not: Float
  technical_in: [Float!]
  technical_not_in: [Float!]
  technical_lt: Float
  technical_lte: Float
  technical_gt: Float
  technical_gte: Float
  tactical: Float
  tactical_not: Float
  tactical_in: [Float!]
  tactical_not_in: [Float!]
  tactical_lt: Float
  tactical_lte: Float
  tactical_gt: Float
  tactical_gte: Float
  physical: Float
  physical_not: Float
  physical_in: [Float!]
  physical_not_in: [Float!]
  physical_lt: Float
  physical_lte: Float
  physical_gt: Float
  physical_gte: Float
  AND: [AssessmentWhereInput!]
}

input AssessmentWhereUniqueInput {
  id: ID
}

type Assist {
  id: ID!
  player: Player!
  match: Match!
  min: Float
  desc: String
}

type AssistConnection {
  pageInfo: PageInfo!
  edges: [AssistEdge]!
  aggregate: AggregateAssist!
}

input AssistCreateInput {
  id: ID
  player: PlayerCreateOneWithoutAssistInput!
  match: MatchCreateOneWithoutAssistInput!
  min: Float
  desc: String
}

input AssistCreateManyWithoutMatchInput {
  create: [AssistCreateWithoutMatchInput!]
  connect: [AssistWhereUniqueInput!]
}

input AssistCreateManyWithoutPlayerInput {
  create: [AssistCreateWithoutPlayerInput!]
  connect: [AssistWhereUniqueInput!]
}

input AssistCreateWithoutMatchInput {
  id: ID
  player: PlayerCreateOneWithoutAssistInput!
  min: Float
  desc: String
}

input AssistCreateWithoutPlayerInput {
  id: ID
  match: MatchCreateOneWithoutAssistInput!
  min: Float
  desc: String
}

type AssistEdge {
  node: Assist!
  cursor: String!
}

enum AssistOrderByInput {
  id_ASC
  id_DESC
  min_ASC
  min_DESC
  desc_ASC
  desc_DESC
}

type AssistPreviousValues {
  id: ID!
  min: Float
  desc: String
}

input AssistScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  min: Float
  min_not: Float
  min_in: [Float!]
  min_not_in: [Float!]
  min_lt: Float
  min_lte: Float
  min_gt: Float
  min_gte: Float
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  AND: [AssistScalarWhereInput!]
  OR: [AssistScalarWhereInput!]
  NOT: [AssistScalarWhereInput!]
}

type AssistSubscriptionPayload {
  mutation: MutationType!
  node: Assist
  updatedFields: [String!]
  previousValues: AssistPreviousValues
}

input AssistSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AssistWhereInput
  AND: [AssistSubscriptionWhereInput!]
}

input AssistUpdateInput {
  player: PlayerUpdateOneRequiredWithoutAssistInput
  match: MatchUpdateOneRequiredWithoutAssistInput
  min: Float
  desc: String
}

input AssistUpdateManyDataInput {
  min: Float
  desc: String
}

input AssistUpdateManyMutationInput {
  min: Float
  desc: String
}

input AssistUpdateManyWithoutMatchInput {
  create: [AssistCreateWithoutMatchInput!]
  delete: [AssistWhereUniqueInput!]
  connect: [AssistWhereUniqueInput!]
  set: [AssistWhereUniqueInput!]
  disconnect: [AssistWhereUniqueInput!]
  update: [AssistUpdateWithWhereUniqueWithoutMatchInput!]
  upsert: [AssistUpsertWithWhereUniqueWithoutMatchInput!]
  deleteMany: [AssistScalarWhereInput!]
  updateMany: [AssistUpdateManyWithWhereNestedInput!]
}

input AssistUpdateManyWithoutPlayerInput {
  create: [AssistCreateWithoutPlayerInput!]
  delete: [AssistWhereUniqueInput!]
  connect: [AssistWhereUniqueInput!]
  set: [AssistWhereUniqueInput!]
  disconnect: [AssistWhereUniqueInput!]
  update: [AssistUpdateWithWhereUniqueWithoutPlayerInput!]
  upsert: [AssistUpsertWithWhereUniqueWithoutPlayerInput!]
  deleteMany: [AssistScalarWhereInput!]
  updateMany: [AssistUpdateManyWithWhereNestedInput!]
}

input AssistUpdateManyWithWhereNestedInput {
  where: AssistScalarWhereInput!
  data: AssistUpdateManyDataInput!
}

input AssistUpdateWithoutMatchDataInput {
  player: PlayerUpdateOneRequiredWithoutAssistInput
  min: Float
  desc: String
}

input AssistUpdateWithoutPlayerDataInput {
  match: MatchUpdateOneRequiredWithoutAssistInput
  min: Float
  desc: String
}

input AssistUpdateWithWhereUniqueWithoutMatchInput {
  where: AssistWhereUniqueInput!
  data: AssistUpdateWithoutMatchDataInput!
}

input AssistUpdateWithWhereUniqueWithoutPlayerInput {
  where: AssistWhereUniqueInput!
  data: AssistUpdateWithoutPlayerDataInput!
}

input AssistUpsertWithWhereUniqueWithoutMatchInput {
  where: AssistWhereUniqueInput!
  update: AssistUpdateWithoutMatchDataInput!
  create: AssistCreateWithoutMatchInput!
}

input AssistUpsertWithWhereUniqueWithoutPlayerInput {
  where: AssistWhereUniqueInput!
  update: AssistUpdateWithoutPlayerDataInput!
  create: AssistCreateWithoutPlayerInput!
}

input AssistWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  player: PlayerWhereInput
  match: MatchWhereInput
  min: Float
  min_not: Float
  min_in: [Float!]
  min_not_in: [Float!]
  min_lt: Float
  min_lte: Float
  min_gt: Float
  min_gte: Float
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  AND: [AssistWhereInput!]
}

input AssistWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

type Booking {
  id: ID!
  player: Player!
  match: Match!
  min: Float
  desc: String
  card: ColorCard
}

type BookingConnection {
  pageInfo: PageInfo!
  edges: [BookingEdge]!
  aggregate: AggregateBooking!
}

input BookingCreateInput {
  id: ID
  player: PlayerCreateOneWithoutBookingsInput!
  match: MatchCreateOneWithoutBookingsInput!
  min: Float
  desc: String
  card: ColorCard
}

input BookingCreateManyWithoutMatchInput {
  create: [BookingCreateWithoutMatchInput!]
  connect: [BookingWhereUniqueInput!]
}

input BookingCreateManyWithoutPlayerInput {
  create: [BookingCreateWithoutPlayerInput!]
  connect: [BookingWhereUniqueInput!]
}

input BookingCreateWithoutMatchInput {
  id: ID
  player: PlayerCreateOneWithoutBookingsInput!
  min: Float
  desc: String
  card: ColorCard
}

input BookingCreateWithoutPlayerInput {
  id: ID
  match: MatchCreateOneWithoutBookingsInput!
  min: Float
  desc: String
  card: ColorCard
}

type BookingEdge {
  node: Booking!
  cursor: String!
}

enum BookingOrderByInput {
  id_ASC
  id_DESC
  min_ASC
  min_DESC
  desc_ASC
  desc_DESC
  card_ASC
  card_DESC
}

type BookingPreviousValues {
  id: ID!
  min: Float
  desc: String
  card: ColorCard
}

input BookingScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  min: Float
  min_not: Float
  min_in: [Float!]
  min_not_in: [Float!]
  min_lt: Float
  min_lte: Float
  min_gt: Float
  min_gte: Float
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  card: ColorCard
  card_not: ColorCard
  card_in: [ColorCard!]
  card_not_in: [ColorCard!]
  AND: [BookingScalarWhereInput!]
  OR: [BookingScalarWhereInput!]
  NOT: [BookingScalarWhereInput!]
}

type BookingSubscriptionPayload {
  mutation: MutationType!
  node: Booking
  updatedFields: [String!]
  previousValues: BookingPreviousValues
}

input BookingSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BookingWhereInput
  AND: [BookingSubscriptionWhereInput!]
}

input BookingUpdateInput {
  player: PlayerUpdateOneRequiredWithoutBookingsInput
  match: MatchUpdateOneRequiredWithoutBookingsInput
  min: Float
  desc: String
  card: ColorCard
}

input BookingUpdateManyDataInput {
  min: Float
  desc: String
  card: ColorCard
}

input BookingUpdateManyMutationInput {
  min: Float
  desc: String
  card: ColorCard
}

input BookingUpdateManyWithoutMatchInput {
  create: [BookingCreateWithoutMatchInput!]
  delete: [BookingWhereUniqueInput!]
  connect: [BookingWhereUniqueInput!]
  set: [BookingWhereUniqueInput!]
  disconnect: [BookingWhereUniqueInput!]
  update: [BookingUpdateWithWhereUniqueWithoutMatchInput!]
  upsert: [BookingUpsertWithWhereUniqueWithoutMatchInput!]
  deleteMany: [BookingScalarWhereInput!]
  updateMany: [BookingUpdateManyWithWhereNestedInput!]
}

input BookingUpdateManyWithoutPlayerInput {
  create: [BookingCreateWithoutPlayerInput!]
  delete: [BookingWhereUniqueInput!]
  connect: [BookingWhereUniqueInput!]
  set: [BookingWhereUniqueInput!]
  disconnect: [BookingWhereUniqueInput!]
  update: [BookingUpdateWithWhereUniqueWithoutPlayerInput!]
  upsert: [BookingUpsertWithWhereUniqueWithoutPlayerInput!]
  deleteMany: [BookingScalarWhereInput!]
  updateMany: [BookingUpdateManyWithWhereNestedInput!]
}

input BookingUpdateManyWithWhereNestedInput {
  where: BookingScalarWhereInput!
  data: BookingUpdateManyDataInput!
}

input BookingUpdateWithoutMatchDataInput {
  player: PlayerUpdateOneRequiredWithoutBookingsInput
  min: Float
  desc: String
  card: ColorCard
}

input BookingUpdateWithoutPlayerDataInput {
  match: MatchUpdateOneRequiredWithoutBookingsInput
  min: Float
  desc: String
  card: ColorCard
}

input BookingUpdateWithWhereUniqueWithoutMatchInput {
  where: BookingWhereUniqueInput!
  data: BookingUpdateWithoutMatchDataInput!
}

input BookingUpdateWithWhereUniqueWithoutPlayerInput {
  where: BookingWhereUniqueInput!
  data: BookingUpdateWithoutPlayerDataInput!
}

input BookingUpsertWithWhereUniqueWithoutMatchInput {
  where: BookingWhereUniqueInput!
  update: BookingUpdateWithoutMatchDataInput!
  create: BookingCreateWithoutMatchInput!
}

input BookingUpsertWithWhereUniqueWithoutPlayerInput {
  where: BookingWhereUniqueInput!
  update: BookingUpdateWithoutPlayerDataInput!
  create: BookingCreateWithoutPlayerInput!
}

input BookingWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  player: PlayerWhereInput
  match: MatchWhereInput
  min: Float
  min_not: Float
  min_in: [Float!]
  min_not_in: [Float!]
  min_lt: Float
  min_lte: Float
  min_gt: Float
  min_gte: Float
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  card: ColorCard
  card_not: ColorCard
  card_in: [ColorCard!]
  card_not_in: [ColorCard!]
  AND: [BookingWhereInput!]
}

input BookingWhereUniqueInput {
  id: ID
}

enum ColorCard {
  YELLOW
  RED
}

enum Competiton {
  FRIENDLY
  LEAGUE
  CUP
}

scalar DateTime

enum Foot {
  LEFT
  RIGHT
  AMB
  UNKNOWN
}

type Goal {
  id: ID!
  player: Player!
  match: Match!
  min: Float
  desc: String
}

type GoalConnection {
  pageInfo: PageInfo!
  edges: [GoalEdge]!
  aggregate: AggregateGoal!
}

input GoalCreateInput {
  id: ID
  player: PlayerCreateOneWithoutGoalsInput!
  match: MatchCreateOneWithoutGoalsInput!
  min: Float
  desc: String
}

input GoalCreateManyWithoutMatchInput {
  create: [GoalCreateWithoutMatchInput!]
  connect: [GoalWhereUniqueInput!]
}

input GoalCreateManyWithoutPlayerInput {
  create: [GoalCreateWithoutPlayerInput!]
  connect: [GoalWhereUniqueInput!]
}

input GoalCreateWithoutMatchInput {
  id: ID
  player: PlayerCreateOneWithoutGoalsInput!
  min: Float
  desc: String
}

input GoalCreateWithoutPlayerInput {
  id: ID
  match: MatchCreateOneWithoutGoalsInput!
  min: Float
  desc: String
}

type GoalEdge {
  node: Goal!
  cursor: String!
}

enum GoalOrderByInput {
  id_ASC
  id_DESC
  min_ASC
  min_DESC
  desc_ASC
  desc_DESC
}

type GoalPreviousValues {
  id: ID!
  min: Float
  desc: String
}

input GoalScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  min: Float
  min_not: Float
  min_in: [Float!]
  min_not_in: [Float!]
  min_lt: Float
  min_lte: Float
  min_gt: Float
  min_gte: Float
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  AND: [GoalScalarWhereInput!]
  OR: [GoalScalarWhereInput!]
  NOT: [GoalScalarWhereInput!]
}

type GoalSubscriptionPayload {
  mutation: MutationType!
  node: Goal
  updatedFields: [String!]
  previousValues: GoalPreviousValues
}

input GoalSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GoalWhereInput
  AND: [GoalSubscriptionWhereInput!]
}

input GoalUpdateInput {
  player: PlayerUpdateOneRequiredWithoutGoalsInput
  match: MatchUpdateOneRequiredWithoutGoalsInput
  min: Float
  desc: String
}

input GoalUpdateManyDataInput {
  min: Float
  desc: String
}

input GoalUpdateManyMutationInput {
  min: Float
  desc: String
}

input GoalUpdateManyWithoutMatchInput {
  create: [GoalCreateWithoutMatchInput!]
  delete: [GoalWhereUniqueInput!]
  connect: [GoalWhereUniqueInput!]
  set: [GoalWhereUniqueInput!]
  disconnect: [GoalWhereUniqueInput!]
  update: [GoalUpdateWithWhereUniqueWithoutMatchInput!]
  upsert: [GoalUpsertWithWhereUniqueWithoutMatchInput!]
  deleteMany: [GoalScalarWhereInput!]
  updateMany: [GoalUpdateManyWithWhereNestedInput!]
}

input GoalUpdateManyWithoutPlayerInput {
  create: [GoalCreateWithoutPlayerInput!]
  delete: [GoalWhereUniqueInput!]
  connect: [GoalWhereUniqueInput!]
  set: [GoalWhereUniqueInput!]
  disconnect: [GoalWhereUniqueInput!]
  update: [GoalUpdateWithWhereUniqueWithoutPlayerInput!]
  upsert: [GoalUpsertWithWhereUniqueWithoutPlayerInput!]
  deleteMany: [GoalScalarWhereInput!]
  updateMany: [GoalUpdateManyWithWhereNestedInput!]
}

input GoalUpdateManyWithWhereNestedInput {
  where: GoalScalarWhereInput!
  data: GoalUpdateManyDataInput!
}

input GoalUpdateWithoutMatchDataInput {
  player: PlayerUpdateOneRequiredWithoutGoalsInput
  min: Float
  desc: String
}

input GoalUpdateWithoutPlayerDataInput {
  match: MatchUpdateOneRequiredWithoutGoalsInput
  min: Float
  desc: String
}

input GoalUpdateWithWhereUniqueWithoutMatchInput {
  where: GoalWhereUniqueInput!
  data: GoalUpdateWithoutMatchDataInput!
}

input GoalUpdateWithWhereUniqueWithoutPlayerInput {
  where: GoalWhereUniqueInput!
  data: GoalUpdateWithoutPlayerDataInput!
}

input GoalUpsertWithWhereUniqueWithoutMatchInput {
  where: GoalWhereUniqueInput!
  update: GoalUpdateWithoutMatchDataInput!
  create: GoalCreateWithoutMatchInput!
}

input GoalUpsertWithWhereUniqueWithoutPlayerInput {
  where: GoalWhereUniqueInput!
  update: GoalUpdateWithoutPlayerDataInput!
  create: GoalCreateWithoutPlayerInput!
}

input GoalWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  player: PlayerWhereInput
  match: MatchWhereInput
  min: Float
  min_not: Float
  min_in: [Float!]
  min_not_in: [Float!]
  min_lt: Float
  min_lte: Float
  min_gt: Float
  min_gte: Float
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  AND: [GoalWhereInput!]
}

input GoalWhereUniqueInput {
  id: ID
}

type HomeAndAway {
  homeTeam: Int
  awayTeam: Int
}

input HomeAndAwayCreateInput {
  homeTeam: Int
  awayTeam: Int
}

input HomeAndAwayCreateOneInput {
  create: HomeAndAwayCreateInput
}

input HomeAndAwayUpdateDataInput {
  homeTeam: Int
  awayTeam: Int
}

input HomeAndAwayUpdateOneInput {
  create: HomeAndAwayCreateInput
  update: HomeAndAwayUpdateDataInput
  upsert: HomeAndAwayUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
}

input HomeAndAwayUpdateOneRequiredInput {
  create: HomeAndAwayCreateInput
  update: HomeAndAwayUpdateDataInput
  upsert: HomeAndAwayUpsertNestedInput
}

input HomeAndAwayUpsertNestedInput {
  update: HomeAndAwayUpdateDataInput!
  create: HomeAndAwayCreateInput!
}

input HomeAndAwayWhereInput {
  homeTeam: Int
  homeTeam_not: Int
  homeTeam_in: [Int!]
  homeTeam_not_in: [Int!]
  homeTeam_lt: Int
  homeTeam_lte: Int
  homeTeam_gt: Int
  homeTeam_gte: Int
  awayTeam: Int
  awayTeam_not: Int
  awayTeam_in: [Int!]
  awayTeam_not_in: [Int!]
  awayTeam_lt: Int
  awayTeam_lte: Int
  awayTeam_gt: Int
  awayTeam_gte: Int
  AND: [HomeAndAwayWhereInput!]
}

type Injury {
  id: ID!
  startAt: DateTime!
  endAt: DateTime
  desc: String!
  player: Player
}

type InjuryConnection {
  pageInfo: PageInfo!
  edges: [InjuryEdge]!
  aggregate: AggregateInjury!
}

input InjuryCreateInput {
  id: ID
  startAt: DateTime!
  endAt: DateTime
  desc: String!
  player: PlayerCreateOneWithoutInjuryInput
}

input InjuryCreateManyWithoutPlayerInput {
  create: [InjuryCreateWithoutPlayerInput!]
  connect: [InjuryWhereUniqueInput!]
}

input InjuryCreateWithoutPlayerInput {
  id: ID
  startAt: DateTime!
  endAt: DateTime
  desc: String!
}

type InjuryEdge {
  node: Injury!
  cursor: String!
}

enum InjuryOrderByInput {
  id_ASC
  id_DESC
  startAt_ASC
  startAt_DESC
  endAt_ASC
  endAt_DESC
  desc_ASC
  desc_DESC
}

type InjuryPreviousValues {
  id: ID!
  startAt: DateTime!
  endAt: DateTime
  desc: String!
}

input InjuryScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  startAt: DateTime
  startAt_not: DateTime
  startAt_in: [DateTime!]
  startAt_not_in: [DateTime!]
  startAt_lt: DateTime
  startAt_lte: DateTime
  startAt_gt: DateTime
  startAt_gte: DateTime
  endAt: DateTime
  endAt_not: DateTime
  endAt_in: [DateTime!]
  endAt_not_in: [DateTime!]
  endAt_lt: DateTime
  endAt_lte: DateTime
  endAt_gt: DateTime
  endAt_gte: DateTime
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  AND: [InjuryScalarWhereInput!]
  OR: [InjuryScalarWhereInput!]
  NOT: [InjuryScalarWhereInput!]
}

type InjurySubscriptionPayload {
  mutation: MutationType!
  node: Injury
  updatedFields: [String!]
  previousValues: InjuryPreviousValues
}

input InjurySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: InjuryWhereInput
  AND: [InjurySubscriptionWhereInput!]
}

input InjuryUpdateInput {
  startAt: DateTime
  endAt: DateTime
  desc: String
  player: PlayerUpdateOneWithoutInjuryInput
}

input InjuryUpdateManyDataInput {
  startAt: DateTime
  endAt: DateTime
  desc: String
}

input InjuryUpdateManyMutationInput {
  startAt: DateTime
  endAt: DateTime
  desc: String
}

input InjuryUpdateManyWithoutPlayerInput {
  create: [InjuryCreateWithoutPlayerInput!]
  delete: [InjuryWhereUniqueInput!]
  connect: [InjuryWhereUniqueInput!]
  set: [InjuryWhereUniqueInput!]
  disconnect: [InjuryWhereUniqueInput!]
  update: [InjuryUpdateWithWhereUniqueWithoutPlayerInput!]
  upsert: [InjuryUpsertWithWhereUniqueWithoutPlayerInput!]
  deleteMany: [InjuryScalarWhereInput!]
  updateMany: [InjuryUpdateManyWithWhereNestedInput!]
}

input InjuryUpdateManyWithWhereNestedInput {
  where: InjuryScalarWhereInput!
  data: InjuryUpdateManyDataInput!
}

input InjuryUpdateWithoutPlayerDataInput {
  startAt: DateTime
  endAt: DateTime
  desc: String
}

input InjuryUpdateWithWhereUniqueWithoutPlayerInput {
  where: InjuryWhereUniqueInput!
  data: InjuryUpdateWithoutPlayerDataInput!
}

input InjuryUpsertWithWhereUniqueWithoutPlayerInput {
  where: InjuryWhereUniqueInput!
  update: InjuryUpdateWithoutPlayerDataInput!
  create: InjuryCreateWithoutPlayerInput!
}

input InjuryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  startAt: DateTime
  startAt_not: DateTime
  startAt_in: [DateTime!]
  startAt_not_in: [DateTime!]
  startAt_lt: DateTime
  startAt_lte: DateTime
  startAt_gt: DateTime
  startAt_gte: DateTime
  endAt: DateTime
  endAt_not: DateTime
  endAt_in: [DateTime!]
  endAt_not_in: [DateTime!]
  endAt_lt: DateTime
  endAt_lte: DateTime
  endAt_gt: DateTime
  endAt_gte: DateTime
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  player: PlayerWhereInput
  AND: [InjuryWhereInput!]
}

input InjuryWhereUniqueInput {
  id: ID
}

scalar Long

type Match {
  id: ID!
  date: DateTime
  jornada: Int!
  finished: Boolean
  homeTeam: Boolean
  opponent: Team
  win: Boolean
  competition: Competiton
  captain: Player!
  staff(where: StaffWhereInput, orderBy: StaffOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Staff!]
  lineup(where: PlayerWhereInput, orderBy: PlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Player!]
  bench(where: PlayerWhereInput, orderBy: PlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Player!]
  score: Score!
  goals(where: GoalWhereInput, orderBy: GoalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Goal!]
  assist(where: AssistWhereInput, orderBy: AssistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Assist!]
  substitutions: [Substitutions!]
  bookings(where: BookingWhereInput, orderBy: BookingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Booking!]
  referees: String
  desc: String
}

type MatchConnection {
  pageInfo: PageInfo!
  edges: [MatchEdge]!
  aggregate: AggregateMatch!
}

input MatchCreateInput {
  id: ID
  date: DateTime
  jornada: Int!
  finished: Boolean
  homeTeam: Boolean
  opponent: TeamCreateOneInput
  win: Boolean
  competition: Competiton
  captain: PlayerCreateOneInput!
  staff: StaffCreateManyWithoutMatchesInput
  lineup: PlayerCreateManyWithoutLineupInput
  bench: PlayerCreateManyWithoutBenchInput
  score: ScoreCreateOneInput!
  goals: GoalCreateManyWithoutMatchInput
  assist: AssistCreateManyWithoutMatchInput
  substitutions: SubstitutionsCreateManyInput
  bookings: BookingCreateManyWithoutMatchInput
  referees: String
  desc: String
}

input MatchCreateManyWithoutBenchInput {
  create: [MatchCreateWithoutBenchInput!]
  connect: [MatchWhereUniqueInput!]
}

input MatchCreateManyWithoutLineupInput {
  create: [MatchCreateWithoutLineupInput!]
  connect: [MatchWhereUniqueInput!]
}

input MatchCreateManyWithoutStaffInput {
  create: [MatchCreateWithoutStaffInput!]
  connect: [MatchWhereUniqueInput!]
}

input MatchCreateOneWithoutAssistInput {
  create: MatchCreateWithoutAssistInput
  connect: MatchWhereUniqueInput
}

input MatchCreateOneWithoutBookingsInput {
  create: MatchCreateWithoutBookingsInput
  connect: MatchWhereUniqueInput
}

input MatchCreateOneWithoutGoalsInput {
  create: MatchCreateWithoutGoalsInput
  connect: MatchWhereUniqueInput
}

input MatchCreateWithoutAssistInput {
  id: ID
  date: DateTime
  jornada: Int!
  finished: Boolean
  homeTeam: Boolean
  opponent: TeamCreateOneInput
  win: Boolean
  competition: Competiton
  captain: PlayerCreateOneInput!
  staff: StaffCreateManyWithoutMatchesInput
  lineup: PlayerCreateManyWithoutLineupInput
  bench: PlayerCreateManyWithoutBenchInput
  score: ScoreCreateOneInput!
  goals: GoalCreateManyWithoutMatchInput
  substitutions: SubstitutionsCreateManyInput
  bookings: BookingCreateManyWithoutMatchInput
  referees: String
  desc: String
}

input MatchCreateWithoutBenchInput {
  id: ID
  date: DateTime
  jornada: Int!
  finished: Boolean
  homeTeam: Boolean
  opponent: TeamCreateOneInput
  win: Boolean
  competition: Competiton
  captain: PlayerCreateOneInput!
  staff: StaffCreateManyWithoutMatchesInput
  lineup: PlayerCreateManyWithoutLineupInput
  score: ScoreCreateOneInput!
  goals: GoalCreateManyWithoutMatchInput
  assist: AssistCreateManyWithoutMatchInput
  substitutions: SubstitutionsCreateManyInput
  bookings: BookingCreateManyWithoutMatchInput
  referees: String
  desc: String
}

input MatchCreateWithoutBookingsInput {
  id: ID
  date: DateTime
  jornada: Int!
  finished: Boolean
  homeTeam: Boolean
  opponent: TeamCreateOneInput
  win: Boolean
  competition: Competiton
  captain: PlayerCreateOneInput!
  staff: StaffCreateManyWithoutMatchesInput
  lineup: PlayerCreateManyWithoutLineupInput
  bench: PlayerCreateManyWithoutBenchInput
  score: ScoreCreateOneInput!
  goals: GoalCreateManyWithoutMatchInput
  assist: AssistCreateManyWithoutMatchInput
  substitutions: SubstitutionsCreateManyInput
  referees: String
  desc: String
}

input MatchCreateWithoutGoalsInput {
  id: ID
  date: DateTime
  jornada: Int!
  finished: Boolean
  homeTeam: Boolean
  opponent: TeamCreateOneInput
  win: Boolean
  competition: Competiton
  captain: PlayerCreateOneInput!
  staff: StaffCreateManyWithoutMatchesInput
  lineup: PlayerCreateManyWithoutLineupInput
  bench: PlayerCreateManyWithoutBenchInput
  score: ScoreCreateOneInput!
  assist: AssistCreateManyWithoutMatchInput
  substitutions: SubstitutionsCreateManyInput
  bookings: BookingCreateManyWithoutMatchInput
  referees: String
  desc: String
}

input MatchCreateWithoutLineupInput {
  id: ID
  date: DateTime
  jornada: Int!
  finished: Boolean
  homeTeam: Boolean
  opponent: TeamCreateOneInput
  win: Boolean
  competition: Competiton
  captain: PlayerCreateOneInput!
  staff: StaffCreateManyWithoutMatchesInput
  bench: PlayerCreateManyWithoutBenchInput
  score: ScoreCreateOneInput!
  goals: GoalCreateManyWithoutMatchInput
  assist: AssistCreateManyWithoutMatchInput
  substitutions: SubstitutionsCreateManyInput
  bookings: BookingCreateManyWithoutMatchInput
  referees: String
  desc: String
}

input MatchCreateWithoutStaffInput {
  id: ID
  date: DateTime
  jornada: Int!
  finished: Boolean
  homeTeam: Boolean
  opponent: TeamCreateOneInput
  win: Boolean
  competition: Competiton
  captain: PlayerCreateOneInput!
  lineup: PlayerCreateManyWithoutLineupInput
  bench: PlayerCreateManyWithoutBenchInput
  score: ScoreCreateOneInput!
  goals: GoalCreateManyWithoutMatchInput
  assist: AssistCreateManyWithoutMatchInput
  substitutions: SubstitutionsCreateManyInput
  bookings: BookingCreateManyWithoutMatchInput
  referees: String
  desc: String
}

type MatchEdge {
  node: Match!
  cursor: String!
}

enum MatchOrderByInput {
  id_ASC
  id_DESC
  date_ASC
  date_DESC
  jornada_ASC
  jornada_DESC
  finished_ASC
  finished_DESC
  homeTeam_ASC
  homeTeam_DESC
  win_ASC
  win_DESC
  competition_ASC
  competition_DESC
  referees_ASC
  referees_DESC
  desc_ASC
  desc_DESC
}

type MatchPreviousValues {
  id: ID!
  date: DateTime
  jornada: Int!
  finished: Boolean
  homeTeam: Boolean
  win: Boolean
  competition: Competiton
  referees: String
  desc: String
}

input MatchScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  jornada: Int
  jornada_not: Int
  jornada_in: [Int!]
  jornada_not_in: [Int!]
  jornada_lt: Int
  jornada_lte: Int
  jornada_gt: Int
  jornada_gte: Int
  finished: Boolean
  finished_not: Boolean
  homeTeam: Boolean
  homeTeam_not: Boolean
  win: Boolean
  win_not: Boolean
  competition: Competiton
  competition_not: Competiton
  competition_in: [Competiton!]
  competition_not_in: [Competiton!]
  referees: String
  referees_not: String
  referees_in: [String!]
  referees_not_in: [String!]
  referees_lt: String
  referees_lte: String
  referees_gt: String
  referees_gte: String
  referees_contains: String
  referees_not_contains: String
  referees_starts_with: String
  referees_not_starts_with: String
  referees_ends_with: String
  referees_not_ends_with: String
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  AND: [MatchScalarWhereInput!]
  OR: [MatchScalarWhereInput!]
  NOT: [MatchScalarWhereInput!]
}

type MatchSubscriptionPayload {
  mutation: MutationType!
  node: Match
  updatedFields: [String!]
  previousValues: MatchPreviousValues
}

input MatchSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MatchWhereInput
  AND: [MatchSubscriptionWhereInput!]
}

input MatchUpdateInput {
  date: DateTime
  jornada: Int
  finished: Boolean
  homeTeam: Boolean
  opponent: TeamUpdateOneInput
  win: Boolean
  competition: Competiton
  captain: PlayerUpdateOneRequiredInput
  staff: StaffUpdateManyWithoutMatchesInput
  lineup: PlayerUpdateManyWithoutLineupInput
  bench: PlayerUpdateManyWithoutBenchInput
  score: ScoreUpdateOneRequiredInput
  goals: GoalUpdateManyWithoutMatchInput
  assist: AssistUpdateManyWithoutMatchInput
  substitutions: SubstitutionsUpdateManyInput
  bookings: BookingUpdateManyWithoutMatchInput
  referees: String
  desc: String
}

input MatchUpdateManyDataInput {
  date: DateTime
  jornada: Int
  finished: Boolean
  homeTeam: Boolean
  win: Boolean
  competition: Competiton
  referees: String
  desc: String
}

input MatchUpdateManyMutationInput {
  date: DateTime
  jornada: Int
  finished: Boolean
  homeTeam: Boolean
  win: Boolean
  competition: Competiton
  referees: String
  desc: String
}

input MatchUpdateManyWithoutBenchInput {
  create: [MatchCreateWithoutBenchInput!]
  delete: [MatchWhereUniqueInput!]
  connect: [MatchWhereUniqueInput!]
  set: [MatchWhereUniqueInput!]
  disconnect: [MatchWhereUniqueInput!]
  update: [MatchUpdateWithWhereUniqueWithoutBenchInput!]
  upsert: [MatchUpsertWithWhereUniqueWithoutBenchInput!]
  deleteMany: [MatchScalarWhereInput!]
  updateMany: [MatchUpdateManyWithWhereNestedInput!]
}

input MatchUpdateManyWithoutLineupInput {
  create: [MatchCreateWithoutLineupInput!]
  delete: [MatchWhereUniqueInput!]
  connect: [MatchWhereUniqueInput!]
  set: [MatchWhereUniqueInput!]
  disconnect: [MatchWhereUniqueInput!]
  update: [MatchUpdateWithWhereUniqueWithoutLineupInput!]
  upsert: [MatchUpsertWithWhereUniqueWithoutLineupInput!]
  deleteMany: [MatchScalarWhereInput!]
  updateMany: [MatchUpdateManyWithWhereNestedInput!]
}

input MatchUpdateManyWithoutStaffInput {
  create: [MatchCreateWithoutStaffInput!]
  delete: [MatchWhereUniqueInput!]
  connect: [MatchWhereUniqueInput!]
  set: [MatchWhereUniqueInput!]
  disconnect: [MatchWhereUniqueInput!]
  update: [MatchUpdateWithWhereUniqueWithoutStaffInput!]
  upsert: [MatchUpsertWithWhereUniqueWithoutStaffInput!]
  deleteMany: [MatchScalarWhereInput!]
  updateMany: [MatchUpdateManyWithWhereNestedInput!]
}

input MatchUpdateManyWithWhereNestedInput {
  where: MatchScalarWhereInput!
  data: MatchUpdateManyDataInput!
}

input MatchUpdateOneRequiredWithoutAssistInput {
  create: MatchCreateWithoutAssistInput
  update: MatchUpdateWithoutAssistDataInput
  upsert: MatchUpsertWithoutAssistInput
  connect: MatchWhereUniqueInput
}

input MatchUpdateOneRequiredWithoutBookingsInput {
  create: MatchCreateWithoutBookingsInput
  update: MatchUpdateWithoutBookingsDataInput
  upsert: MatchUpsertWithoutBookingsInput
  connect: MatchWhereUniqueInput
}

input MatchUpdateOneRequiredWithoutGoalsInput {
  create: MatchCreateWithoutGoalsInput
  update: MatchUpdateWithoutGoalsDataInput
  upsert: MatchUpsertWithoutGoalsInput
  connect: MatchWhereUniqueInput
}

input MatchUpdateWithoutAssistDataInput {
  date: DateTime
  jornada: Int
  finished: Boolean
  homeTeam: Boolean
  opponent: TeamUpdateOneInput
  win: Boolean
  competition: Competiton
  captain: PlayerUpdateOneRequiredInput
  staff: StaffUpdateManyWithoutMatchesInput
  lineup: PlayerUpdateManyWithoutLineupInput
  bench: PlayerUpdateManyWithoutBenchInput
  score: ScoreUpdateOneRequiredInput
  goals: GoalUpdateManyWithoutMatchInput
  substitutions: SubstitutionsUpdateManyInput
  bookings: BookingUpdateManyWithoutMatchInput
  referees: String
  desc: String
}

input MatchUpdateWithoutBenchDataInput {
  date: DateTime
  jornada: Int
  finished: Boolean
  homeTeam: Boolean
  opponent: TeamUpdateOneInput
  win: Boolean
  competition: Competiton
  captain: PlayerUpdateOneRequiredInput
  staff: StaffUpdateManyWithoutMatchesInput
  lineup: PlayerUpdateManyWithoutLineupInput
  score: ScoreUpdateOneRequiredInput
  goals: GoalUpdateManyWithoutMatchInput
  assist: AssistUpdateManyWithoutMatchInput
  substitutions: SubstitutionsUpdateManyInput
  bookings: BookingUpdateManyWithoutMatchInput
  referees: String
  desc: String
}

input MatchUpdateWithoutBookingsDataInput {
  date: DateTime
  jornada: Int
  finished: Boolean
  homeTeam: Boolean
  opponent: TeamUpdateOneInput
  win: Boolean
  competition: Competiton
  captain: PlayerUpdateOneRequiredInput
  staff: StaffUpdateManyWithoutMatchesInput
  lineup: PlayerUpdateManyWithoutLineupInput
  bench: PlayerUpdateManyWithoutBenchInput
  score: ScoreUpdateOneRequiredInput
  goals: GoalUpdateManyWithoutMatchInput
  assist: AssistUpdateManyWithoutMatchInput
  substitutions: SubstitutionsUpdateManyInput
  referees: String
  desc: String
}

input MatchUpdateWithoutGoalsDataInput {
  date: DateTime
  jornada: Int
  finished: Boolean
  homeTeam: Boolean
  opponent: TeamUpdateOneInput
  win: Boolean
  competition: Competiton
  captain: PlayerUpdateOneRequiredInput
  staff: StaffUpdateManyWithoutMatchesInput
  lineup: PlayerUpdateManyWithoutLineupInput
  bench: PlayerUpdateManyWithoutBenchInput
  score: ScoreUpdateOneRequiredInput
  assist: AssistUpdateManyWithoutMatchInput
  substitutions: SubstitutionsUpdateManyInput
  bookings: BookingUpdateManyWithoutMatchInput
  referees: String
  desc: String
}

input MatchUpdateWithoutLineupDataInput {
  date: DateTime
  jornada: Int
  finished: Boolean
  homeTeam: Boolean
  opponent: TeamUpdateOneInput
  win: Boolean
  competition: Competiton
  captain: PlayerUpdateOneRequiredInput
  staff: StaffUpdateManyWithoutMatchesInput
  bench: PlayerUpdateManyWithoutBenchInput
  score: ScoreUpdateOneRequiredInput
  goals: GoalUpdateManyWithoutMatchInput
  assist: AssistUpdateManyWithoutMatchInput
  substitutions: SubstitutionsUpdateManyInput
  bookings: BookingUpdateManyWithoutMatchInput
  referees: String
  desc: String
}

input MatchUpdateWithoutStaffDataInput {
  date: DateTime
  jornada: Int
  finished: Boolean
  homeTeam: Boolean
  opponent: TeamUpdateOneInput
  win: Boolean
  competition: Competiton
  captain: PlayerUpdateOneRequiredInput
  lineup: PlayerUpdateManyWithoutLineupInput
  bench: PlayerUpdateManyWithoutBenchInput
  score: ScoreUpdateOneRequiredInput
  goals: GoalUpdateManyWithoutMatchInput
  assist: AssistUpdateManyWithoutMatchInput
  substitutions: SubstitutionsUpdateManyInput
  bookings: BookingUpdateManyWithoutMatchInput
  referees: String
  desc: String
}

input MatchUpdateWithWhereUniqueWithoutBenchInput {
  where: MatchWhereUniqueInput!
  data: MatchUpdateWithoutBenchDataInput!
}

input MatchUpdateWithWhereUniqueWithoutLineupInput {
  where: MatchWhereUniqueInput!
  data: MatchUpdateWithoutLineupDataInput!
}

input MatchUpdateWithWhereUniqueWithoutStaffInput {
  where: MatchWhereUniqueInput!
  data: MatchUpdateWithoutStaffDataInput!
}

input MatchUpsertWithoutAssistInput {
  update: MatchUpdateWithoutAssistDataInput!
  create: MatchCreateWithoutAssistInput!
}

input MatchUpsertWithoutBookingsInput {
  update: MatchUpdateWithoutBookingsDataInput!
  create: MatchCreateWithoutBookingsInput!
}

input MatchUpsertWithoutGoalsInput {
  update: MatchUpdateWithoutGoalsDataInput!
  create: MatchCreateWithoutGoalsInput!
}

input MatchUpsertWithWhereUniqueWithoutBenchInput {
  where: MatchWhereUniqueInput!
  update: MatchUpdateWithoutBenchDataInput!
  create: MatchCreateWithoutBenchInput!
}

input MatchUpsertWithWhereUniqueWithoutLineupInput {
  where: MatchWhereUniqueInput!
  update: MatchUpdateWithoutLineupDataInput!
  create: MatchCreateWithoutLineupInput!
}

input MatchUpsertWithWhereUniqueWithoutStaffInput {
  where: MatchWhereUniqueInput!
  update: MatchUpdateWithoutStaffDataInput!
  create: MatchCreateWithoutStaffInput!
}

input MatchWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  jornada: Int
  jornada_not: Int
  jornada_in: [Int!]
  jornada_not_in: [Int!]
  jornada_lt: Int
  jornada_lte: Int
  jornada_gt: Int
  jornada_gte: Int
  finished: Boolean
  finished_not: Boolean
  homeTeam: Boolean
  homeTeam_not: Boolean
  opponent: TeamWhereInput
  win: Boolean
  win_not: Boolean
  competition: Competiton
  competition_not: Competiton
  competition_in: [Competiton!]
  competition_not_in: [Competiton!]
  captain: PlayerWhereInput
  staff_some: StaffWhereInput
  lineup_some: PlayerWhereInput
  bench_some: PlayerWhereInput
  score: ScoreWhereInput
  goals_some: GoalWhereInput
  assist_some: AssistWhereInput
  substitutions_some: SubstitutionsWhereInput
  substitutions_every: SubstitutionsRestrictedWhereInput
  substitutions_none: SubstitutionsRestrictedWhereInput
  bookings_some: BookingWhereInput
  referees: String
  referees_not: String
  referees_in: [String!]
  referees_not_in: [String!]
  referees_lt: String
  referees_lte: String
  referees_gt: String
  referees_gte: String
  referees_contains: String
  referees_not_contains: String
  referees_starts_with: String
  referees_not_starts_with: String
  referees_ends_with: String
  referees_not_ends_with: String
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  AND: [MatchWhereInput!]
}

input MatchWhereUniqueInput {
  id: ID
  jornada: Int
}

type Mutation {
  createAssist(data: AssistCreateInput!): Assist!
  updateAssist(data: AssistUpdateInput!, where: AssistWhereUniqueInput!): Assist
  updateManyAssists(data: AssistUpdateManyMutationInput!, where: AssistWhereInput): BatchPayload!
  upsertAssist(where: AssistWhereUniqueInput!, create: AssistCreateInput!, update: AssistUpdateInput!): Assist!
  deleteAssist(where: AssistWhereUniqueInput!): Assist
  deleteManyAssists(where: AssistWhereInput): BatchPayload!
  createBooking(data: BookingCreateInput!): Booking!
  updateBooking(data: BookingUpdateInput!, where: BookingWhereUniqueInput!): Booking
  updateManyBookings(data: BookingUpdateManyMutationInput!, where: BookingWhereInput): BatchPayload!
  upsertBooking(where: BookingWhereUniqueInput!, create: BookingCreateInput!, update: BookingUpdateInput!): Booking!
  deleteBooking(where: BookingWhereUniqueInput!): Booking
  deleteManyBookings(where: BookingWhereInput): BatchPayload!
  createGoal(data: GoalCreateInput!): Goal!
  updateGoal(data: GoalUpdateInput!, where: GoalWhereUniqueInput!): Goal
  updateManyGoals(data: GoalUpdateManyMutationInput!, where: GoalWhereInput): BatchPayload!
  upsertGoal(where: GoalWhereUniqueInput!, create: GoalCreateInput!, update: GoalUpdateInput!): Goal!
  deleteGoal(where: GoalWhereUniqueInput!): Goal
  deleteManyGoals(where: GoalWhereInput): BatchPayload!
  createInjury(data: InjuryCreateInput!): Injury!
  updateInjury(data: InjuryUpdateInput!, where: InjuryWhereUniqueInput!): Injury
  updateManyInjuries(data: InjuryUpdateManyMutationInput!, where: InjuryWhereInput): BatchPayload!
  upsertInjury(where: InjuryWhereUniqueInput!, create: InjuryCreateInput!, update: InjuryUpdateInput!): Injury!
  deleteInjury(where: InjuryWhereUniqueInput!): Injury
  deleteManyInjuries(where: InjuryWhereInput): BatchPayload!
  createMatch(data: MatchCreateInput!): Match!
  updateMatch(data: MatchUpdateInput!, where: MatchWhereUniqueInput!): Match
  updateManyMatches(data: MatchUpdateManyMutationInput!, where: MatchWhereInput): BatchPayload!
  upsertMatch(where: MatchWhereUniqueInput!, create: MatchCreateInput!, update: MatchUpdateInput!): Match!
  deleteMatch(where: MatchWhereUniqueInput!): Match
  deleteManyMatches(where: MatchWhereInput): BatchPayload!
  createPlayer(data: PlayerCreateInput!): Player!
  updatePlayer(data: PlayerUpdateInput!, where: PlayerWhereUniqueInput!): Player
  updateManyPlayers(data: PlayerUpdateManyMutationInput!, where: PlayerWhereInput): BatchPayload!
  upsertPlayer(where: PlayerWhereUniqueInput!, create: PlayerCreateInput!, update: PlayerUpdateInput!): Player!
  deletePlayer(where: PlayerWhereUniqueInput!): Player
  deleteManyPlayers(where: PlayerWhereInput): BatchPayload!
  createStaff(data: StaffCreateInput!): Staff!
  updateStaff(data: StaffUpdateInput!, where: StaffWhereUniqueInput!): Staff
  updateManyStaffs(data: StaffUpdateManyMutationInput!, where: StaffWhereInput): BatchPayload!
  upsertStaff(where: StaffWhereUniqueInput!, create: StaffCreateInput!, update: StaffUpdateInput!): Staff!
  deleteStaff(where: StaffWhereUniqueInput!): Staff
  deleteManyStaffs(where: StaffWhereInput): BatchPayload!
  createTeam(data: TeamCreateInput!): Team!
  updateTeam(data: TeamUpdateInput!, where: TeamWhereUniqueInput!): Team
  updateManyTeams(data: TeamUpdateManyMutationInput!, where: TeamWhereInput): BatchPayload!
  upsertTeam(where: TeamWhereUniqueInput!, create: TeamCreateInput!, update: TeamUpdateInput!): Team!
  deleteTeam(where: TeamWhereUniqueInput!): Team
  deleteManyTeams(where: TeamWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PersonalInfo {
  id: ID!
  name: String!
  firstName: String!
  lastName: String
  dateOfBirth: DateTime
  tel: Int
  email: String
  dni: String!
  origin: String
  status: String
  childs: Int
  brothers: Int
  poscBrothers: Int
  clubBrothers: Int
}

input PersonalInfoCreateInput {
  id: ID
  name: String!
  firstName: String!
  lastName: String
  dateOfBirth: DateTime
  tel: Int
  email: String
  dni: String!
  origin: String
  status: String
  childs: Int
  brothers: Int
  poscBrothers: Int
  clubBrothers: Int
}

input PersonalInfoCreateOneInput {
  create: PersonalInfoCreateInput
}

input PersonalInfoUpdateDataInput {
  name: String
  firstName: String
  lastName: String
  dateOfBirth: DateTime
  tel: Int
  email: String
  dni: String
  origin: String
  status: String
  childs: Int
  brothers: Int
  poscBrothers: Int
  clubBrothers: Int
}

input PersonalInfoUpdateOneInput {
  create: PersonalInfoCreateInput
  update: PersonalInfoUpdateDataInput
  upsert: PersonalInfoUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: PersonalInfoWhereUniqueInput
}

input PersonalInfoUpsertNestedInput {
  update: PersonalInfoUpdateDataInput!
  create: PersonalInfoCreateInput!
}

input PersonalInfoWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  dateOfBirth: DateTime
  dateOfBirth_not: DateTime
  dateOfBirth_in: [DateTime!]
  dateOfBirth_not_in: [DateTime!]
  dateOfBirth_lt: DateTime
  dateOfBirth_lte: DateTime
  dateOfBirth_gt: DateTime
  dateOfBirth_gte: DateTime
  tel: Int
  tel_not: Int
  tel_in: [Int!]
  tel_not_in: [Int!]
  tel_lt: Int
  tel_lte: Int
  tel_gt: Int
  tel_gte: Int
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  dni: String
  dni_not: String
  dni_in: [String!]
  dni_not_in: [String!]
  dni_lt: String
  dni_lte: String
  dni_gt: String
  dni_gte: String
  dni_contains: String
  dni_not_contains: String
  dni_starts_with: String
  dni_not_starts_with: String
  dni_ends_with: String
  dni_not_ends_with: String
  origin: String
  origin_not: String
  origin_in: [String!]
  origin_not_in: [String!]
  origin_lt: String
  origin_lte: String
  origin_gt: String
  origin_gte: String
  origin_contains: String
  origin_not_contains: String
  origin_starts_with: String
  origin_not_starts_with: String
  origin_ends_with: String
  origin_not_ends_with: String
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  childs: Int
  childs_not: Int
  childs_in: [Int!]
  childs_not_in: [Int!]
  childs_lt: Int
  childs_lte: Int
  childs_gt: Int
  childs_gte: Int
  brothers: Int
  brothers_not: Int
  brothers_in: [Int!]
  brothers_not_in: [Int!]
  brothers_lt: Int
  brothers_lte: Int
  brothers_gt: Int
  brothers_gte: Int
  poscBrothers: Int
  poscBrothers_not: Int
  poscBrothers_in: [Int!]
  poscBrothers_not_in: [Int!]
  poscBrothers_lt: Int
  poscBrothers_lte: Int
  poscBrothers_gt: Int
  poscBrothers_gte: Int
  clubBrothers: Int
  clubBrothers_not: Int
  clubBrothers_in: [Int!]
  clubBrothers_not_in: [Int!]
  clubBrothers_lt: Int
  clubBrothers_lte: Int
  clubBrothers_gt: Int
  clubBrothers_gte: Int
  AND: [PersonalInfoWhereInput!]
}

input PersonalInfoWhereUniqueInput {
  id: ID
}

type Player {
  id: ID!
  nick: String!
  shirtNumber: Int!
  imgUrl: String
  team: Team
  captain: Boolean
  personalInfo: PersonalInfo
  position: PlayerPosition!
  altPosition: PlayerPosition
  assessment: Assessment
  foot: Foot
  from: WhereFrom
  injured: Boolean
  injury(where: InjuryWhereInput, orderBy: InjuryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Injury!]
  sizes: Size
  goals(where: GoalWhereInput, orderBy: GoalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Goal!]
  assist(where: AssistWhereInput, orderBy: AssistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Assist!]
  bookings(where: BookingWhereInput, orderBy: BookingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Booking!]
  lineup(where: MatchWhereInput, orderBy: MatchOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Match!]
  bench(where: MatchWhereInput, orderBy: MatchOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Match!]
}

type PlayerConnection {
  pageInfo: PageInfo!
  edges: [PlayerEdge]!
  aggregate: AggregatePlayer!
}

input PlayerCreateInput {
  id: ID
  nick: String!
  shirtNumber: Int!
  imgUrl: String
  team: TeamCreateOneWithoutPlayersInput
  captain: Boolean
  personalInfo: PersonalInfoCreateOneInput
  position: PlayerPosition!
  altPosition: PlayerPosition
  assessment: AssessmentCreateOneInput
  foot: Foot
  from: WhereFromCreateOneInput
  injured: Boolean
  injury: InjuryCreateManyWithoutPlayerInput
  sizes: SizeCreateOneInput
  goals: GoalCreateManyWithoutPlayerInput
  assist: AssistCreateManyWithoutPlayerInput
  bookings: BookingCreateManyWithoutPlayerInput
  lineup: MatchCreateManyWithoutLineupInput
  bench: MatchCreateManyWithoutBenchInput
}

input PlayerCreateManyWithoutBenchInput {
  create: [PlayerCreateWithoutBenchInput!]
  connect: [PlayerWhereUniqueInput!]
}

input PlayerCreateManyWithoutLineupInput {
  create: [PlayerCreateWithoutLineupInput!]
  connect: [PlayerWhereUniqueInput!]
}

input PlayerCreateManyWithoutTeamInput {
  create: [PlayerCreateWithoutTeamInput!]
  connect: [PlayerWhereUniqueInput!]
}

input PlayerCreateOneInput {
  create: PlayerCreateInput
  connect: PlayerWhereUniqueInput
}

input PlayerCreateOneWithoutAssistInput {
  create: PlayerCreateWithoutAssistInput
  connect: PlayerWhereUniqueInput
}

input PlayerCreateOneWithoutBookingsInput {
  create: PlayerCreateWithoutBookingsInput
  connect: PlayerWhereUniqueInput
}

input PlayerCreateOneWithoutGoalsInput {
  create: PlayerCreateWithoutGoalsInput
  connect: PlayerWhereUniqueInput
}

input PlayerCreateOneWithoutInjuryInput {
  create: PlayerCreateWithoutInjuryInput
  connect: PlayerWhereUniqueInput
}

input PlayerCreateWithoutAssistInput {
  id: ID
  nick: String!
  shirtNumber: Int!
  imgUrl: String
  team: TeamCreateOneWithoutPlayersInput
  captain: Boolean
  personalInfo: PersonalInfoCreateOneInput
  position: PlayerPosition!
  altPosition: PlayerPosition
  assessment: AssessmentCreateOneInput
  foot: Foot
  from: WhereFromCreateOneInput
  injured: Boolean
  injury: InjuryCreateManyWithoutPlayerInput
  sizes: SizeCreateOneInput
  goals: GoalCreateManyWithoutPlayerInput
  bookings: BookingCreateManyWithoutPlayerInput
  lineup: MatchCreateManyWithoutLineupInput
  bench: MatchCreateManyWithoutBenchInput
}

input PlayerCreateWithoutBenchInput {
  id: ID
  nick: String!
  shirtNumber: Int!
  imgUrl: String
  team: TeamCreateOneWithoutPlayersInput
  captain: Boolean
  personalInfo: PersonalInfoCreateOneInput
  position: PlayerPosition!
  altPosition: PlayerPosition
  assessment: AssessmentCreateOneInput
  foot: Foot
  from: WhereFromCreateOneInput
  injured: Boolean
  injury: InjuryCreateManyWithoutPlayerInput
  sizes: SizeCreateOneInput
  goals: GoalCreateManyWithoutPlayerInput
  assist: AssistCreateManyWithoutPlayerInput
  bookings: BookingCreateManyWithoutPlayerInput
  lineup: MatchCreateManyWithoutLineupInput
}

input PlayerCreateWithoutBookingsInput {
  id: ID
  nick: String!
  shirtNumber: Int!
  imgUrl: String
  team: TeamCreateOneWithoutPlayersInput
  captain: Boolean
  personalInfo: PersonalInfoCreateOneInput
  position: PlayerPosition!
  altPosition: PlayerPosition
  assessment: AssessmentCreateOneInput
  foot: Foot
  from: WhereFromCreateOneInput
  injured: Boolean
  injury: InjuryCreateManyWithoutPlayerInput
  sizes: SizeCreateOneInput
  goals: GoalCreateManyWithoutPlayerInput
  assist: AssistCreateManyWithoutPlayerInput
  lineup: MatchCreateManyWithoutLineupInput
  bench: MatchCreateManyWithoutBenchInput
}

input PlayerCreateWithoutGoalsInput {
  id: ID
  nick: String!
  shirtNumber: Int!
  imgUrl: String
  team: TeamCreateOneWithoutPlayersInput
  captain: Boolean
  personalInfo: PersonalInfoCreateOneInput
  position: PlayerPosition!
  altPosition: PlayerPosition
  assessment: AssessmentCreateOneInput
  foot: Foot
  from: WhereFromCreateOneInput
  injured: Boolean
  injury: InjuryCreateManyWithoutPlayerInput
  sizes: SizeCreateOneInput
  assist: AssistCreateManyWithoutPlayerInput
  bookings: BookingCreateManyWithoutPlayerInput
  lineup: MatchCreateManyWithoutLineupInput
  bench: MatchCreateManyWithoutBenchInput
}

input PlayerCreateWithoutInjuryInput {
  id: ID
  nick: String!
  shirtNumber: Int!
  imgUrl: String
  team: TeamCreateOneWithoutPlayersInput
  captain: Boolean
  personalInfo: PersonalInfoCreateOneInput
  position: PlayerPosition!
  altPosition: PlayerPosition
  assessment: AssessmentCreateOneInput
  foot: Foot
  from: WhereFromCreateOneInput
  injured: Boolean
  sizes: SizeCreateOneInput
  goals: GoalCreateManyWithoutPlayerInput
  assist: AssistCreateManyWithoutPlayerInput
  bookings: BookingCreateManyWithoutPlayerInput
  lineup: MatchCreateManyWithoutLineupInput
  bench: MatchCreateManyWithoutBenchInput
}

input PlayerCreateWithoutLineupInput {
  id: ID
  nick: String!
  shirtNumber: Int!
  imgUrl: String
  team: TeamCreateOneWithoutPlayersInput
  captain: Boolean
  personalInfo: PersonalInfoCreateOneInput
  position: PlayerPosition!
  altPosition: PlayerPosition
  assessment: AssessmentCreateOneInput
  foot: Foot
  from: WhereFromCreateOneInput
  injured: Boolean
  injury: InjuryCreateManyWithoutPlayerInput
  sizes: SizeCreateOneInput
  goals: GoalCreateManyWithoutPlayerInput
  assist: AssistCreateManyWithoutPlayerInput
  bookings: BookingCreateManyWithoutPlayerInput
  bench: MatchCreateManyWithoutBenchInput
}

input PlayerCreateWithoutTeamInput {
  id: ID
  nick: String!
  shirtNumber: Int!
  imgUrl: String
  captain: Boolean
  personalInfo: PersonalInfoCreateOneInput
  position: PlayerPosition!
  altPosition: PlayerPosition
  assessment: AssessmentCreateOneInput
  foot: Foot
  from: WhereFromCreateOneInput
  injured: Boolean
  injury: InjuryCreateManyWithoutPlayerInput
  sizes: SizeCreateOneInput
  goals: GoalCreateManyWithoutPlayerInput
  assist: AssistCreateManyWithoutPlayerInput
  bookings: BookingCreateManyWithoutPlayerInput
  lineup: MatchCreateManyWithoutLineupInput
  bench: MatchCreateManyWithoutBenchInput
}

type PlayerEdge {
  node: Player!
  cursor: String!
}

enum PlayerOrderByInput {
  id_ASC
  id_DESC
  nick_ASC
  nick_DESC
  shirtNumber_ASC
  shirtNumber_DESC
  imgUrl_ASC
  imgUrl_DESC
  captain_ASC
  captain_DESC
  position_ASC
  position_DESC
  altPosition_ASC
  altPosition_DESC
  foot_ASC
  foot_DESC
  injured_ASC
  injured_DESC
}

enum PlayerPosition {
  GOALKEEPER
  CENTRE_BACK
  LEFT_BACK
  RIGHT_BACK
  DEFENSIVE_MIDFIELD
  CENTRE_MIDFIELD
  LEFT_MIDFIELD
  RIGHT_MIDFIELD
  ATTACKING_MIDFIELD
  LEFT_WINGER
  RIGHT_WINGER
  SECOND_STRIKE
  CENTRE_FORWARD
}

type PlayerPreviousValues {
  id: ID!
  nick: String!
  shirtNumber: Int!
  imgUrl: String
  captain: Boolean
  position: PlayerPosition!
  altPosition: PlayerPosition
  foot: Foot
  injured: Boolean
}

input PlayerScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  nick: String
  nick_not: String
  nick_in: [String!]
  nick_not_in: [String!]
  nick_lt: String
  nick_lte: String
  nick_gt: String
  nick_gte: String
  nick_contains: String
  nick_not_contains: String
  nick_starts_with: String
  nick_not_starts_with: String
  nick_ends_with: String
  nick_not_ends_with: String
  shirtNumber: Int
  shirtNumber_not: Int
  shirtNumber_in: [Int!]
  shirtNumber_not_in: [Int!]
  shirtNumber_lt: Int
  shirtNumber_lte: Int
  shirtNumber_gt: Int
  shirtNumber_gte: Int
  imgUrl: String
  imgUrl_not: String
  imgUrl_in: [String!]
  imgUrl_not_in: [String!]
  imgUrl_lt: String
  imgUrl_lte: String
  imgUrl_gt: String
  imgUrl_gte: String
  imgUrl_contains: String
  imgUrl_not_contains: String
  imgUrl_starts_with: String
  imgUrl_not_starts_with: String
  imgUrl_ends_with: String
  imgUrl_not_ends_with: String
  captain: Boolean
  captain_not: Boolean
  position: PlayerPosition
  position_not: PlayerPosition
  position_in: [PlayerPosition!]
  position_not_in: [PlayerPosition!]
  altPosition: PlayerPosition
  altPosition_not: PlayerPosition
  altPosition_in: [PlayerPosition!]
  altPosition_not_in: [PlayerPosition!]
  foot: Foot
  foot_not: Foot
  foot_in: [Foot!]
  foot_not_in: [Foot!]
  injured: Boolean
  injured_not: Boolean
  AND: [PlayerScalarWhereInput!]
  OR: [PlayerScalarWhereInput!]
  NOT: [PlayerScalarWhereInput!]
}

type PlayerSubscriptionPayload {
  mutation: MutationType!
  node: Player
  updatedFields: [String!]
  previousValues: PlayerPreviousValues
}

input PlayerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PlayerWhereInput
  AND: [PlayerSubscriptionWhereInput!]
}

input PlayerUpdateDataInput {
  nick: String
  shirtNumber: Int
  imgUrl: String
  team: TeamUpdateOneWithoutPlayersInput
  captain: Boolean
  personalInfo: PersonalInfoUpdateOneInput
  position: PlayerPosition
  altPosition: PlayerPosition
  assessment: AssessmentUpdateOneInput
  foot: Foot
  from: WhereFromUpdateOneInput
  injured: Boolean
  injury: InjuryUpdateManyWithoutPlayerInput
  sizes: SizeUpdateOneInput
  goals: GoalUpdateManyWithoutPlayerInput
  assist: AssistUpdateManyWithoutPlayerInput
  bookings: BookingUpdateManyWithoutPlayerInput
  lineup: MatchUpdateManyWithoutLineupInput
  bench: MatchUpdateManyWithoutBenchInput
}

input PlayerUpdateInput {
  nick: String
  shirtNumber: Int
  imgUrl: String
  team: TeamUpdateOneWithoutPlayersInput
  captain: Boolean
  personalInfo: PersonalInfoUpdateOneInput
  position: PlayerPosition
  altPosition: PlayerPosition
  assessment: AssessmentUpdateOneInput
  foot: Foot
  from: WhereFromUpdateOneInput
  injured: Boolean
  injury: InjuryUpdateManyWithoutPlayerInput
  sizes: SizeUpdateOneInput
  goals: GoalUpdateManyWithoutPlayerInput
  assist: AssistUpdateManyWithoutPlayerInput
  bookings: BookingUpdateManyWithoutPlayerInput
  lineup: MatchUpdateManyWithoutLineupInput
  bench: MatchUpdateManyWithoutBenchInput
}

input PlayerUpdateManyDataInput {
  nick: String
  shirtNumber: Int
  imgUrl: String
  captain: Boolean
  position: PlayerPosition
  altPosition: PlayerPosition
  foot: Foot
  injured: Boolean
}

input PlayerUpdateManyMutationInput {
  nick: String
  shirtNumber: Int
  imgUrl: String
  captain: Boolean
  position: PlayerPosition
  altPosition: PlayerPosition
  foot: Foot
  injured: Boolean
}

input PlayerUpdateManyWithoutBenchInput {
  create: [PlayerCreateWithoutBenchInput!]
  delete: [PlayerWhereUniqueInput!]
  connect: [PlayerWhereUniqueInput!]
  set: [PlayerWhereUniqueInput!]
  disconnect: [PlayerWhereUniqueInput!]
  update: [PlayerUpdateWithWhereUniqueWithoutBenchInput!]
  upsert: [PlayerUpsertWithWhereUniqueWithoutBenchInput!]
  deleteMany: [PlayerScalarWhereInput!]
  updateMany: [PlayerUpdateManyWithWhereNestedInput!]
}

input PlayerUpdateManyWithoutLineupInput {
  create: [PlayerCreateWithoutLineupInput!]
  delete: [PlayerWhereUniqueInput!]
  connect: [PlayerWhereUniqueInput!]
  set: [PlayerWhereUniqueInput!]
  disconnect: [PlayerWhereUniqueInput!]
  update: [PlayerUpdateWithWhereUniqueWithoutLineupInput!]
  upsert: [PlayerUpsertWithWhereUniqueWithoutLineupInput!]
  deleteMany: [PlayerScalarWhereInput!]
  updateMany: [PlayerUpdateManyWithWhereNestedInput!]
}

input PlayerUpdateManyWithoutTeamInput {
  create: [PlayerCreateWithoutTeamInput!]
  delete: [PlayerWhereUniqueInput!]
  connect: [PlayerWhereUniqueInput!]
  set: [PlayerWhereUniqueInput!]
  disconnect: [PlayerWhereUniqueInput!]
  update: [PlayerUpdateWithWhereUniqueWithoutTeamInput!]
  upsert: [PlayerUpsertWithWhereUniqueWithoutTeamInput!]
  deleteMany: [PlayerScalarWhereInput!]
  updateMany: [PlayerUpdateManyWithWhereNestedInput!]
}

input PlayerUpdateManyWithWhereNestedInput {
  where: PlayerScalarWhereInput!
  data: PlayerUpdateManyDataInput!
}

input PlayerUpdateOneRequiredInput {
  create: PlayerCreateInput
  update: PlayerUpdateDataInput
  upsert: PlayerUpsertNestedInput
  connect: PlayerWhereUniqueInput
}

input PlayerUpdateOneRequiredWithoutAssistInput {
  create: PlayerCreateWithoutAssistInput
  update: PlayerUpdateWithoutAssistDataInput
  upsert: PlayerUpsertWithoutAssistInput
  connect: PlayerWhereUniqueInput
}

input PlayerUpdateOneRequiredWithoutBookingsInput {
  create: PlayerCreateWithoutBookingsInput
  update: PlayerUpdateWithoutBookingsDataInput
  upsert: PlayerUpsertWithoutBookingsInput
  connect: PlayerWhereUniqueInput
}

input PlayerUpdateOneRequiredWithoutGoalsInput {
  create: PlayerCreateWithoutGoalsInput
  update: PlayerUpdateWithoutGoalsDataInput
  upsert: PlayerUpsertWithoutGoalsInput
  connect: PlayerWhereUniqueInput
}

input PlayerUpdateOneWithoutInjuryInput {
  create: PlayerCreateWithoutInjuryInput
  update: PlayerUpdateWithoutInjuryDataInput
  upsert: PlayerUpsertWithoutInjuryInput
  delete: Boolean
  disconnect: Boolean
  connect: PlayerWhereUniqueInput
}

input PlayerUpdateWithoutAssistDataInput {
  nick: String
  shirtNumber: Int
  imgUrl: String
  team: TeamUpdateOneWithoutPlayersInput
  captain: Boolean
  personalInfo: PersonalInfoUpdateOneInput
  position: PlayerPosition
  altPosition: PlayerPosition
  assessment: AssessmentUpdateOneInput
  foot: Foot
  from: WhereFromUpdateOneInput
  injured: Boolean
  injury: InjuryUpdateManyWithoutPlayerInput
  sizes: SizeUpdateOneInput
  goals: GoalUpdateManyWithoutPlayerInput
  bookings: BookingUpdateManyWithoutPlayerInput
  lineup: MatchUpdateManyWithoutLineupInput
  bench: MatchUpdateManyWithoutBenchInput
}

input PlayerUpdateWithoutBenchDataInput {
  nick: String
  shirtNumber: Int
  imgUrl: String
  team: TeamUpdateOneWithoutPlayersInput
  captain: Boolean
  personalInfo: PersonalInfoUpdateOneInput
  position: PlayerPosition
  altPosition: PlayerPosition
  assessment: AssessmentUpdateOneInput
  foot: Foot
  from: WhereFromUpdateOneInput
  injured: Boolean
  injury: InjuryUpdateManyWithoutPlayerInput
  sizes: SizeUpdateOneInput
  goals: GoalUpdateManyWithoutPlayerInput
  assist: AssistUpdateManyWithoutPlayerInput
  bookings: BookingUpdateManyWithoutPlayerInput
  lineup: MatchUpdateManyWithoutLineupInput
}

input PlayerUpdateWithoutBookingsDataInput {
  nick: String
  shirtNumber: Int
  imgUrl: String
  team: TeamUpdateOneWithoutPlayersInput
  captain: Boolean
  personalInfo: PersonalInfoUpdateOneInput
  position: PlayerPosition
  altPosition: PlayerPosition
  assessment: AssessmentUpdateOneInput
  foot: Foot
  from: WhereFromUpdateOneInput
  injured: Boolean
  injury: InjuryUpdateManyWithoutPlayerInput
  sizes: SizeUpdateOneInput
  goals: GoalUpdateManyWithoutPlayerInput
  assist: AssistUpdateManyWithoutPlayerInput
  lineup: MatchUpdateManyWithoutLineupInput
  bench: MatchUpdateManyWithoutBenchInput
}

input PlayerUpdateWithoutGoalsDataInput {
  nick: String
  shirtNumber: Int
  imgUrl: String
  team: TeamUpdateOneWithoutPlayersInput
  captain: Boolean
  personalInfo: PersonalInfoUpdateOneInput
  position: PlayerPosition
  altPosition: PlayerPosition
  assessment: AssessmentUpdateOneInput
  foot: Foot
  from: WhereFromUpdateOneInput
  injured: Boolean
  injury: InjuryUpdateManyWithoutPlayerInput
  sizes: SizeUpdateOneInput
  assist: AssistUpdateManyWithoutPlayerInput
  bookings: BookingUpdateManyWithoutPlayerInput
  lineup: MatchUpdateManyWithoutLineupInput
  bench: MatchUpdateManyWithoutBenchInput
}

input PlayerUpdateWithoutInjuryDataInput {
  nick: String
  shirtNumber: Int
  imgUrl: String
  team: TeamUpdateOneWithoutPlayersInput
  captain: Boolean
  personalInfo: PersonalInfoUpdateOneInput
  position: PlayerPosition
  altPosition: PlayerPosition
  assessment: AssessmentUpdateOneInput
  foot: Foot
  from: WhereFromUpdateOneInput
  injured: Boolean
  sizes: SizeUpdateOneInput
  goals: GoalUpdateManyWithoutPlayerInput
  assist: AssistUpdateManyWithoutPlayerInput
  bookings: BookingUpdateManyWithoutPlayerInput
  lineup: MatchUpdateManyWithoutLineupInput
  bench: MatchUpdateManyWithoutBenchInput
}

input PlayerUpdateWithoutLineupDataInput {
  nick: String
  shirtNumber: Int
  imgUrl: String
  team: TeamUpdateOneWithoutPlayersInput
  captain: Boolean
  personalInfo: PersonalInfoUpdateOneInput
  position: PlayerPosition
  altPosition: PlayerPosition
  assessment: AssessmentUpdateOneInput
  foot: Foot
  from: WhereFromUpdateOneInput
  injured: Boolean
  injury: InjuryUpdateManyWithoutPlayerInput
  sizes: SizeUpdateOneInput
  goals: GoalUpdateManyWithoutPlayerInput
  assist: AssistUpdateManyWithoutPlayerInput
  bookings: BookingUpdateManyWithoutPlayerInput
  bench: MatchUpdateManyWithoutBenchInput
}

input PlayerUpdateWithoutTeamDataInput {
  nick: String
  shirtNumber: Int
  imgUrl: String
  captain: Boolean
  personalInfo: PersonalInfoUpdateOneInput
  position: PlayerPosition
  altPosition: PlayerPosition
  assessment: AssessmentUpdateOneInput
  foot: Foot
  from: WhereFromUpdateOneInput
  injured: Boolean
  injury: InjuryUpdateManyWithoutPlayerInput
  sizes: SizeUpdateOneInput
  goals: GoalUpdateManyWithoutPlayerInput
  assist: AssistUpdateManyWithoutPlayerInput
  bookings: BookingUpdateManyWithoutPlayerInput
  lineup: MatchUpdateManyWithoutLineupInput
  bench: MatchUpdateManyWithoutBenchInput
}

input PlayerUpdateWithWhereUniqueWithoutBenchInput {
  where: PlayerWhereUniqueInput!
  data: PlayerUpdateWithoutBenchDataInput!
}

input PlayerUpdateWithWhereUniqueWithoutLineupInput {
  where: PlayerWhereUniqueInput!
  data: PlayerUpdateWithoutLineupDataInput!
}

input PlayerUpdateWithWhereUniqueWithoutTeamInput {
  where: PlayerWhereUniqueInput!
  data: PlayerUpdateWithoutTeamDataInput!
}

input PlayerUpsertNestedInput {
  update: PlayerUpdateDataInput!
  create: PlayerCreateInput!
}

input PlayerUpsertWithoutAssistInput {
  update: PlayerUpdateWithoutAssistDataInput!
  create: PlayerCreateWithoutAssistInput!
}

input PlayerUpsertWithoutBookingsInput {
  update: PlayerUpdateWithoutBookingsDataInput!
  create: PlayerCreateWithoutBookingsInput!
}

input PlayerUpsertWithoutGoalsInput {
  update: PlayerUpdateWithoutGoalsDataInput!
  create: PlayerCreateWithoutGoalsInput!
}

input PlayerUpsertWithoutInjuryInput {
  update: PlayerUpdateWithoutInjuryDataInput!
  create: PlayerCreateWithoutInjuryInput!
}

input PlayerUpsertWithWhereUniqueWithoutBenchInput {
  where: PlayerWhereUniqueInput!
  update: PlayerUpdateWithoutBenchDataInput!
  create: PlayerCreateWithoutBenchInput!
}

input PlayerUpsertWithWhereUniqueWithoutLineupInput {
  where: PlayerWhereUniqueInput!
  update: PlayerUpdateWithoutLineupDataInput!
  create: PlayerCreateWithoutLineupInput!
}

input PlayerUpsertWithWhereUniqueWithoutTeamInput {
  where: PlayerWhereUniqueInput!
  update: PlayerUpdateWithoutTeamDataInput!
  create: PlayerCreateWithoutTeamInput!
}

input PlayerWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  nick: String
  nick_not: String
  nick_in: [String!]
  nick_not_in: [String!]
  nick_lt: String
  nick_lte: String
  nick_gt: String
  nick_gte: String
  nick_contains: String
  nick_not_contains: String
  nick_starts_with: String
  nick_not_starts_with: String
  nick_ends_with: String
  nick_not_ends_with: String
  shirtNumber: Int
  shirtNumber_not: Int
  shirtNumber_in: [Int!]
  shirtNumber_not_in: [Int!]
  shirtNumber_lt: Int
  shirtNumber_lte: Int
  shirtNumber_gt: Int
  shirtNumber_gte: Int
  imgUrl: String
  imgUrl_not: String
  imgUrl_in: [String!]
  imgUrl_not_in: [String!]
  imgUrl_lt: String
  imgUrl_lte: String
  imgUrl_gt: String
  imgUrl_gte: String
  imgUrl_contains: String
  imgUrl_not_contains: String
  imgUrl_starts_with: String
  imgUrl_not_starts_with: String
  imgUrl_ends_with: String
  imgUrl_not_ends_with: String
  team: TeamWhereInput
  captain: Boolean
  captain_not: Boolean
  personalInfo: PersonalInfoWhereInput
  position: PlayerPosition
  position_not: PlayerPosition
  position_in: [PlayerPosition!]
  position_not_in: [PlayerPosition!]
  altPosition: PlayerPosition
  altPosition_not: PlayerPosition
  altPosition_in: [PlayerPosition!]
  altPosition_not_in: [PlayerPosition!]
  assessment: AssessmentWhereInput
  foot: Foot
  foot_not: Foot
  foot_in: [Foot!]
  foot_not_in: [Foot!]
  from: WhereFromWhereInput
  injured: Boolean
  injured_not: Boolean
  injury_some: InjuryWhereInput
  sizes: SizeWhereInput
  goals_some: GoalWhereInput
  assist_some: AssistWhereInput
  bookings_some: BookingWhereInput
  lineup_some: MatchWhereInput
  bench_some: MatchWhereInput
  AND: [PlayerWhereInput!]
}

input PlayerWhereUniqueInput {
  id: ID
}

type Query {
  assist(where: AssistWhereUniqueInput!): Assist
  assists(where: AssistWhereInput, orderBy: AssistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Assist]!
  assistsConnection(where: AssistWhereInput, orderBy: AssistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AssistConnection!
  booking(where: BookingWhereUniqueInput!): Booking
  bookings(where: BookingWhereInput, orderBy: BookingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Booking]!
  bookingsConnection(where: BookingWhereInput, orderBy: BookingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookingConnection!
  goal(where: GoalWhereUniqueInput!): Goal
  goals(where: GoalWhereInput, orderBy: GoalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Goal]!
  goalsConnection(where: GoalWhereInput, orderBy: GoalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GoalConnection!
  injury(where: InjuryWhereUniqueInput!): Injury
  injuries(where: InjuryWhereInput, orderBy: InjuryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Injury]!
  injuriesConnection(where: InjuryWhereInput, orderBy: InjuryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InjuryConnection!
  match(where: MatchWhereUniqueInput!): Match
  matches(where: MatchWhereInput, orderBy: MatchOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Match]!
  matchesConnection(where: MatchWhereInput, orderBy: MatchOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MatchConnection!
  player(where: PlayerWhereUniqueInput!): Player
  players(where: PlayerWhereInput, orderBy: PlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Player]!
  playersConnection(where: PlayerWhereInput, orderBy: PlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlayerConnection!
  staff(where: StaffWhereUniqueInput!): Staff
  staffs(where: StaffWhereInput, orderBy: StaffOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Staff]!
  staffsConnection(where: StaffWhereInput, orderBy: StaffOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StaffConnection!
  team(where: TeamWhereUniqueInput!): Team
  teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team]!
  teamsConnection(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TeamConnection!
  node(id: ID!): Node
}

type Score {
  id: ID!
  fullTime: HomeAndAway!
  halfTime: HomeAndAway
  extraTime: HomeAndAway
  penalties: HomeAndAway
}

input ScoreCreateInput {
  id: ID
  fullTime: HomeAndAwayCreateOneInput!
  halfTime: HomeAndAwayCreateOneInput
  extraTime: HomeAndAwayCreateOneInput
  penalties: HomeAndAwayCreateOneInput
}

input ScoreCreateOneInput {
  create: ScoreCreateInput
}

input ScoreUpdateDataInput {
  fullTime: HomeAndAwayUpdateOneRequiredInput
  halfTime: HomeAndAwayUpdateOneInput
  extraTime: HomeAndAwayUpdateOneInput
  penalties: HomeAndAwayUpdateOneInput
}

input ScoreUpdateOneRequiredInput {
  create: ScoreCreateInput
  update: ScoreUpdateDataInput
  upsert: ScoreUpsertNestedInput
  connect: ScoreWhereUniqueInput
}

input ScoreUpsertNestedInput {
  update: ScoreUpdateDataInput!
  create: ScoreCreateInput!
}

input ScoreWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  fullTime: HomeAndAwayWhereInput
  halfTime: HomeAndAwayWhereInput
  extraTime: HomeAndAwayWhereInput
  penalties: HomeAndAwayWhereInput
  AND: [ScoreWhereInput!]
}

input ScoreWhereUniqueInput {
  id: ID
}

type Size {
  id: ID!
  clothing: String
  step: Int
}

input SizeCreateInput {
  id: ID
  clothing: String
  step: Int
}

input SizeCreateOneInput {
  create: SizeCreateInput
}

input SizeUpdateDataInput {
  clothing: String
  step: Int
}

input SizeUpdateOneInput {
  create: SizeCreateInput
  update: SizeUpdateDataInput
  upsert: SizeUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: SizeWhereUniqueInput
}

input SizeUpsertNestedInput {
  update: SizeUpdateDataInput!
  create: SizeCreateInput!
}

input SizeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  clothing: String
  clothing_not: String
  clothing_in: [String!]
  clothing_not_in: [String!]
  clothing_lt: String
  clothing_lte: String
  clothing_gt: String
  clothing_gte: String
  clothing_contains: String
  clothing_not_contains: String
  clothing_starts_with: String
  clothing_not_starts_with: String
  clothing_ends_with: String
  clothing_not_ends_with: String
  step: Int
  step_not: Int
  step_in: [Int!]
  step_not_in: [Int!]
  step_lt: Int
  step_lte: Int
  step_gt: Int
  step_gte: Int
  AND: [SizeWhereInput!]
}

input SizeWhereUniqueInput {
  id: ID
}

type Staff {
  id: ID!
  nick: String!
  imgUrl: String
  team: Team
  personalInfo: StaffInfo
  from: StaffFrom
  sizes: StaffSize
  role: String
  matches(where: MatchWhereInput, orderBy: MatchOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Match!]
}

type StaffConnection {
  pageInfo: PageInfo!
  edges: [StaffEdge]!
  aggregate: AggregateStaff!
}

input StaffCreateInput {
  id: ID
  nick: String!
  imgUrl: String
  team: TeamCreateOneWithoutStaffInput
  personalInfo: StaffInfoCreateOneInput
  from: StaffFromCreateOneInput
  sizes: StaffSizeCreateOneInput
  role: String
  matches: MatchCreateManyWithoutStaffInput
}

input StaffCreateManyWithoutMatchesInput {
  create: [StaffCreateWithoutMatchesInput!]
  connect: [StaffWhereUniqueInput!]
}

input StaffCreateManyWithoutTeamInput {
  create: [StaffCreateWithoutTeamInput!]
  connect: [StaffWhereUniqueInput!]
}

input StaffCreateWithoutMatchesInput {
  id: ID
  nick: String!
  imgUrl: String
  team: TeamCreateOneWithoutStaffInput
  personalInfo: StaffInfoCreateOneInput
  from: StaffFromCreateOneInput
  sizes: StaffSizeCreateOneInput
  role: String
}

input StaffCreateWithoutTeamInput {
  id: ID
  nick: String!
  imgUrl: String
  personalInfo: StaffInfoCreateOneInput
  from: StaffFromCreateOneInput
  sizes: StaffSizeCreateOneInput
  role: String
  matches: MatchCreateManyWithoutStaffInput
}

type StaffEdge {
  node: Staff!
  cursor: String!
}

type StaffFrom {
  address: String
  number: Int
  town: String
  province: String
  countruy: String
  PC: Int
}

input StaffFromCreateInput {
  address: String
  number: Int
  town: String
  province: String
  countruy: String
  PC: Int
}

input StaffFromCreateOneInput {
  create: StaffFromCreateInput
}

input StaffFromUpdateDataInput {
  address: String
  number: Int
  town: String
  province: String
  countruy: String
  PC: Int
}

input StaffFromUpdateOneInput {
  create: StaffFromCreateInput
  update: StaffFromUpdateDataInput
  upsert: StaffFromUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
}

input StaffFromUpsertNestedInput {
  update: StaffFromUpdateDataInput!
  create: StaffFromCreateInput!
}

input StaffFromWhereInput {
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  number: Int
  number_not: Int
  number_in: [Int!]
  number_not_in: [Int!]
  number_lt: Int
  number_lte: Int
  number_gt: Int
  number_gte: Int
  town: String
  town_not: String
  town_in: [String!]
  town_not_in: [String!]
  town_lt: String
  town_lte: String
  town_gt: String
  town_gte: String
  town_contains: String
  town_not_contains: String
  town_starts_with: String
  town_not_starts_with: String
  town_ends_with: String
  town_not_ends_with: String
  province: String
  province_not: String
  province_in: [String!]
  province_not_in: [String!]
  province_lt: String
  province_lte: String
  province_gt: String
  province_gte: String
  province_contains: String
  province_not_contains: String
  province_starts_with: String
  province_not_starts_with: String
  province_ends_with: String
  province_not_ends_with: String
  countruy: String
  countruy_not: String
  countruy_in: [String!]
  countruy_not_in: [String!]
  countruy_lt: String
  countruy_lte: String
  countruy_gt: String
  countruy_gte: String
  countruy_contains: String
  countruy_not_contains: String
  countruy_starts_with: String
  countruy_not_starts_with: String
  countruy_ends_with: String
  countruy_not_ends_with: String
  PC: Int
  PC_not: Int
  PC_in: [Int!]
  PC_not_in: [Int!]
  PC_lt: Int
  PC_lte: Int
  PC_gt: Int
  PC_gte: Int
  AND: [StaffFromWhereInput!]
}

type StaffInfo {
  name: String!
  firstName: String!
  lastName: String
  dateOfBirth: DateTime
  tel: Int
  email: String
  dni: String!
}

input StaffInfoCreateInput {
  name: String!
  firstName: String!
  lastName: String
  dateOfBirth: DateTime
  tel: Int
  email: String
  dni: String!
}

input StaffInfoCreateOneInput {
  create: StaffInfoCreateInput
}

input StaffInfoUpdateDataInput {
  name: String
  firstName: String
  lastName: String
  dateOfBirth: DateTime
  tel: Int
  email: String
  dni: String
}

input StaffInfoUpdateOneInput {
  create: StaffInfoCreateInput
  update: StaffInfoUpdateDataInput
  upsert: StaffInfoUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
}

input StaffInfoUpsertNestedInput {
  update: StaffInfoUpdateDataInput!
  create: StaffInfoCreateInput!
}

input StaffInfoWhereInput {
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  dateOfBirth: DateTime
  dateOfBirth_not: DateTime
  dateOfBirth_in: [DateTime!]
  dateOfBirth_not_in: [DateTime!]
  dateOfBirth_lt: DateTime
  dateOfBirth_lte: DateTime
  dateOfBirth_gt: DateTime
  dateOfBirth_gte: DateTime
  tel: Int
  tel_not: Int
  tel_in: [Int!]
  tel_not_in: [Int!]
  tel_lt: Int
  tel_lte: Int
  tel_gt: Int
  tel_gte: Int
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  dni: String
  dni_not: String
  dni_in: [String!]
  dni_not_in: [String!]
  dni_lt: String
  dni_lte: String
  dni_gt: String
  dni_gte: String
  dni_contains: String
  dni_not_contains: String
  dni_starts_with: String
  dni_not_starts_with: String
  dni_ends_with: String
  dni_not_ends_with: String
  AND: [StaffInfoWhereInput!]
}

enum StaffOrderByInput {
  id_ASC
  id_DESC
  nick_ASC
  nick_DESC
  imgUrl_ASC
  imgUrl_DESC
  role_ASC
  role_DESC
}

type StaffPreviousValues {
  id: ID!
  nick: String!
  imgUrl: String
  role: String
}

input StaffScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  nick: String
  nick_not: String
  nick_in: [String!]
  nick_not_in: [String!]
  nick_lt: String
  nick_lte: String
  nick_gt: String
  nick_gte: String
  nick_contains: String
  nick_not_contains: String
  nick_starts_with: String
  nick_not_starts_with: String
  nick_ends_with: String
  nick_not_ends_with: String
  imgUrl: String
  imgUrl_not: String
  imgUrl_in: [String!]
  imgUrl_not_in: [String!]
  imgUrl_lt: String
  imgUrl_lte: String
  imgUrl_gt: String
  imgUrl_gte: String
  imgUrl_contains: String
  imgUrl_not_contains: String
  imgUrl_starts_with: String
  imgUrl_not_starts_with: String
  imgUrl_ends_with: String
  imgUrl_not_ends_with: String
  role: String
  role_not: String
  role_in: [String!]
  role_not_in: [String!]
  role_lt: String
  role_lte: String
  role_gt: String
  role_gte: String
  role_contains: String
  role_not_contains: String
  role_starts_with: String
  role_not_starts_with: String
  role_ends_with: String
  role_not_ends_with: String
  AND: [StaffScalarWhereInput!]
  OR: [StaffScalarWhereInput!]
  NOT: [StaffScalarWhereInput!]
}

type StaffSize {
  clothing: String
  step: Int
}

input StaffSizeCreateInput {
  clothing: String
  step: Int
}

input StaffSizeCreateOneInput {
  create: StaffSizeCreateInput
}

input StaffSizeUpdateDataInput {
  clothing: String
  step: Int
}

input StaffSizeUpdateOneInput {
  create: StaffSizeCreateInput
  update: StaffSizeUpdateDataInput
  upsert: StaffSizeUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
}

input StaffSizeUpsertNestedInput {
  update: StaffSizeUpdateDataInput!
  create: StaffSizeCreateInput!
}

input StaffSizeWhereInput {
  clothing: String
  clothing_not: String
  clothing_in: [String!]
  clothing_not_in: [String!]
  clothing_lt: String
  clothing_lte: String
  clothing_gt: String
  clothing_gte: String
  clothing_contains: String
  clothing_not_contains: String
  clothing_starts_with: String
  clothing_not_starts_with: String
  clothing_ends_with: String
  clothing_not_ends_with: String
  step: Int
  step_not: Int
  step_in: [Int!]
  step_not_in: [Int!]
  step_lt: Int
  step_lte: Int
  step_gt: Int
  step_gte: Int
  AND: [StaffSizeWhereInput!]
}

type StaffSubscriptionPayload {
  mutation: MutationType!
  node: Staff
  updatedFields: [String!]
  previousValues: StaffPreviousValues
}

input StaffSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StaffWhereInput
  AND: [StaffSubscriptionWhereInput!]
}

input StaffUpdateInput {
  nick: String
  imgUrl: String
  team: TeamUpdateOneWithoutStaffInput
  personalInfo: StaffInfoUpdateOneInput
  from: StaffFromUpdateOneInput
  sizes: StaffSizeUpdateOneInput
  role: String
  matches: MatchUpdateManyWithoutStaffInput
}

input StaffUpdateManyDataInput {
  nick: String
  imgUrl: String
  role: String
}

input StaffUpdateManyMutationInput {
  nick: String
  imgUrl: String
  role: String
}

input StaffUpdateManyWithoutMatchesInput {
  create: [StaffCreateWithoutMatchesInput!]
  delete: [StaffWhereUniqueInput!]
  connect: [StaffWhereUniqueInput!]
  set: [StaffWhereUniqueInput!]
  disconnect: [StaffWhereUniqueInput!]
  update: [StaffUpdateWithWhereUniqueWithoutMatchesInput!]
  upsert: [StaffUpsertWithWhereUniqueWithoutMatchesInput!]
  deleteMany: [StaffScalarWhereInput!]
  updateMany: [StaffUpdateManyWithWhereNestedInput!]
}

input StaffUpdateManyWithoutTeamInput {
  create: [StaffCreateWithoutTeamInput!]
  delete: [StaffWhereUniqueInput!]
  connect: [StaffWhereUniqueInput!]
  set: [StaffWhereUniqueInput!]
  disconnect: [StaffWhereUniqueInput!]
  update: [StaffUpdateWithWhereUniqueWithoutTeamInput!]
  upsert: [StaffUpsertWithWhereUniqueWithoutTeamInput!]
  deleteMany: [StaffScalarWhereInput!]
  updateMany: [StaffUpdateManyWithWhereNestedInput!]
}

input StaffUpdateManyWithWhereNestedInput {
  where: StaffScalarWhereInput!
  data: StaffUpdateManyDataInput!
}

input StaffUpdateWithoutMatchesDataInput {
  nick: String
  imgUrl: String
  team: TeamUpdateOneWithoutStaffInput
  personalInfo: StaffInfoUpdateOneInput
  from: StaffFromUpdateOneInput
  sizes: StaffSizeUpdateOneInput
  role: String
}

input StaffUpdateWithoutTeamDataInput {
  nick: String
  imgUrl: String
  personalInfo: StaffInfoUpdateOneInput
  from: StaffFromUpdateOneInput
  sizes: StaffSizeUpdateOneInput
  role: String
  matches: MatchUpdateManyWithoutStaffInput
}

input StaffUpdateWithWhereUniqueWithoutMatchesInput {
  where: StaffWhereUniqueInput!
  data: StaffUpdateWithoutMatchesDataInput!
}

input StaffUpdateWithWhereUniqueWithoutTeamInput {
  where: StaffWhereUniqueInput!
  data: StaffUpdateWithoutTeamDataInput!
}

input StaffUpsertWithWhereUniqueWithoutMatchesInput {
  where: StaffWhereUniqueInput!
  update: StaffUpdateWithoutMatchesDataInput!
  create: StaffCreateWithoutMatchesInput!
}

input StaffUpsertWithWhereUniqueWithoutTeamInput {
  where: StaffWhereUniqueInput!
  update: StaffUpdateWithoutTeamDataInput!
  create: StaffCreateWithoutTeamInput!
}

input StaffWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  nick: String
  nick_not: String
  nick_in: [String!]
  nick_not_in: [String!]
  nick_lt: String
  nick_lte: String
  nick_gt: String
  nick_gte: String
  nick_contains: String
  nick_not_contains: String
  nick_starts_with: String
  nick_not_starts_with: String
  nick_ends_with: String
  nick_not_ends_with: String
  imgUrl: String
  imgUrl_not: String
  imgUrl_in: [String!]
  imgUrl_not_in: [String!]
  imgUrl_lt: String
  imgUrl_lte: String
  imgUrl_gt: String
  imgUrl_gte: String
  imgUrl_contains: String
  imgUrl_not_contains: String
  imgUrl_starts_with: String
  imgUrl_not_starts_with: String
  imgUrl_ends_with: String
  imgUrl_not_ends_with: String
  team: TeamWhereInput
  personalInfo: StaffInfoWhereInput
  from: StaffFromWhereInput
  sizes: StaffSizeWhereInput
  role: String
  role_not: String
  role_in: [String!]
  role_not_in: [String!]
  role_lt: String
  role_lte: String
  role_gt: String
  role_gte: String
  role_contains: String
  role_not_contains: String
  role_starts_with: String
  role_not_starts_with: String
  role_ends_with: String
  role_not_ends_with: String
  matches_some: MatchWhereInput
  AND: [StaffWhereInput!]
}

input StaffWhereUniqueInput {
  id: ID
}

type Subscription {
  assist(where: AssistSubscriptionWhereInput): AssistSubscriptionPayload
  booking(where: BookingSubscriptionWhereInput): BookingSubscriptionPayload
  goal(where: GoalSubscriptionWhereInput): GoalSubscriptionPayload
  injury(where: InjurySubscriptionWhereInput): InjurySubscriptionPayload
  match(where: MatchSubscriptionWhereInput): MatchSubscriptionPayload
  player(where: PlayerSubscriptionWhereInput): PlayerSubscriptionPayload
  staff(where: StaffSubscriptionWhereInput): StaffSubscriptionPayload
  team(where: TeamSubscriptionWhereInput): TeamSubscriptionPayload
}

type Substitutions {
  id: ID!
  playerIn: Player!
  playerOut: Player!
  min: Float
}

input SubstitutionsCreateInput {
  id: ID
  playerIn: PlayerCreateOneInput!
  playerOut: PlayerCreateOneInput!
  min: Float
}

input SubstitutionsCreateManyInput {
  create: [SubstitutionsCreateInput!]
}

input SubstitutionsRestrictedWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  min: Float
  min_not: Float
  min_in: [Float!]
  min_not_in: [Float!]
  min_lt: Float
  min_lte: Float
  min_gt: Float
  min_gte: Float
  AND: [SubstitutionsRestrictedWhereInput!]
}

input SubstitutionsScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  min: Float
  min_not: Float
  min_in: [Float!]
  min_not_in: [Float!]
  min_lt: Float
  min_lte: Float
  min_gt: Float
  min_gte: Float
  AND: [SubstitutionsScalarWhereInput!]
  OR: [SubstitutionsScalarWhereInput!]
  NOT: [SubstitutionsScalarWhereInput!]
}

input SubstitutionsUpdateDataInput {
  playerIn: PlayerUpdateOneRequiredInput
  playerOut: PlayerUpdateOneRequiredInput
  min: Float
}

input SubstitutionsUpdateManyDataInput {
  min: Float
}

input SubstitutionsUpdateManyInput {
  create: [SubstitutionsCreateInput!]
  update: [SubstitutionsUpdateWithWhereUniqueNestedInput!]
  upsert: [SubstitutionsUpsertWithWhereUniqueNestedInput!]
  delete: [SubstitutionsWhereUniqueInput!]
  deleteMany: [SubstitutionsScalarWhereInput!]
  updateMany: [SubstitutionsUpdateManyWithWhereNestedInput!]
}

input SubstitutionsUpdateManyWithWhereNestedInput {
  where: SubstitutionsScalarWhereInput!
  data: SubstitutionsUpdateManyDataInput!
}

input SubstitutionsUpdateWithWhereUniqueNestedInput {
  where: SubstitutionsWhereUniqueInput!
  data: SubstitutionsUpdateDataInput!
}

input SubstitutionsUpsertWithWhereUniqueNestedInput {
  where: SubstitutionsWhereUniqueInput!
  update: SubstitutionsUpdateDataInput!
  create: SubstitutionsCreateInput!
}

input SubstitutionsWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  playerIn: PlayerWhereInput
  playerOut: PlayerWhereInput
  min: Float
  min_not: Float
  min_in: [Float!]
  min_not_in: [Float!]
  min_lt: Float
  min_lte: Float
  min_gt: Float
  min_gte: Float
  AND: [SubstitutionsWhereInput!]
}

input SubstitutionsWhereUniqueInput {
  id: ID
}

type Team {
  id: ID!
  logoUrl: String
  name: String!
  players(where: PlayerWhereInput, orderBy: PlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Player!]
  staff(where: StaffWhereInput, orderBy: StaffOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Staff!]
}

type TeamConnection {
  pageInfo: PageInfo!
  edges: [TeamEdge]!
  aggregate: AggregateTeam!
}

input TeamCreateInput {
  id: ID
  logoUrl: String
  name: String!
  players: PlayerCreateManyWithoutTeamInput
  staff: StaffCreateManyWithoutTeamInput
}

input TeamCreateOneInput {
  create: TeamCreateInput
  connect: TeamWhereUniqueInput
}

input TeamCreateOneWithoutPlayersInput {
  create: TeamCreateWithoutPlayersInput
  connect: TeamWhereUniqueInput
}

input TeamCreateOneWithoutStaffInput {
  create: TeamCreateWithoutStaffInput
  connect: TeamWhereUniqueInput
}

input TeamCreateWithoutPlayersInput {
  id: ID
  logoUrl: String
  name: String!
  staff: StaffCreateManyWithoutTeamInput
}

input TeamCreateWithoutStaffInput {
  id: ID
  logoUrl: String
  name: String!
  players: PlayerCreateManyWithoutTeamInput
}

type TeamEdge {
  node: Team!
  cursor: String!
}

enum TeamOrderByInput {
  id_ASC
  id_DESC
  logoUrl_ASC
  logoUrl_DESC
  name_ASC
  name_DESC
}

type TeamPreviousValues {
  id: ID!
  logoUrl: String
  name: String!
}

type TeamSubscriptionPayload {
  mutation: MutationType!
  node: Team
  updatedFields: [String!]
  previousValues: TeamPreviousValues
}

input TeamSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TeamWhereInput
  AND: [TeamSubscriptionWhereInput!]
}

input TeamUpdateDataInput {
  logoUrl: String
  name: String
  players: PlayerUpdateManyWithoutTeamInput
  staff: StaffUpdateManyWithoutTeamInput
}

input TeamUpdateInput {
  logoUrl: String
  name: String
  players: PlayerUpdateManyWithoutTeamInput
  staff: StaffUpdateManyWithoutTeamInput
}

input TeamUpdateManyMutationInput {
  logoUrl: String
  name: String
}

input TeamUpdateOneInput {
  create: TeamCreateInput
  update: TeamUpdateDataInput
  upsert: TeamUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: TeamWhereUniqueInput
}

input TeamUpdateOneWithoutPlayersInput {
  create: TeamCreateWithoutPlayersInput
  update: TeamUpdateWithoutPlayersDataInput
  upsert: TeamUpsertWithoutPlayersInput
  delete: Boolean
  disconnect: Boolean
  connect: TeamWhereUniqueInput
}

input TeamUpdateOneWithoutStaffInput {
  create: TeamCreateWithoutStaffInput
  update: TeamUpdateWithoutStaffDataInput
  upsert: TeamUpsertWithoutStaffInput
  delete: Boolean
  disconnect: Boolean
  connect: TeamWhereUniqueInput
}

input TeamUpdateWithoutPlayersDataInput {
  logoUrl: String
  name: String
  staff: StaffUpdateManyWithoutTeamInput
}

input TeamUpdateWithoutStaffDataInput {
  logoUrl: String
  name: String
  players: PlayerUpdateManyWithoutTeamInput
}

input TeamUpsertNestedInput {
  update: TeamUpdateDataInput!
  create: TeamCreateInput!
}

input TeamUpsertWithoutPlayersInput {
  update: TeamUpdateWithoutPlayersDataInput!
  create: TeamCreateWithoutPlayersInput!
}

input TeamUpsertWithoutStaffInput {
  update: TeamUpdateWithoutStaffDataInput!
  create: TeamCreateWithoutStaffInput!
}

input TeamWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  logoUrl: String
  logoUrl_not: String
  logoUrl_in: [String!]
  logoUrl_not_in: [String!]
  logoUrl_lt: String
  logoUrl_lte: String
  logoUrl_gt: String
  logoUrl_gte: String
  logoUrl_contains: String
  logoUrl_not_contains: String
  logoUrl_starts_with: String
  logoUrl_not_starts_with: String
  logoUrl_ends_with: String
  logoUrl_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  players_some: PlayerWhereInput
  staff_some: StaffWhereInput
  AND: [TeamWhereInput!]
}

input TeamWhereUniqueInput {
  id: ID
  name: String
}

type WhereFrom {
  id: ID!
  address: String
  number: Int
  town: String
  province: String
  countruy: String
  PC: Int
  placeOfBirth: String
  nationality: String
  extra: Boolean
}

input WhereFromCreateInput {
  id: ID
  address: String
  number: Int
  town: String
  province: String
  countruy: String
  PC: Int
  placeOfBirth: String
  nationality: String
  extra: Boolean
}

input WhereFromCreateOneInput {
  create: WhereFromCreateInput
}

input WhereFromUpdateDataInput {
  address: String
  number: Int
  town: String
  province: String
  countruy: String
  PC: Int
  placeOfBirth: String
  nationality: String
  extra: Boolean
}

input WhereFromUpdateOneInput {
  create: WhereFromCreateInput
  update: WhereFromUpdateDataInput
  upsert: WhereFromUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: WhereFromWhereUniqueInput
}

input WhereFromUpsertNestedInput {
  update: WhereFromUpdateDataInput!
  create: WhereFromCreateInput!
}

input WhereFromWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  number: Int
  number_not: Int
  number_in: [Int!]
  number_not_in: [Int!]
  number_lt: Int
  number_lte: Int
  number_gt: Int
  number_gte: Int
  town: String
  town_not: String
  town_in: [String!]
  town_not_in: [String!]
  town_lt: String
  town_lte: String
  town_gt: String
  town_gte: String
  town_contains: String
  town_not_contains: String
  town_starts_with: String
  town_not_starts_with: String
  town_ends_with: String
  town_not_ends_with: String
  province: String
  province_not: String
  province_in: [String!]
  province_not_in: [String!]
  province_lt: String
  province_lte: String
  province_gt: String
  province_gte: String
  province_contains: String
  province_not_contains: String
  province_starts_with: String
  province_not_starts_with: String
  province_ends_with: String
  province_not_ends_with: String
  countruy: String
  countruy_not: String
  countruy_in: [String!]
  countruy_not_in: [String!]
  countruy_lt: String
  countruy_lte: String
  countruy_gt: String
  countruy_gte: String
  countruy_contains: String
  countruy_not_contains: String
  countruy_starts_with: String
  countruy_not_starts_with: String
  countruy_ends_with: String
  countruy_not_ends_with: String
  PC: Int
  PC_not: Int
  PC_in: [Int!]
  PC_not_in: [Int!]
  PC_lt: Int
  PC_lte: Int
  PC_gt: Int
  PC_gte: Int
  placeOfBirth: String
  placeOfBirth_not: String
  placeOfBirth_in: [String!]
  placeOfBirth_not_in: [String!]
  placeOfBirth_lt: String
  placeOfBirth_lte: String
  placeOfBirth_gt: String
  placeOfBirth_gte: String
  placeOfBirth_contains: String
  placeOfBirth_not_contains: String
  placeOfBirth_starts_with: String
  placeOfBirth_not_starts_with: String
  placeOfBirth_ends_with: String
  placeOfBirth_not_ends_with: String
  nationality: String
  nationality_not: String
  nationality_in: [String!]
  nationality_not_in: [String!]
  nationality_lt: String
  nationality_lte: String
  nationality_gt: String
  nationality_gte: String
  nationality_contains: String
  nationality_not_contains: String
  nationality_starts_with: String
  nationality_not_starts_with: String
  nationality_ends_with: String
  nationality_not_ends_with: String
  extra: Boolean
  extra_not: Boolean
  AND: [WhereFromWhereInput!]
}

input WhereFromWhereUniqueInput {
  id: ID
}
`
      }
    