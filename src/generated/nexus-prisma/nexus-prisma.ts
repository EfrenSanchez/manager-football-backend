/**
 * This file was automatically generated by nexus-prisma@0.3.5
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Player: PlayerObject
      Team: TeamObject
      Staff: StaffObject
      StaffInfo: StaffInfoObject
      StaffFrom: StaffFromObject
      StaffSize: StaffSizeObject
      Match: MatchObject
      Score: ScoreObject
      HomeAndAway: HomeAndAwayObject
      Goal: GoalObject
      Assist: AssistObject
      Substitutions: SubstitutionsObject
      Booking: BookingObject
      PersonalInfo: PersonalInfoObject
      Assessment: AssessmentObject
      WhereFrom: WhereFromObject
      Injury: InjuryObject
      Size: SizeObject
      PlayerConnection: PlayerConnectionObject
      PageInfo: PageInfoObject
      PlayerEdge: PlayerEdgeObject
      AggregatePlayer: AggregatePlayerObject
      InjuryConnection: InjuryConnectionObject
      InjuryEdge: InjuryEdgeObject
      AggregateInjury: AggregateInjuryObject
      MatchConnection: MatchConnectionObject
      MatchEdge: MatchEdgeObject
      AggregateMatch: AggregateMatchObject
      GoalConnection: GoalConnectionObject
      GoalEdge: GoalEdgeObject
      AggregateGoal: AggregateGoalObject
      AssistConnection: AssistConnectionObject
      AssistEdge: AssistEdgeObject
      AggregateAssist: AggregateAssistObject
      BookingConnection: BookingConnectionObject
      BookingEdge: BookingEdgeObject
      AggregateBooking: AggregateBookingObject
      TeamConnection: TeamConnectionObject
      TeamEdge: TeamEdgeObject
      AggregateTeam: AggregateTeamObject
      StaffConnection: StaffConnectionObject
      StaffEdge: StaffEdgeObject
      AggregateStaff: AggregateStaffObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      PlayerSubscriptionPayload: PlayerSubscriptionPayloadObject
      PlayerPreviousValues: PlayerPreviousValuesObject
      InjurySubscriptionPayload: InjurySubscriptionPayloadObject
      InjuryPreviousValues: InjuryPreviousValuesObject
      MatchSubscriptionPayload: MatchSubscriptionPayloadObject
      MatchPreviousValues: MatchPreviousValuesObject
      GoalSubscriptionPayload: GoalSubscriptionPayloadObject
      GoalPreviousValues: GoalPreviousValuesObject
      AssistSubscriptionPayload: AssistSubscriptionPayloadObject
      AssistPreviousValues: AssistPreviousValuesObject
      BookingSubscriptionPayload: BookingSubscriptionPayloadObject
      BookingPreviousValues: BookingPreviousValuesObject
      TeamSubscriptionPayload: TeamSubscriptionPayloadObject
      TeamPreviousValues: TeamPreviousValuesObject
      StaffSubscriptionPayload: StaffSubscriptionPayloadObject
      StaffPreviousValues: StaffPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Player: PlayerFieldDetails
      Team: TeamFieldDetails
      Staff: StaffFieldDetails
      StaffInfo: StaffInfoFieldDetails
      StaffFrom: StaffFromFieldDetails
      StaffSize: StaffSizeFieldDetails
      Match: MatchFieldDetails
      Score: ScoreFieldDetails
      HomeAndAway: HomeAndAwayFieldDetails
      Goal: GoalFieldDetails
      Assist: AssistFieldDetails
      Substitutions: SubstitutionsFieldDetails
      Booking: BookingFieldDetails
      PersonalInfo: PersonalInfoFieldDetails
      Assessment: AssessmentFieldDetails
      WhereFrom: WhereFromFieldDetails
      Injury: InjuryFieldDetails
      Size: SizeFieldDetails
      PlayerConnection: PlayerConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      PlayerEdge: PlayerEdgeFieldDetails
      AggregatePlayer: AggregatePlayerFieldDetails
      InjuryConnection: InjuryConnectionFieldDetails
      InjuryEdge: InjuryEdgeFieldDetails
      AggregateInjury: AggregateInjuryFieldDetails
      MatchConnection: MatchConnectionFieldDetails
      MatchEdge: MatchEdgeFieldDetails
      AggregateMatch: AggregateMatchFieldDetails
      GoalConnection: GoalConnectionFieldDetails
      GoalEdge: GoalEdgeFieldDetails
      AggregateGoal: AggregateGoalFieldDetails
      AssistConnection: AssistConnectionFieldDetails
      AssistEdge: AssistEdgeFieldDetails
      AggregateAssist: AggregateAssistFieldDetails
      BookingConnection: BookingConnectionFieldDetails
      BookingEdge: BookingEdgeFieldDetails
      AggregateBooking: AggregateBookingFieldDetails
      TeamConnection: TeamConnectionFieldDetails
      TeamEdge: TeamEdgeFieldDetails
      AggregateTeam: AggregateTeamFieldDetails
      StaffConnection: StaffConnectionFieldDetails
      StaffEdge: StaffEdgeFieldDetails
      AggregateStaff: AggregateStaffFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      PlayerSubscriptionPayload: PlayerSubscriptionPayloadFieldDetails
      PlayerPreviousValues: PlayerPreviousValuesFieldDetails
      InjurySubscriptionPayload: InjurySubscriptionPayloadFieldDetails
      InjuryPreviousValues: InjuryPreviousValuesFieldDetails
      MatchSubscriptionPayload: MatchSubscriptionPayloadFieldDetails
      MatchPreviousValues: MatchPreviousValuesFieldDetails
      GoalSubscriptionPayload: GoalSubscriptionPayloadFieldDetails
      GoalPreviousValues: GoalPreviousValuesFieldDetails
      AssistSubscriptionPayload: AssistSubscriptionPayloadFieldDetails
      AssistPreviousValues: AssistPreviousValuesFieldDetails
      BookingSubscriptionPayload: BookingSubscriptionPayloadFieldDetails
      BookingPreviousValues: BookingPreviousValuesFieldDetails
      TeamSubscriptionPayload: TeamSubscriptionPayloadFieldDetails
      TeamPreviousValues: TeamPreviousValuesFieldDetails
      StaffSubscriptionPayload: StaffSubscriptionPayloadFieldDetails
      StaffPreviousValues: StaffPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      PlayerWhereUniqueInput: PlayerWhereUniqueInputInputObject
      PlayerWhereInput: PlayerWhereInputInputObject
      TeamWhereInput: TeamWhereInputInputObject
      StaffWhereInput: StaffWhereInputInputObject
      StaffInfoWhereInput: StaffInfoWhereInputInputObject
      StaffFromWhereInput: StaffFromWhereInputInputObject
      StaffSizeWhereInput: StaffSizeWhereInputInputObject
      MatchWhereInput: MatchWhereInputInputObject
      ScoreWhereInput: ScoreWhereInputInputObject
      HomeAndAwayWhereInput: HomeAndAwayWhereInputInputObject
      GoalWhereInput: GoalWhereInputInputObject
      AssistWhereInput: AssistWhereInputInputObject
      SubstitutionsWhereInput: SubstitutionsWhereInputInputObject
      SubstitutionsRestrictedWhereInput: SubstitutionsRestrictedWhereInputInputObject
      BookingWhereInput: BookingWhereInputInputObject
      PersonalInfoWhereInput: PersonalInfoWhereInputInputObject
      AssessmentWhereInput: AssessmentWhereInputInputObject
      WhereFromWhereInput: WhereFromWhereInputInputObject
      InjuryWhereInput: InjuryWhereInputInputObject
      SizeWhereInput: SizeWhereInputInputObject
      InjuryWhereUniqueInput: InjuryWhereUniqueInputInputObject
      MatchWhereUniqueInput: MatchWhereUniqueInputInputObject
      GoalWhereUniqueInput: GoalWhereUniqueInputInputObject
      AssistWhereUniqueInput: AssistWhereUniqueInputInputObject
      BookingWhereUniqueInput: BookingWhereUniqueInputInputObject
      TeamWhereUniqueInput: TeamWhereUniqueInputInputObject
      StaffWhereUniqueInput: StaffWhereUniqueInputInputObject
      PlayerCreateInput: PlayerCreateInputInputObject
      TeamCreateOneWithoutPlayersInput: TeamCreateOneWithoutPlayersInputInputObject
      TeamCreateWithoutPlayersInput: TeamCreateWithoutPlayersInputInputObject
      StaffCreateManyWithoutTeamInput: StaffCreateManyWithoutTeamInputInputObject
      StaffCreateWithoutTeamInput: StaffCreateWithoutTeamInputInputObject
      StaffInfoCreateOneInput: StaffInfoCreateOneInputInputObject
      StaffInfoCreateInput: StaffInfoCreateInputInputObject
      StaffFromCreateOneInput: StaffFromCreateOneInputInputObject
      StaffFromCreateInput: StaffFromCreateInputInputObject
      StaffSizeCreateOneInput: StaffSizeCreateOneInputInputObject
      StaffSizeCreateInput: StaffSizeCreateInputInputObject
      MatchCreateManyWithoutStaffInput: MatchCreateManyWithoutStaffInputInputObject
      MatchCreateWithoutStaffInput: MatchCreateWithoutStaffInputInputObject
      TeamCreateOneInput: TeamCreateOneInputInputObject
      TeamCreateInput: TeamCreateInputInputObject
      PlayerCreateManyWithoutTeamInput: PlayerCreateManyWithoutTeamInputInputObject
      PlayerCreateWithoutTeamInput: PlayerCreateWithoutTeamInputInputObject
      PersonalInfoCreateOneInput: PersonalInfoCreateOneInputInputObject
      PersonalInfoCreateInput: PersonalInfoCreateInputInputObject
      AssessmentCreateOneInput: AssessmentCreateOneInputInputObject
      AssessmentCreateInput: AssessmentCreateInputInputObject
      WhereFromCreateOneInput: WhereFromCreateOneInputInputObject
      WhereFromCreateInput: WhereFromCreateInputInputObject
      InjuryCreateManyWithoutPlayerInput: InjuryCreateManyWithoutPlayerInputInputObject
      InjuryCreateWithoutPlayerInput: InjuryCreateWithoutPlayerInputInputObject
      SizeCreateOneInput: SizeCreateOneInputInputObject
      SizeCreateInput: SizeCreateInputInputObject
      GoalCreateManyWithoutPlayerInput: GoalCreateManyWithoutPlayerInputInputObject
      GoalCreateWithoutPlayerInput: GoalCreateWithoutPlayerInputInputObject
      MatchCreateOneWithoutGoalsInput: MatchCreateOneWithoutGoalsInputInputObject
      MatchCreateWithoutGoalsInput: MatchCreateWithoutGoalsInputInputObject
      PlayerCreateOneInput: PlayerCreateOneInputInputObject
      StaffCreateManyWithoutMatchesInput: StaffCreateManyWithoutMatchesInputInputObject
      StaffCreateWithoutMatchesInput: StaffCreateWithoutMatchesInputInputObject
      TeamCreateOneWithoutStaffInput: TeamCreateOneWithoutStaffInputInputObject
      TeamCreateWithoutStaffInput: TeamCreateWithoutStaffInputInputObject
      PlayerCreateManyWithoutLineupInput: PlayerCreateManyWithoutLineupInputInputObject
      PlayerCreateWithoutLineupInput: PlayerCreateWithoutLineupInputInputObject
      AssistCreateManyWithoutPlayerInput: AssistCreateManyWithoutPlayerInputInputObject
      AssistCreateWithoutPlayerInput: AssistCreateWithoutPlayerInputInputObject
      MatchCreateOneWithoutAssistInput: MatchCreateOneWithoutAssistInputInputObject
      MatchCreateWithoutAssistInput: MatchCreateWithoutAssistInputInputObject
      PlayerCreateManyWithoutBenchInput: PlayerCreateManyWithoutBenchInputInputObject
      PlayerCreateWithoutBenchInput: PlayerCreateWithoutBenchInputInputObject
      BookingCreateManyWithoutPlayerInput: BookingCreateManyWithoutPlayerInputInputObject
      BookingCreateWithoutPlayerInput: BookingCreateWithoutPlayerInputInputObject
      MatchCreateOneWithoutBookingsInput: MatchCreateOneWithoutBookingsInputInputObject
      MatchCreateWithoutBookingsInput: MatchCreateWithoutBookingsInputInputObject
      ScoreCreateOneInput: ScoreCreateOneInputInputObject
      ScoreCreateInput: ScoreCreateInputInputObject
      HomeAndAwayCreateOneInput: HomeAndAwayCreateOneInputInputObject
      HomeAndAwayCreateInput: HomeAndAwayCreateInputInputObject
      GoalCreateManyWithoutMatchInput: GoalCreateManyWithoutMatchInputInputObject
      GoalCreateWithoutMatchInput: GoalCreateWithoutMatchInputInputObject
      PlayerCreateOneWithoutGoalsInput: PlayerCreateOneWithoutGoalsInputInputObject
      PlayerCreateWithoutGoalsInput: PlayerCreateWithoutGoalsInputInputObject
      MatchCreateManyWithoutLineupInput: MatchCreateManyWithoutLineupInputInputObject
      MatchCreateWithoutLineupInput: MatchCreateWithoutLineupInputInputObject
      AssistCreateManyWithoutMatchInput: AssistCreateManyWithoutMatchInputInputObject
      AssistCreateWithoutMatchInput: AssistCreateWithoutMatchInputInputObject
      PlayerCreateOneWithoutAssistInput: PlayerCreateOneWithoutAssistInputInputObject
      PlayerCreateWithoutAssistInput: PlayerCreateWithoutAssistInputInputObject
      MatchCreateManyWithoutBenchInput: MatchCreateManyWithoutBenchInputInputObject
      MatchCreateWithoutBenchInput: MatchCreateWithoutBenchInputInputObject
      SubstitutionsCreateManyInput: SubstitutionsCreateManyInputInputObject
      SubstitutionsCreateInput: SubstitutionsCreateInputInputObject
      BookingCreateManyWithoutMatchInput: BookingCreateManyWithoutMatchInputInputObject
      BookingCreateWithoutMatchInput: BookingCreateWithoutMatchInputInputObject
      PlayerCreateOneWithoutBookingsInput: PlayerCreateOneWithoutBookingsInputInputObject
      PlayerCreateWithoutBookingsInput: PlayerCreateWithoutBookingsInputInputObject
      PlayerUpdateInput: PlayerUpdateInputInputObject
      TeamUpdateOneWithoutPlayersInput: TeamUpdateOneWithoutPlayersInputInputObject
      TeamUpdateWithoutPlayersDataInput: TeamUpdateWithoutPlayersDataInputInputObject
      StaffUpdateManyWithoutTeamInput: StaffUpdateManyWithoutTeamInputInputObject
      StaffUpdateWithWhereUniqueWithoutTeamInput: StaffUpdateWithWhereUniqueWithoutTeamInputInputObject
      StaffUpdateWithoutTeamDataInput: StaffUpdateWithoutTeamDataInputInputObject
      StaffInfoUpdateOneInput: StaffInfoUpdateOneInputInputObject
      StaffInfoUpdateDataInput: StaffInfoUpdateDataInputInputObject
      StaffInfoUpsertNestedInput: StaffInfoUpsertNestedInputInputObject
      StaffFromUpdateOneInput: StaffFromUpdateOneInputInputObject
      StaffFromUpdateDataInput: StaffFromUpdateDataInputInputObject
      StaffFromUpsertNestedInput: StaffFromUpsertNestedInputInputObject
      StaffSizeUpdateOneInput: StaffSizeUpdateOneInputInputObject
      StaffSizeUpdateDataInput: StaffSizeUpdateDataInputInputObject
      StaffSizeUpsertNestedInput: StaffSizeUpsertNestedInputInputObject
      MatchUpdateManyWithoutStaffInput: MatchUpdateManyWithoutStaffInputInputObject
      MatchUpdateWithWhereUniqueWithoutStaffInput: MatchUpdateWithWhereUniqueWithoutStaffInputInputObject
      MatchUpdateWithoutStaffDataInput: MatchUpdateWithoutStaffDataInputInputObject
      TeamUpdateOneInput: TeamUpdateOneInputInputObject
      TeamUpdateDataInput: TeamUpdateDataInputInputObject
      PlayerUpdateManyWithoutTeamInput: PlayerUpdateManyWithoutTeamInputInputObject
      PlayerUpdateWithWhereUniqueWithoutTeamInput: PlayerUpdateWithWhereUniqueWithoutTeamInputInputObject
      PlayerUpdateWithoutTeamDataInput: PlayerUpdateWithoutTeamDataInputInputObject
      PersonalInfoUpdateOneInput: PersonalInfoUpdateOneInputInputObject
      PersonalInfoUpdateDataInput: PersonalInfoUpdateDataInputInputObject
      PersonalInfoUpsertNestedInput: PersonalInfoUpsertNestedInputInputObject
      PersonalInfoWhereUniqueInput: PersonalInfoWhereUniqueInputInputObject
      AssessmentUpdateOneInput: AssessmentUpdateOneInputInputObject
      AssessmentUpdateDataInput: AssessmentUpdateDataInputInputObject
      AssessmentUpsertNestedInput: AssessmentUpsertNestedInputInputObject
      AssessmentWhereUniqueInput: AssessmentWhereUniqueInputInputObject
      WhereFromUpdateOneInput: WhereFromUpdateOneInputInputObject
      WhereFromUpdateDataInput: WhereFromUpdateDataInputInputObject
      WhereFromUpsertNestedInput: WhereFromUpsertNestedInputInputObject
      WhereFromWhereUniqueInput: WhereFromWhereUniqueInputInputObject
      InjuryUpdateManyWithoutPlayerInput: InjuryUpdateManyWithoutPlayerInputInputObject
      InjuryUpdateWithWhereUniqueWithoutPlayerInput: InjuryUpdateWithWhereUniqueWithoutPlayerInputInputObject
      InjuryUpdateWithoutPlayerDataInput: InjuryUpdateWithoutPlayerDataInputInputObject
      InjuryUpsertWithWhereUniqueWithoutPlayerInput: InjuryUpsertWithWhereUniqueWithoutPlayerInputInputObject
      InjuryScalarWhereInput: InjuryScalarWhereInputInputObject
      InjuryUpdateManyWithWhereNestedInput: InjuryUpdateManyWithWhereNestedInputInputObject
      InjuryUpdateManyDataInput: InjuryUpdateManyDataInputInputObject
      SizeUpdateOneInput: SizeUpdateOneInputInputObject
      SizeUpdateDataInput: SizeUpdateDataInputInputObject
      SizeUpsertNestedInput: SizeUpsertNestedInputInputObject
      SizeWhereUniqueInput: SizeWhereUniqueInputInputObject
      GoalUpdateManyWithoutPlayerInput: GoalUpdateManyWithoutPlayerInputInputObject
      GoalUpdateWithWhereUniqueWithoutPlayerInput: GoalUpdateWithWhereUniqueWithoutPlayerInputInputObject
      GoalUpdateWithoutPlayerDataInput: GoalUpdateWithoutPlayerDataInputInputObject
      MatchUpdateOneRequiredWithoutGoalsInput: MatchUpdateOneRequiredWithoutGoalsInputInputObject
      MatchUpdateWithoutGoalsDataInput: MatchUpdateWithoutGoalsDataInputInputObject
      PlayerUpdateOneRequiredInput: PlayerUpdateOneRequiredInputInputObject
      PlayerUpdateDataInput: PlayerUpdateDataInputInputObject
      AssistUpdateManyWithoutPlayerInput: AssistUpdateManyWithoutPlayerInputInputObject
      AssistUpdateWithWhereUniqueWithoutPlayerInput: AssistUpdateWithWhereUniqueWithoutPlayerInputInputObject
      AssistUpdateWithoutPlayerDataInput: AssistUpdateWithoutPlayerDataInputInputObject
      MatchUpdateOneRequiredWithoutAssistInput: MatchUpdateOneRequiredWithoutAssistInputInputObject
      MatchUpdateWithoutAssistDataInput: MatchUpdateWithoutAssistDataInputInputObject
      StaffUpdateManyWithoutMatchesInput: StaffUpdateManyWithoutMatchesInputInputObject
      StaffUpdateWithWhereUniqueWithoutMatchesInput: StaffUpdateWithWhereUniqueWithoutMatchesInputInputObject
      StaffUpdateWithoutMatchesDataInput: StaffUpdateWithoutMatchesDataInputInputObject
      TeamUpdateOneWithoutStaffInput: TeamUpdateOneWithoutStaffInputInputObject
      TeamUpdateWithoutStaffDataInput: TeamUpdateWithoutStaffDataInputInputObject
      TeamUpsertWithoutStaffInput: TeamUpsertWithoutStaffInputInputObject
      StaffUpsertWithWhereUniqueWithoutMatchesInput: StaffUpsertWithWhereUniqueWithoutMatchesInputInputObject
      StaffScalarWhereInput: StaffScalarWhereInputInputObject
      StaffUpdateManyWithWhereNestedInput: StaffUpdateManyWithWhereNestedInputInputObject
      StaffUpdateManyDataInput: StaffUpdateManyDataInputInputObject
      PlayerUpdateManyWithoutLineupInput: PlayerUpdateManyWithoutLineupInputInputObject
      PlayerUpdateWithWhereUniqueWithoutLineupInput: PlayerUpdateWithWhereUniqueWithoutLineupInputInputObject
      PlayerUpdateWithoutLineupDataInput: PlayerUpdateWithoutLineupDataInputInputObject
      BookingUpdateManyWithoutPlayerInput: BookingUpdateManyWithoutPlayerInputInputObject
      BookingUpdateWithWhereUniqueWithoutPlayerInput: BookingUpdateWithWhereUniqueWithoutPlayerInputInputObject
      BookingUpdateWithoutPlayerDataInput: BookingUpdateWithoutPlayerDataInputInputObject
      MatchUpdateOneRequiredWithoutBookingsInput: MatchUpdateOneRequiredWithoutBookingsInputInputObject
      MatchUpdateWithoutBookingsDataInput: MatchUpdateWithoutBookingsDataInputInputObject
      PlayerUpdateManyWithoutBenchInput: PlayerUpdateManyWithoutBenchInputInputObject
      PlayerUpdateWithWhereUniqueWithoutBenchInput: PlayerUpdateWithWhereUniqueWithoutBenchInputInputObject
      PlayerUpdateWithoutBenchDataInput: PlayerUpdateWithoutBenchDataInputInputObject
      MatchUpdateManyWithoutLineupInput: MatchUpdateManyWithoutLineupInputInputObject
      MatchUpdateWithWhereUniqueWithoutLineupInput: MatchUpdateWithWhereUniqueWithoutLineupInputInputObject
      MatchUpdateWithoutLineupDataInput: MatchUpdateWithoutLineupDataInputInputObject
      ScoreUpdateOneRequiredInput: ScoreUpdateOneRequiredInputInputObject
      ScoreUpdateDataInput: ScoreUpdateDataInputInputObject
      HomeAndAwayUpdateOneRequiredInput: HomeAndAwayUpdateOneRequiredInputInputObject
      HomeAndAwayUpdateDataInput: HomeAndAwayUpdateDataInputInputObject
      HomeAndAwayUpsertNestedInput: HomeAndAwayUpsertNestedInputInputObject
      HomeAndAwayUpdateOneInput: HomeAndAwayUpdateOneInputInputObject
      ScoreUpsertNestedInput: ScoreUpsertNestedInputInputObject
      GoalUpdateManyWithoutMatchInput: GoalUpdateManyWithoutMatchInputInputObject
      GoalUpdateWithWhereUniqueWithoutMatchInput: GoalUpdateWithWhereUniqueWithoutMatchInputInputObject
      GoalUpdateWithoutMatchDataInput: GoalUpdateWithoutMatchDataInputInputObject
      PlayerUpdateOneRequiredWithoutGoalsInput: PlayerUpdateOneRequiredWithoutGoalsInputInputObject
      PlayerUpdateWithoutGoalsDataInput: PlayerUpdateWithoutGoalsDataInputInputObject
      MatchUpdateManyWithoutBenchInput: MatchUpdateManyWithoutBenchInputInputObject
      MatchUpdateWithWhereUniqueWithoutBenchInput: MatchUpdateWithWhereUniqueWithoutBenchInputInputObject
      MatchUpdateWithoutBenchDataInput: MatchUpdateWithoutBenchDataInputInputObject
      AssistUpdateManyWithoutMatchInput: AssistUpdateManyWithoutMatchInputInputObject
      AssistUpdateWithWhereUniqueWithoutMatchInput: AssistUpdateWithWhereUniqueWithoutMatchInputInputObject
      AssistUpdateWithoutMatchDataInput: AssistUpdateWithoutMatchDataInputInputObject
      PlayerUpdateOneRequiredWithoutAssistInput: PlayerUpdateOneRequiredWithoutAssistInputInputObject
      PlayerUpdateWithoutAssistDataInput: PlayerUpdateWithoutAssistDataInputInputObject
      PlayerUpsertWithoutAssistInput: PlayerUpsertWithoutAssistInputInputObject
      AssistUpsertWithWhereUniqueWithoutMatchInput: AssistUpsertWithWhereUniqueWithoutMatchInputInputObject
      AssistScalarWhereInput: AssistScalarWhereInputInputObject
      AssistUpdateManyWithWhereNestedInput: AssistUpdateManyWithWhereNestedInputInputObject
      AssistUpdateManyDataInput: AssistUpdateManyDataInputInputObject
      SubstitutionsUpdateManyInput: SubstitutionsUpdateManyInputInputObject
      SubstitutionsScalarWhereInput: SubstitutionsScalarWhereInputInputObject
      SubstitutionsUpdateManyWithWhereNestedInput: SubstitutionsUpdateManyWithWhereNestedInputInputObject
      SubstitutionsUpdateManyDataInput: SubstitutionsUpdateManyDataInputInputObject
      BookingUpdateManyWithoutMatchInput: BookingUpdateManyWithoutMatchInputInputObject
      BookingUpdateWithWhereUniqueWithoutMatchInput: BookingUpdateWithWhereUniqueWithoutMatchInputInputObject
      BookingUpdateWithoutMatchDataInput: BookingUpdateWithoutMatchDataInputInputObject
      PlayerUpdateOneRequiredWithoutBookingsInput: PlayerUpdateOneRequiredWithoutBookingsInputInputObject
      PlayerUpdateWithoutBookingsDataInput: PlayerUpdateWithoutBookingsDataInputInputObject
      PlayerUpsertWithoutBookingsInput: PlayerUpsertWithoutBookingsInputInputObject
      BookingUpsertWithWhereUniqueWithoutMatchInput: BookingUpsertWithWhereUniqueWithoutMatchInputInputObject
      BookingScalarWhereInput: BookingScalarWhereInputInputObject
      BookingUpdateManyWithWhereNestedInput: BookingUpdateManyWithWhereNestedInputInputObject
      BookingUpdateManyDataInput: BookingUpdateManyDataInputInputObject
      MatchUpsertWithWhereUniqueWithoutBenchInput: MatchUpsertWithWhereUniqueWithoutBenchInputInputObject
      MatchScalarWhereInput: MatchScalarWhereInputInputObject
      MatchUpdateManyWithWhereNestedInput: MatchUpdateManyWithWhereNestedInputInputObject
      MatchUpdateManyDataInput: MatchUpdateManyDataInputInputObject
      PlayerUpsertWithoutGoalsInput: PlayerUpsertWithoutGoalsInputInputObject
      GoalUpsertWithWhereUniqueWithoutMatchInput: GoalUpsertWithWhereUniqueWithoutMatchInputInputObject
      GoalScalarWhereInput: GoalScalarWhereInputInputObject
      GoalUpdateManyWithWhereNestedInput: GoalUpdateManyWithWhereNestedInputInputObject
      GoalUpdateManyDataInput: GoalUpdateManyDataInputInputObject
      MatchUpsertWithWhereUniqueWithoutLineupInput: MatchUpsertWithWhereUniqueWithoutLineupInputInputObject
      PlayerUpsertWithWhereUniqueWithoutBenchInput: PlayerUpsertWithWhereUniqueWithoutBenchInputInputObject
      PlayerScalarWhereInput: PlayerScalarWhereInputInputObject
      PlayerUpdateManyWithWhereNestedInput: PlayerUpdateManyWithWhereNestedInputInputObject
      PlayerUpdateManyDataInput: PlayerUpdateManyDataInputInputObject
      MatchUpsertWithoutBookingsInput: MatchUpsertWithoutBookingsInputInputObject
      BookingUpsertWithWhereUniqueWithoutPlayerInput: BookingUpsertWithWhereUniqueWithoutPlayerInputInputObject
      PlayerUpsertWithWhereUniqueWithoutLineupInput: PlayerUpsertWithWhereUniqueWithoutLineupInputInputObject
      MatchUpsertWithoutAssistInput: MatchUpsertWithoutAssistInputInputObject
      AssistUpsertWithWhereUniqueWithoutPlayerInput: AssistUpsertWithWhereUniqueWithoutPlayerInputInputObject
      PlayerUpsertNestedInput: PlayerUpsertNestedInputInputObject
      MatchUpsertWithoutGoalsInput: MatchUpsertWithoutGoalsInputInputObject
      GoalUpsertWithWhereUniqueWithoutPlayerInput: GoalUpsertWithWhereUniqueWithoutPlayerInputInputObject
      PlayerUpsertWithWhereUniqueWithoutTeamInput: PlayerUpsertWithWhereUniqueWithoutTeamInputInputObject
      TeamUpsertNestedInput: TeamUpsertNestedInputInputObject
      MatchUpsertWithWhereUniqueWithoutStaffInput: MatchUpsertWithWhereUniqueWithoutStaffInputInputObject
      StaffUpsertWithWhereUniqueWithoutTeamInput: StaffUpsertWithWhereUniqueWithoutTeamInputInputObject
      TeamUpsertWithoutPlayersInput: TeamUpsertWithoutPlayersInputInputObject
      PlayerUpdateManyMutationInput: PlayerUpdateManyMutationInputInputObject
      InjuryCreateInput: InjuryCreateInputInputObject
      PlayerCreateOneWithoutInjuryInput: PlayerCreateOneWithoutInjuryInputInputObject
      PlayerCreateWithoutInjuryInput: PlayerCreateWithoutInjuryInputInputObject
      InjuryUpdateInput: InjuryUpdateInputInputObject
      PlayerUpdateOneWithoutInjuryInput: PlayerUpdateOneWithoutInjuryInputInputObject
      PlayerUpdateWithoutInjuryDataInput: PlayerUpdateWithoutInjuryDataInputInputObject
      PlayerUpsertWithoutInjuryInput: PlayerUpsertWithoutInjuryInputInputObject
      InjuryUpdateManyMutationInput: InjuryUpdateManyMutationInputInputObject
      MatchCreateInput: MatchCreateInputInputObject
      MatchUpdateInput: MatchUpdateInputInputObject
      MatchUpdateManyMutationInput: MatchUpdateManyMutationInputInputObject
      GoalCreateInput: GoalCreateInputInputObject
      GoalUpdateInput: GoalUpdateInputInputObject
      GoalUpdateManyMutationInput: GoalUpdateManyMutationInputInputObject
      AssistCreateInput: AssistCreateInputInputObject
      AssistUpdateInput: AssistUpdateInputInputObject
      AssistUpdateManyMutationInput: AssistUpdateManyMutationInputInputObject
      BookingCreateInput: BookingCreateInputInputObject
      BookingUpdateInput: BookingUpdateInputInputObject
      BookingUpdateManyMutationInput: BookingUpdateManyMutationInputInputObject
      TeamUpdateInput: TeamUpdateInputInputObject
      TeamUpdateManyMutationInput: TeamUpdateManyMutationInputInputObject
      StaffCreateInput: StaffCreateInputInputObject
      StaffUpdateInput: StaffUpdateInputInputObject
      StaffUpdateManyMutationInput: StaffUpdateManyMutationInputInputObject
      PlayerSubscriptionWhereInput: PlayerSubscriptionWhereInputInputObject
      InjurySubscriptionWhereInput: InjurySubscriptionWhereInputInputObject
      MatchSubscriptionWhereInput: MatchSubscriptionWhereInputInputObject
      GoalSubscriptionWhereInput: GoalSubscriptionWhereInputInputObject
      AssistSubscriptionWhereInput: AssistSubscriptionWhereInputInputObject
      BookingSubscriptionWhereInput: BookingSubscriptionWhereInputInputObject
      TeamSubscriptionWhereInput: TeamSubscriptionWhereInputInputObject
      StaffSubscriptionWhereInput: StaffSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    Competiton: CompetitonValues,
    ColorCard: ColorCardValues,
    PlayerPosition: PlayerPositionValues,
    Foot: FootValues,
    PlayerOrderByInput: PlayerOrderByInputValues,
    StaffOrderByInput: StaffOrderByInputValues,
    MatchOrderByInput: MatchOrderByInputValues,
    GoalOrderByInput: GoalOrderByInputValues,
    AssistOrderByInput: AssistOrderByInputValues,
    BookingOrderByInput: BookingOrderByInputValues,
    InjuryOrderByInput: InjuryOrderByInputValues,
    TeamOrderByInput: TeamOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'player', args?: QueryPlayerArgs[] | false, alias?: string  } 
  | { name: 'players', args?: QueryPlayersArgs[] | false, alias?: string  } 
  | { name: 'playersConnection', args?: QueryPlayersConnectionArgs[] | false, alias?: string  } 
  | { name: 'injury', args?: QueryInjuryArgs[] | false, alias?: string  } 
  | { name: 'injuries', args?: QueryInjuriesArgs[] | false, alias?: string  } 
  | { name: 'injuriesConnection', args?: QueryInjuriesConnectionArgs[] | false, alias?: string  } 
  | { name: 'match', args?: QueryMatchArgs[] | false, alias?: string  } 
  | { name: 'matches', args?: QueryMatchesArgs[] | false, alias?: string  } 
  | { name: 'matchesConnection', args?: QueryMatchesConnectionArgs[] | false, alias?: string  } 
  | { name: 'goal', args?: QueryGoalArgs[] | false, alias?: string  } 
  | { name: 'goals', args?: QueryGoalsArgs[] | false, alias?: string  } 
  | { name: 'goalsConnection', args?: QueryGoalsConnectionArgs[] | false, alias?: string  } 
  | { name: 'assist', args?: QueryAssistArgs[] | false, alias?: string  } 
  | { name: 'assists', args?: QueryAssistsArgs[] | false, alias?: string  } 
  | { name: 'assistsConnection', args?: QueryAssistsConnectionArgs[] | false, alias?: string  } 
  | { name: 'booking', args?: QueryBookingArgs[] | false, alias?: string  } 
  | { name: 'bookings', args?: QueryBookingsArgs[] | false, alias?: string  } 
  | { name: 'bookingsConnection', args?: QueryBookingsConnectionArgs[] | false, alias?: string  } 
  | { name: 'team', args?: QueryTeamArgs[] | false, alias?: string  } 
  | { name: 'teams', args?: QueryTeamsArgs[] | false, alias?: string  } 
  | { name: 'teamsConnection', args?: QueryTeamsConnectionArgs[] | false, alias?: string  } 
  | { name: 'staff', args?: QueryStaffArgs[] | false, alias?: string  } 
  | { name: 'staffs', args?: QueryStaffsArgs[] | false, alias?: string  } 
  | { name: 'staffsConnection', args?: QueryStaffsConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'player'
  | 'players'
  | 'playersConnection'
  | 'injury'
  | 'injuries'
  | 'injuriesConnection'
  | 'match'
  | 'matches'
  | 'matchesConnection'
  | 'goal'
  | 'goals'
  | 'goalsConnection'
  | 'assist'
  | 'assists'
  | 'assistsConnection'
  | 'booking'
  | 'bookings'
  | 'bookingsConnection'
  | 'team'
  | 'teams'
  | 'teamsConnection'
  | 'staff'
  | 'staffs'
  | 'staffsConnection'


type QueryPlayerArgs =
  | 'where'
type QueryPlayersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPlayersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryInjuryArgs =
  | 'where'
type QueryInjuriesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryInjuriesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryMatchArgs =
  | 'where'
type QueryMatchesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryMatchesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGoalArgs =
  | 'where'
type QueryGoalsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGoalsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryAssistArgs =
  | 'where'
type QueryAssistsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryAssistsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryBookingArgs =
  | 'where'
type QueryBookingsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryBookingsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTeamArgs =
  | 'where'
type QueryTeamsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTeamsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryStaffArgs =
  | 'where'
type QueryStaffsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryStaffsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  player: {
    type: 'Player'
    args: Record<QueryPlayerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PlayerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Player | null> | prisma.Player | null
  }
  players: {
    type: 'Player'
    args: Record<QueryPlayersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PlayerWhereInput | null, orderBy?: prisma.PlayerOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Player[]> | prisma.Player[]
  }
  playersConnection: {
    type: 'PlayerConnection'
    args: Record<QueryPlayersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PlayerWhereInput | null, orderBy?: prisma.PlayerOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PlayerConnection> | prisma.PlayerConnection
  }
  injury: {
    type: 'Injury'
    args: Record<QueryInjuryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: InjuryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Injury | null> | prisma.Injury | null
  }
  injuries: {
    type: 'Injury'
    args: Record<QueryInjuriesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: InjuryWhereInput | null, orderBy?: prisma.InjuryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Injury[]> | prisma.Injury[]
  }
  injuriesConnection: {
    type: 'InjuryConnection'
    args: Record<QueryInjuriesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: InjuryWhereInput | null, orderBy?: prisma.InjuryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InjuryConnection> | prisma.InjuryConnection
  }
  match: {
    type: 'Match'
    args: Record<QueryMatchArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: MatchWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Match | null> | prisma.Match | null
  }
  matches: {
    type: 'Match'
    args: Record<QueryMatchesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: MatchWhereInput | null, orderBy?: prisma.MatchOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Match[]> | prisma.Match[]
  }
  matchesConnection: {
    type: 'MatchConnection'
    args: Record<QueryMatchesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: MatchWhereInput | null, orderBy?: prisma.MatchOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MatchConnection> | prisma.MatchConnection
  }
  goal: {
    type: 'Goal'
    args: Record<QueryGoalArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: GoalWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Goal | null> | prisma.Goal | null
  }
  goals: {
    type: 'Goal'
    args: Record<QueryGoalsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GoalWhereInput | null, orderBy?: prisma.GoalOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Goal[]> | prisma.Goal[]
  }
  goalsConnection: {
    type: 'GoalConnection'
    args: Record<QueryGoalsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GoalWhereInput | null, orderBy?: prisma.GoalOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GoalConnection> | prisma.GoalConnection
  }
  assist: {
    type: 'Assist'
    args: Record<QueryAssistArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: AssistWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Assist | null> | prisma.Assist | null
  }
  assists: {
    type: 'Assist'
    args: Record<QueryAssistsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: AssistWhereInput | null, orderBy?: prisma.AssistOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Assist[]> | prisma.Assist[]
  }
  assistsConnection: {
    type: 'AssistConnection'
    args: Record<QueryAssistsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: AssistWhereInput | null, orderBy?: prisma.AssistOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AssistConnection> | prisma.AssistConnection
  }
  booking: {
    type: 'Booking'
    args: Record<QueryBookingArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: BookingWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Booking | null> | prisma.Booking | null
  }
  bookings: {
    type: 'Booking'
    args: Record<QueryBookingsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: BookingWhereInput | null, orderBy?: prisma.BookingOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Booking[]> | prisma.Booking[]
  }
  bookingsConnection: {
    type: 'BookingConnection'
    args: Record<QueryBookingsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: BookingWhereInput | null, orderBy?: prisma.BookingOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BookingConnection> | prisma.BookingConnection
  }
  team: {
    type: 'Team'
    args: Record<QueryTeamArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: TeamWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team | null> | prisma.Team | null
  }
  teams: {
    type: 'Team'
    args: Record<QueryTeamsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TeamWhereInput | null, orderBy?: prisma.TeamOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team[]> | prisma.Team[]
  }
  teamsConnection: {
    type: 'TeamConnection'
    args: Record<QueryTeamsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TeamWhereInput | null, orderBy?: prisma.TeamOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TeamConnection> | prisma.TeamConnection
  }
  staff: {
    type: 'Staff'
    args: Record<QueryStaffArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: StaffWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Staff | null> | prisma.Staff | null
  }
  staffs: {
    type: 'Staff'
    args: Record<QueryStaffsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: StaffWhereInput | null, orderBy?: prisma.StaffOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Staff[]> | prisma.Staff[]
  }
  staffsConnection: {
    type: 'StaffConnection'
    args: Record<QueryStaffsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: StaffWhereInput | null, orderBy?: prisma.StaffOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.StaffConnection> | prisma.StaffConnection
  }
}
  

// Types for Player

type PlayerObject =
  | PlayerFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'nick', args?: [] | false, alias?: string  } 
  | { name: 'shirtNumber', args?: [] | false, alias?: string  } 
  | { name: 'imgUrl', args?: [] | false, alias?: string  } 
  | { name: 'team', args?: [] | false, alias?: string  } 
  | { name: 'captain', args?: [] | false, alias?: string  } 
  | { name: 'personalInfo', args?: [] | false, alias?: string  } 
  | { name: 'position', args?: [] | false, alias?: string  } 
  | { name: 'altPosition', args?: [] | false, alias?: string  } 
  | { name: 'assessment', args?: [] | false, alias?: string  } 
  | { name: 'foot', args?: [] | false, alias?: string  } 
  | { name: 'from', args?: [] | false, alias?: string  } 
  | { name: 'injured', args?: [] | false, alias?: string  } 
  | { name: 'injury', args?: PlayerInjuryArgs[] | false, alias?: string  } 
  | { name: 'sizes', args?: [] | false, alias?: string  } 
  | { name: 'goals', args?: PlayerGoalsArgs[] | false, alias?: string  } 
  | { name: 'assist', args?: PlayerAssistArgs[] | false, alias?: string  } 
  | { name: 'bookings', args?: PlayerBookingsArgs[] | false, alias?: string  } 
  | { name: 'lineup', args?: PlayerLineupArgs[] | false, alias?: string  } 
  | { name: 'bench', args?: PlayerBenchArgs[] | false, alias?: string  } 

type PlayerFields =
  | 'id'
  | 'nick'
  | 'shirtNumber'
  | 'imgUrl'
  | 'team'
  | 'captain'
  | 'personalInfo'
  | 'position'
  | 'altPosition'
  | 'assessment'
  | 'foot'
  | 'from'
  | 'injured'
  | 'injury'
  | 'sizes'
  | 'goals'
  | 'assist'
  | 'bookings'
  | 'lineup'
  | 'bench'


type PlayerInjuryArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type PlayerGoalsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type PlayerAssistArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type PlayerBookingsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type PlayerLineupArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type PlayerBenchArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface PlayerFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  nick: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  shirtNumber: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  imgUrl: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  team: {
    type: 'Team'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Player">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team | null> | prisma.Team | null
  }
  captain: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  personalInfo: {
    type: 'PersonalInfo'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Player">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PersonalInfo | null> | prisma.PersonalInfo | null
  }
  position: {
    type: 'PlayerPosition'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Player">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PlayerPosition> | prisma.PlayerPosition
  }
  altPosition: {
    type: 'PlayerPosition'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Player">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PlayerPosition | null> | prisma.PlayerPosition | null
  }
  assessment: {
    type: 'Assessment'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Player">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Assessment | null> | prisma.Assessment | null
  }
  foot: {
    type: 'Foot'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Player">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Foot | null> | prisma.Foot | null
  }
  from: {
    type: 'WhereFrom'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Player">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WhereFrom | null> | prisma.WhereFrom | null
  }
  injured: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  injury: {
    type: 'Injury'
    args: Record<PlayerInjuryArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Player">,
      args: { where?: InjuryWhereInput | null, orderBy?: prisma.InjuryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Injury[]> | prisma.Injury[]
  }
  sizes: {
    type: 'Size'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Player">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Size | null> | prisma.Size | null
  }
  goals: {
    type: 'Goal'
    args: Record<PlayerGoalsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Player">,
      args: { where?: GoalWhereInput | null, orderBy?: prisma.GoalOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Goal[]> | prisma.Goal[]
  }
  assist: {
    type: 'Assist'
    args: Record<PlayerAssistArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Player">,
      args: { where?: AssistWhereInput | null, orderBy?: prisma.AssistOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Assist[]> | prisma.Assist[]
  }
  bookings: {
    type: 'Booking'
    args: Record<PlayerBookingsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Player">,
      args: { where?: BookingWhereInput | null, orderBy?: prisma.BookingOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Booking[]> | prisma.Booking[]
  }
  lineup: {
    type: 'Match'
    args: Record<PlayerLineupArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Player">,
      args: { where?: MatchWhereInput | null, orderBy?: prisma.MatchOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Match[]> | prisma.Match[]
  }
  bench: {
    type: 'Match'
    args: Record<PlayerBenchArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Player">,
      args: { where?: MatchWhereInput | null, orderBy?: prisma.MatchOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Match[]> | prisma.Match[]
  }
}
  

// Types for Team

type TeamObject =
  | TeamFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'logoUrl', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'players', args?: TeamPlayersArgs[] | false, alias?: string  } 
  | { name: 'staff', args?: TeamStaffArgs[] | false, alias?: string  } 

type TeamFields =
  | 'id'
  | 'logoUrl'
  | 'name'
  | 'players'
  | 'staff'


type TeamPlayersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type TeamStaffArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface TeamFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  logoUrl: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  players: {
    type: 'Player'
    args: Record<TeamPlayersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Team">,
      args: { where?: PlayerWhereInput | null, orderBy?: prisma.PlayerOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Player[]> | prisma.Player[]
  }
  staff: {
    type: 'Staff'
    args: Record<TeamStaffArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Team">,
      args: { where?: StaffWhereInput | null, orderBy?: prisma.StaffOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Staff[]> | prisma.Staff[]
  }
}
  

// Types for Staff

type StaffObject =
  | StaffFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'nick', args?: [] | false, alias?: string  } 
  | { name: 'imgUrl', args?: [] | false, alias?: string  } 
  | { name: 'team', args?: [] | false, alias?: string  } 
  | { name: 'personalInfo', args?: [] | false, alias?: string  } 
  | { name: 'from', args?: [] | false, alias?: string  } 
  | { name: 'sizes', args?: [] | false, alias?: string  } 
  | { name: 'role', args?: [] | false, alias?: string  } 
  | { name: 'matches', args?: StaffMatchesArgs[] | false, alias?: string  } 

type StaffFields =
  | 'id'
  | 'nick'
  | 'imgUrl'
  | 'team'
  | 'personalInfo'
  | 'from'
  | 'sizes'
  | 'role'
  | 'matches'


type StaffMatchesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface StaffFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  nick: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  imgUrl: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  team: {
    type: 'Team'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Staff">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team | null> | prisma.Team | null
  }
  personalInfo: {
    type: 'StaffInfo'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Staff">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.StaffInfo | null> | prisma.StaffInfo | null
  }
  from: {
    type: 'StaffFrom'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Staff">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.StaffFrom | null> | prisma.StaffFrom | null
  }
  sizes: {
    type: 'StaffSize'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Staff">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.StaffSize | null> | prisma.StaffSize | null
  }
  role: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  matches: {
    type: 'Match'
    args: Record<StaffMatchesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Staff">,
      args: { where?: MatchWhereInput | null, orderBy?: prisma.MatchOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Match[]> | prisma.Match[]
  }
}
  

// Types for StaffInfo

type StaffInfoObject =
  | StaffInfoFields
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'firstName', args?: [] | false, alias?: string  } 
  | { name: 'lastName', args?: [] | false, alias?: string  } 
  | { name: 'dateOfBirth', args?: [] | false, alias?: string  } 
  | { name: 'tel', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'dni', args?: [] | false, alias?: string  } 

type StaffInfoFields =
  | 'name'
  | 'firstName'
  | 'lastName'
  | 'dateOfBirth'
  | 'tel'
  | 'email'
  | 'dni'



  

export interface StaffInfoFieldDetails {
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  firstName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  lastName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  dateOfBirth: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  tel: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  dni: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for StaffFrom

type StaffFromObject =
  | StaffFromFields
  | { name: 'address', args?: [] | false, alias?: string  } 
  | { name: 'number', args?: [] | false, alias?: string  } 
  | { name: 'town', args?: [] | false, alias?: string  } 
  | { name: 'province', args?: [] | false, alias?: string  } 
  | { name: 'countruy', args?: [] | false, alias?: string  } 
  | { name: 'PC', args?: [] | false, alias?: string  } 

type StaffFromFields =
  | 'address'
  | 'number'
  | 'town'
  | 'province'
  | 'countruy'
  | 'PC'



  

export interface StaffFromFieldDetails {
  address: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  number: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  town: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  province: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  countruy: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  PC: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for StaffSize

type StaffSizeObject =
  | StaffSizeFields
  | { name: 'clothing', args?: [] | false, alias?: string  } 
  | { name: 'step', args?: [] | false, alias?: string  } 

type StaffSizeFields =
  | 'clothing'
  | 'step'



  

export interface StaffSizeFieldDetails {
  clothing: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  step: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for Match

type MatchObject =
  | MatchFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'date', args?: [] | false, alias?: string  } 
  | { name: 'jornada', args?: [] | false, alias?: string  } 
  | { name: 'finished', args?: [] | false, alias?: string  } 
  | { name: 'homeTeam', args?: [] | false, alias?: string  } 
  | { name: 'opponent', args?: [] | false, alias?: string  } 
  | { name: 'win', args?: [] | false, alias?: string  } 
  | { name: 'competition', args?: [] | false, alias?: string  } 
  | { name: 'captain', args?: [] | false, alias?: string  } 
  | { name: 'staff', args?: MatchStaffArgs[] | false, alias?: string  } 
  | { name: 'lineup', args?: MatchLineupArgs[] | false, alias?: string  } 
  | { name: 'bench', args?: MatchBenchArgs[] | false, alias?: string  } 
  | { name: 'score', args?: [] | false, alias?: string  } 
  | { name: 'goals', args?: MatchGoalsArgs[] | false, alias?: string  } 
  | { name: 'assist', args?: MatchAssistArgs[] | false, alias?: string  } 
  | { name: 'substitutions', args?: [] | false, alias?: string  } 
  | { name: 'bookings', args?: MatchBookingsArgs[] | false, alias?: string  } 
  | { name: 'referees', args?: [] | false, alias?: string  } 
  | { name: 'desc', args?: [] | false, alias?: string  } 

type MatchFields =
  | 'id'
  | 'date'
  | 'jornada'
  | 'finished'
  | 'homeTeam'
  | 'opponent'
  | 'win'
  | 'competition'
  | 'captain'
  | 'staff'
  | 'lineup'
  | 'bench'
  | 'score'
  | 'goals'
  | 'assist'
  | 'substitutions'
  | 'bookings'
  | 'referees'
  | 'desc'


type MatchStaffArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type MatchLineupArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type MatchBenchArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type MatchGoalsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type MatchAssistArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type MatchBookingsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface MatchFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  date: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  jornada: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  finished: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  homeTeam: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  opponent: {
    type: 'Team'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Match">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team | null> | prisma.Team | null
  }
  win: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  competition: {
    type: 'Competiton'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Match">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Competiton | null> | prisma.Competiton | null
  }
  captain: {
    type: 'Player'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Match">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Player> | prisma.Player
  }
  staff: {
    type: 'Staff'
    args: Record<MatchStaffArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Match">,
      args: { where?: StaffWhereInput | null, orderBy?: prisma.StaffOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Staff[]> | prisma.Staff[]
  }
  lineup: {
    type: 'Player'
    args: Record<MatchLineupArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Match">,
      args: { where?: PlayerWhereInput | null, orderBy?: prisma.PlayerOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Player[]> | prisma.Player[]
  }
  bench: {
    type: 'Player'
    args: Record<MatchBenchArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Match">,
      args: { where?: PlayerWhereInput | null, orderBy?: prisma.PlayerOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Player[]> | prisma.Player[]
  }
  score: {
    type: 'Score'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Match">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Score> | prisma.Score
  }
  goals: {
    type: 'Goal'
    args: Record<MatchGoalsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Match">,
      args: { where?: GoalWhereInput | null, orderBy?: prisma.GoalOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Goal[]> | prisma.Goal[]
  }
  assist: {
    type: 'Assist'
    args: Record<MatchAssistArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Match">,
      args: { where?: AssistWhereInput | null, orderBy?: prisma.AssistOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Assist[]> | prisma.Assist[]
  }
  substitutions: {
    type: 'Substitutions'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Match">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Substitutions[]> | prisma.Substitutions[]
  }
  bookings: {
    type: 'Booking'
    args: Record<MatchBookingsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Match">,
      args: { where?: BookingWhereInput | null, orderBy?: prisma.BookingOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Booking[]> | prisma.Booking[]
  }
  referees: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  desc: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for Score

type ScoreObject =
  | ScoreFields
  | { name: 'fullTime', args?: [] | false, alias?: string  } 
  | { name: 'halfTime', args?: [] | false, alias?: string  } 
  | { name: 'extraTime', args?: [] | false, alias?: string  } 
  | { name: 'penalties', args?: [] | false, alias?: string  } 

type ScoreFields =
  | 'fullTime'
  | 'halfTime'
  | 'extraTime'
  | 'penalties'



  

export interface ScoreFieldDetails {
  fullTime: {
    type: 'HomeAndAway'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Score">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HomeAndAway> | prisma.HomeAndAway
  }
  halfTime: {
    type: 'HomeAndAway'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Score">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HomeAndAway | null> | prisma.HomeAndAway | null
  }
  extraTime: {
    type: 'HomeAndAway'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Score">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HomeAndAway | null> | prisma.HomeAndAway | null
  }
  penalties: {
    type: 'HomeAndAway'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Score">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HomeAndAway | null> | prisma.HomeAndAway | null
  }
}
  

// Types for HomeAndAway

type HomeAndAwayObject =
  | HomeAndAwayFields
  | { name: 'homeTeam', args?: [] | false, alias?: string  } 
  | { name: 'awayTeam', args?: [] | false, alias?: string  } 

type HomeAndAwayFields =
  | 'homeTeam'
  | 'awayTeam'



  

export interface HomeAndAwayFieldDetails {
  homeTeam: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  awayTeam: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for Goal

type GoalObject =
  | GoalFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'player', args?: [] | false, alias?: string  } 
  | { name: 'match', args?: [] | false, alias?: string  } 
  | { name: 'min', args?: [] | false, alias?: string  } 
  | { name: 'desc', args?: [] | false, alias?: string  } 

type GoalFields =
  | 'id'
  | 'player'
  | 'match'
  | 'min'
  | 'desc'



  

export interface GoalFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  player: {
    type: 'Player'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Goal">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Player> | prisma.Player
  }
  match: {
    type: 'Match'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Goal">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Match> | prisma.Match
  }
  min: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  desc: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for Assist

type AssistObject =
  | AssistFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'player', args?: [] | false, alias?: string  } 
  | { name: 'match', args?: [] | false, alias?: string  } 
  | { name: 'min', args?: [] | false, alias?: string  } 
  | { name: 'desc', args?: [] | false, alias?: string  } 

type AssistFields =
  | 'id'
  | 'player'
  | 'match'
  | 'min'
  | 'desc'



  

export interface AssistFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  player: {
    type: 'Player'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Assist">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Player> | prisma.Player
  }
  match: {
    type: 'Match'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Assist">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Match> | prisma.Match
  }
  min: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  desc: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for Substitutions

type SubstitutionsObject =
  | SubstitutionsFields
  | { name: 'playerIn', args?: [] | false, alias?: string  } 
  | { name: 'playerOut', args?: [] | false, alias?: string  } 
  | { name: 'min', args?: [] | false, alias?: string  } 

type SubstitutionsFields =
  | 'playerIn'
  | 'playerOut'
  | 'min'



  

export interface SubstitutionsFieldDetails {
  playerIn: {
    type: 'Player'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Substitutions">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Player> | prisma.Player
  }
  playerOut: {
    type: 'Player'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Substitutions">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Player> | prisma.Player
  }
  min: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for Booking

type BookingObject =
  | BookingFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'player', args?: [] | false, alias?: string  } 
  | { name: 'match', args?: [] | false, alias?: string  } 
  | { name: 'min', args?: [] | false, alias?: string  } 
  | { name: 'desc', args?: [] | false, alias?: string  } 
  | { name: 'card', args?: [] | false, alias?: string  } 

type BookingFields =
  | 'id'
  | 'player'
  | 'match'
  | 'min'
  | 'desc'
  | 'card'



  

export interface BookingFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  player: {
    type: 'Player'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Booking">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Player> | prisma.Player
  }
  match: {
    type: 'Match'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Booking">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Match> | prisma.Match
  }
  min: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  desc: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  card: {
    type: 'ColorCard'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Booking">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ColorCard | null> | prisma.ColorCard | null
  }
}
  

// Types for PersonalInfo

type PersonalInfoObject =
  | PersonalInfoFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'firstName', args?: [] | false, alias?: string  } 
  | { name: 'lastName', args?: [] | false, alias?: string  } 
  | { name: 'dateOfBirth', args?: [] | false, alias?: string  } 
  | { name: 'tel', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'dni', args?: [] | false, alias?: string  } 
  | { name: 'origin', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'childs', args?: [] | false, alias?: string  } 
  | { name: 'brothers', args?: [] | false, alias?: string  } 
  | { name: 'poscBrothers', args?: [] | false, alias?: string  } 
  | { name: 'clubBrothers', args?: [] | false, alias?: string  } 

type PersonalInfoFields =
  | 'id'
  | 'name'
  | 'firstName'
  | 'lastName'
  | 'dateOfBirth'
  | 'tel'
  | 'email'
  | 'dni'
  | 'origin'
  | 'status'
  | 'childs'
  | 'brothers'
  | 'poscBrothers'
  | 'clubBrothers'



  

export interface PersonalInfoFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  firstName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  lastName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  dateOfBirth: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  tel: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  dni: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  origin: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  status: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  childs: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  brothers: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  poscBrothers: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  clubBrothers: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for Assessment

type AssessmentObject =
  | AssessmentFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'personality', args?: [] | false, alias?: string  } 
  | { name: 'psychology', args?: [] | false, alias?: string  } 
  | { name: 'technical', args?: [] | false, alias?: string  } 
  | { name: 'tactical', args?: [] | false, alias?: string  } 
  | { name: 'physical', args?: [] | false, alias?: string  } 

type AssessmentFields =
  | 'id'
  | 'personality'
  | 'psychology'
  | 'technical'
  | 'tactical'
  | 'physical'



  

export interface AssessmentFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  personality: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  psychology: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  technical: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  tactical: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  physical: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for WhereFrom

type WhereFromObject =
  | WhereFromFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'address', args?: [] | false, alias?: string  } 
  | { name: 'number', args?: [] | false, alias?: string  } 
  | { name: 'town', args?: [] | false, alias?: string  } 
  | { name: 'province', args?: [] | false, alias?: string  } 
  | { name: 'countruy', args?: [] | false, alias?: string  } 
  | { name: 'PC', args?: [] | false, alias?: string  } 
  | { name: 'placeOfBirth', args?: [] | false, alias?: string  } 
  | { name: 'nationality', args?: [] | false, alias?: string  } 
  | { name: 'extra', args?: [] | false, alias?: string  } 

type WhereFromFields =
  | 'id'
  | 'address'
  | 'number'
  | 'town'
  | 'province'
  | 'countruy'
  | 'PC'
  | 'placeOfBirth'
  | 'nationality'
  | 'extra'



  

export interface WhereFromFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  address: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  number: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  town: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  province: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  countruy: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  PC: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  placeOfBirth: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  nationality: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  extra: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for Injury

type InjuryObject =
  | InjuryFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'startAt', args?: [] | false, alias?: string  } 
  | { name: 'endAt', args?: [] | false, alias?: string  } 
  | { name: 'desc', args?: [] | false, alias?: string  } 
  | { name: 'player', args?: [] | false, alias?: string  } 

type InjuryFields =
  | 'id'
  | 'startAt'
  | 'endAt'
  | 'desc'
  | 'player'



  

export interface InjuryFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  endAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  desc: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  player: {
    type: 'Player'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Injury">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Player | null> | prisma.Player | null
  }
}
  

// Types for Size

type SizeObject =
  | SizeFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'clothing', args?: [] | false, alias?: string  } 
  | { name: 'step', args?: [] | false, alias?: string  } 

type SizeFields =
  | 'id'
  | 'clothing'
  | 'step'



  

export interface SizeFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  clothing: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  step: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for PlayerConnection

type PlayerConnectionObject =
  | PlayerConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PlayerConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PlayerConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PlayerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PlayerEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PlayerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PlayerEdge[]> | prisma.PlayerEdge[]
  }
  aggregate: {
    type: 'AggregatePlayer'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PlayerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePlayer> | prisma.AggregatePlayer
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for PlayerEdge

type PlayerEdgeObject =
  | PlayerEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PlayerEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PlayerEdgeFieldDetails {
  node: {
    type: 'Player'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PlayerEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Player> | prisma.Player
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePlayer

type AggregatePlayerObject =
  | AggregatePlayerFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePlayerFields =
  | 'count'



  

export interface AggregatePlayerFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for InjuryConnection

type InjuryConnectionObject =
  | InjuryConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type InjuryConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface InjuryConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InjuryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'InjuryEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"InjuryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InjuryEdge[]> | prisma.InjuryEdge[]
  }
  aggregate: {
    type: 'AggregateInjury'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InjuryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateInjury> | prisma.AggregateInjury
  }
}
  

// Types for InjuryEdge

type InjuryEdgeObject =
  | InjuryEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type InjuryEdgeFields =
  | 'node'
  | 'cursor'



  

export interface InjuryEdgeFieldDetails {
  node: {
    type: 'Injury'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InjuryEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Injury> | prisma.Injury
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateInjury

type AggregateInjuryObject =
  | AggregateInjuryFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateInjuryFields =
  | 'count'



  

export interface AggregateInjuryFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for MatchConnection

type MatchConnectionObject =
  | MatchConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type MatchConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface MatchConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MatchConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'MatchEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"MatchConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MatchEdge[]> | prisma.MatchEdge[]
  }
  aggregate: {
    type: 'AggregateMatch'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MatchConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateMatch> | prisma.AggregateMatch
  }
}
  

// Types for MatchEdge

type MatchEdgeObject =
  | MatchEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type MatchEdgeFields =
  | 'node'
  | 'cursor'



  

export interface MatchEdgeFieldDetails {
  node: {
    type: 'Match'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MatchEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Match> | prisma.Match
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateMatch

type AggregateMatchObject =
  | AggregateMatchFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateMatchFields =
  | 'count'



  

export interface AggregateMatchFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for GoalConnection

type GoalConnectionObject =
  | GoalConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type GoalConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface GoalConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GoalConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'GoalEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"GoalConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GoalEdge[]> | prisma.GoalEdge[]
  }
  aggregate: {
    type: 'AggregateGoal'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GoalConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateGoal> | prisma.AggregateGoal
  }
}
  

// Types for GoalEdge

type GoalEdgeObject =
  | GoalEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type GoalEdgeFields =
  | 'node'
  | 'cursor'



  

export interface GoalEdgeFieldDetails {
  node: {
    type: 'Goal'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GoalEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Goal> | prisma.Goal
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateGoal

type AggregateGoalObject =
  | AggregateGoalFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateGoalFields =
  | 'count'



  

export interface AggregateGoalFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AssistConnection

type AssistConnectionObject =
  | AssistConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type AssistConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface AssistConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AssistConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'AssistEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"AssistConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AssistEdge[]> | prisma.AssistEdge[]
  }
  aggregate: {
    type: 'AggregateAssist'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AssistConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateAssist> | prisma.AggregateAssist
  }
}
  

// Types for AssistEdge

type AssistEdgeObject =
  | AssistEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type AssistEdgeFields =
  | 'node'
  | 'cursor'



  

export interface AssistEdgeFieldDetails {
  node: {
    type: 'Assist'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AssistEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Assist> | prisma.Assist
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateAssist

type AggregateAssistObject =
  | AggregateAssistFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateAssistFields =
  | 'count'



  

export interface AggregateAssistFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for BookingConnection

type BookingConnectionObject =
  | BookingConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type BookingConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface BookingConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BookingConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'BookingEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"BookingConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BookingEdge[]> | prisma.BookingEdge[]
  }
  aggregate: {
    type: 'AggregateBooking'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BookingConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateBooking> | prisma.AggregateBooking
  }
}
  

// Types for BookingEdge

type BookingEdgeObject =
  | BookingEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type BookingEdgeFields =
  | 'node'
  | 'cursor'



  

export interface BookingEdgeFieldDetails {
  node: {
    type: 'Booking'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BookingEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Booking> | prisma.Booking
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateBooking

type AggregateBookingObject =
  | AggregateBookingFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateBookingFields =
  | 'count'



  

export interface AggregateBookingFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TeamConnection

type TeamConnectionObject =
  | TeamConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type TeamConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface TeamConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TeamConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'TeamEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TeamConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TeamEdge[]> | prisma.TeamEdge[]
  }
  aggregate: {
    type: 'AggregateTeam'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TeamConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateTeam> | prisma.AggregateTeam
  }
}
  

// Types for TeamEdge

type TeamEdgeObject =
  | TeamEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type TeamEdgeFields =
  | 'node'
  | 'cursor'



  

export interface TeamEdgeFieldDetails {
  node: {
    type: 'Team'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TeamEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team> | prisma.Team
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateTeam

type AggregateTeamObject =
  | AggregateTeamFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateTeamFields =
  | 'count'



  

export interface AggregateTeamFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for StaffConnection

type StaffConnectionObject =
  | StaffConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type StaffConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface StaffConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"StaffConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'StaffEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"StaffConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.StaffEdge[]> | prisma.StaffEdge[]
  }
  aggregate: {
    type: 'AggregateStaff'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"StaffConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateStaff> | prisma.AggregateStaff
  }
}
  

// Types for StaffEdge

type StaffEdgeObject =
  | StaffEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type StaffEdgeFields =
  | 'node'
  | 'cursor'



  

export interface StaffEdgeFieldDetails {
  node: {
    type: 'Staff'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"StaffEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Staff> | prisma.Staff
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateStaff

type AggregateStaffObject =
  | AggregateStaffFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateStaffFields =
  | 'count'



  

export interface AggregateStaffFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createPlayer', args?: MutationCreatePlayerArgs[] | false, alias?: string  } 
  | { name: 'updatePlayer', args?: MutationUpdatePlayerArgs[] | false, alias?: string  } 
  | { name: 'updateManyPlayers', args?: MutationUpdateManyPlayersArgs[] | false, alias?: string  } 
  | { name: 'upsertPlayer', args?: MutationUpsertPlayerArgs[] | false, alias?: string  } 
  | { name: 'deletePlayer', args?: MutationDeletePlayerArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPlayers', args?: MutationDeleteManyPlayersArgs[] | false, alias?: string  } 
  | { name: 'createInjury', args?: MutationCreateInjuryArgs[] | false, alias?: string  } 
  | { name: 'updateInjury', args?: MutationUpdateInjuryArgs[] | false, alias?: string  } 
  | { name: 'updateManyInjuries', args?: MutationUpdateManyInjuriesArgs[] | false, alias?: string  } 
  | { name: 'upsertInjury', args?: MutationUpsertInjuryArgs[] | false, alias?: string  } 
  | { name: 'deleteInjury', args?: MutationDeleteInjuryArgs[] | false, alias?: string  } 
  | { name: 'deleteManyInjuries', args?: MutationDeleteManyInjuriesArgs[] | false, alias?: string  } 
  | { name: 'createMatch', args?: MutationCreateMatchArgs[] | false, alias?: string  } 
  | { name: 'updateMatch', args?: MutationUpdateMatchArgs[] | false, alias?: string  } 
  | { name: 'updateManyMatches', args?: MutationUpdateManyMatchesArgs[] | false, alias?: string  } 
  | { name: 'upsertMatch', args?: MutationUpsertMatchArgs[] | false, alias?: string  } 
  | { name: 'deleteMatch', args?: MutationDeleteMatchArgs[] | false, alias?: string  } 
  | { name: 'deleteManyMatches', args?: MutationDeleteManyMatchesArgs[] | false, alias?: string  } 
  | { name: 'createGoal', args?: MutationCreateGoalArgs[] | false, alias?: string  } 
  | { name: 'updateGoal', args?: MutationUpdateGoalArgs[] | false, alias?: string  } 
  | { name: 'updateManyGoals', args?: MutationUpdateManyGoalsArgs[] | false, alias?: string  } 
  | { name: 'upsertGoal', args?: MutationUpsertGoalArgs[] | false, alias?: string  } 
  | { name: 'deleteGoal', args?: MutationDeleteGoalArgs[] | false, alias?: string  } 
  | { name: 'deleteManyGoals', args?: MutationDeleteManyGoalsArgs[] | false, alias?: string  } 
  | { name: 'createAssist', args?: MutationCreateAssistArgs[] | false, alias?: string  } 
  | { name: 'updateAssist', args?: MutationUpdateAssistArgs[] | false, alias?: string  } 
  | { name: 'updateManyAssists', args?: MutationUpdateManyAssistsArgs[] | false, alias?: string  } 
  | { name: 'upsertAssist', args?: MutationUpsertAssistArgs[] | false, alias?: string  } 
  | { name: 'deleteAssist', args?: MutationDeleteAssistArgs[] | false, alias?: string  } 
  | { name: 'deleteManyAssists', args?: MutationDeleteManyAssistsArgs[] | false, alias?: string  } 
  | { name: 'createBooking', args?: MutationCreateBookingArgs[] | false, alias?: string  } 
  | { name: 'updateBooking', args?: MutationUpdateBookingArgs[] | false, alias?: string  } 
  | { name: 'updateManyBookings', args?: MutationUpdateManyBookingsArgs[] | false, alias?: string  } 
  | { name: 'upsertBooking', args?: MutationUpsertBookingArgs[] | false, alias?: string  } 
  | { name: 'deleteBooking', args?: MutationDeleteBookingArgs[] | false, alias?: string  } 
  | { name: 'deleteManyBookings', args?: MutationDeleteManyBookingsArgs[] | false, alias?: string  } 
  | { name: 'createTeam', args?: MutationCreateTeamArgs[] | false, alias?: string  } 
  | { name: 'updateTeam', args?: MutationUpdateTeamArgs[] | false, alias?: string  } 
  | { name: 'updateManyTeams', args?: MutationUpdateManyTeamsArgs[] | false, alias?: string  } 
  | { name: 'upsertTeam', args?: MutationUpsertTeamArgs[] | false, alias?: string  } 
  | { name: 'deleteTeam', args?: MutationDeleteTeamArgs[] | false, alias?: string  } 
  | { name: 'deleteManyTeams', args?: MutationDeleteManyTeamsArgs[] | false, alias?: string  } 
  | { name: 'createStaff', args?: MutationCreateStaffArgs[] | false, alias?: string  } 
  | { name: 'updateStaff', args?: MutationUpdateStaffArgs[] | false, alias?: string  } 
  | { name: 'updateManyStaffs', args?: MutationUpdateManyStaffsArgs[] | false, alias?: string  } 
  | { name: 'upsertStaff', args?: MutationUpsertStaffArgs[] | false, alias?: string  } 
  | { name: 'deleteStaff', args?: MutationDeleteStaffArgs[] | false, alias?: string  } 
  | { name: 'deleteManyStaffs', args?: MutationDeleteManyStaffsArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createPlayer'
  | 'updatePlayer'
  | 'updateManyPlayers'
  | 'upsertPlayer'
  | 'deletePlayer'
  | 'deleteManyPlayers'
  | 'createInjury'
  | 'updateInjury'
  | 'updateManyInjuries'
  | 'upsertInjury'
  | 'deleteInjury'
  | 'deleteManyInjuries'
  | 'createMatch'
  | 'updateMatch'
  | 'updateManyMatches'
  | 'upsertMatch'
  | 'deleteMatch'
  | 'deleteManyMatches'
  | 'createGoal'
  | 'updateGoal'
  | 'updateManyGoals'
  | 'upsertGoal'
  | 'deleteGoal'
  | 'deleteManyGoals'
  | 'createAssist'
  | 'updateAssist'
  | 'updateManyAssists'
  | 'upsertAssist'
  | 'deleteAssist'
  | 'deleteManyAssists'
  | 'createBooking'
  | 'updateBooking'
  | 'updateManyBookings'
  | 'upsertBooking'
  | 'deleteBooking'
  | 'deleteManyBookings'
  | 'createTeam'
  | 'updateTeam'
  | 'updateManyTeams'
  | 'upsertTeam'
  | 'deleteTeam'
  | 'deleteManyTeams'
  | 'createStaff'
  | 'updateStaff'
  | 'updateManyStaffs'
  | 'upsertStaff'
  | 'deleteStaff'
  | 'deleteManyStaffs'


type MutationCreatePlayerArgs =
  | 'data'
type MutationUpdatePlayerArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPlayersArgs =
  | 'data'
  | 'where'
type MutationUpsertPlayerArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePlayerArgs =
  | 'where'
type MutationDeleteManyPlayersArgs =
  | 'where'
type MutationCreateInjuryArgs =
  | 'data'
type MutationUpdateInjuryArgs =
  | 'data'
  | 'where'
type MutationUpdateManyInjuriesArgs =
  | 'data'
  | 'where'
type MutationUpsertInjuryArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteInjuryArgs =
  | 'where'
type MutationDeleteManyInjuriesArgs =
  | 'where'
type MutationCreateMatchArgs =
  | 'data'
type MutationUpdateMatchArgs =
  | 'data'
  | 'where'
type MutationUpdateManyMatchesArgs =
  | 'data'
  | 'where'
type MutationUpsertMatchArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteMatchArgs =
  | 'where'
type MutationDeleteManyMatchesArgs =
  | 'where'
type MutationCreateGoalArgs =
  | 'data'
type MutationUpdateGoalArgs =
  | 'data'
  | 'where'
type MutationUpdateManyGoalsArgs =
  | 'data'
  | 'where'
type MutationUpsertGoalArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteGoalArgs =
  | 'where'
type MutationDeleteManyGoalsArgs =
  | 'where'
type MutationCreateAssistArgs =
  | 'data'
type MutationUpdateAssistArgs =
  | 'data'
  | 'where'
type MutationUpdateManyAssistsArgs =
  | 'data'
  | 'where'
type MutationUpsertAssistArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteAssistArgs =
  | 'where'
type MutationDeleteManyAssistsArgs =
  | 'where'
type MutationCreateBookingArgs =
  | 'data'
type MutationUpdateBookingArgs =
  | 'data'
  | 'where'
type MutationUpdateManyBookingsArgs =
  | 'data'
  | 'where'
type MutationUpsertBookingArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteBookingArgs =
  | 'where'
type MutationDeleteManyBookingsArgs =
  | 'where'
type MutationCreateTeamArgs =
  | 'data'
type MutationUpdateTeamArgs =
  | 'data'
  | 'where'
type MutationUpdateManyTeamsArgs =
  | 'data'
  | 'where'
type MutationUpsertTeamArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteTeamArgs =
  | 'where'
type MutationDeleteManyTeamsArgs =
  | 'where'
type MutationCreateStaffArgs =
  | 'data'
type MutationUpdateStaffArgs =
  | 'data'
  | 'where'
type MutationUpdateManyStaffsArgs =
  | 'data'
  | 'where'
type MutationUpsertStaffArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteStaffArgs =
  | 'where'
type MutationDeleteManyStaffsArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createPlayer: {
    type: 'Player'
    args: Record<MutationCreatePlayerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PlayerCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Player> | prisma.Player
  }
  updatePlayer: {
    type: 'Player'
    args: Record<MutationUpdatePlayerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PlayerUpdateInput, where: PlayerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Player | null> | prisma.Player | null
  }
  updateManyPlayers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPlayersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PlayerUpdateManyMutationInput, where?: PlayerWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPlayer: {
    type: 'Player'
    args: Record<MutationUpsertPlayerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PlayerWhereUniqueInput, create: PlayerCreateInput, update: PlayerUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Player> | prisma.Player
  }
  deletePlayer: {
    type: 'Player'
    args: Record<MutationDeletePlayerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PlayerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Player | null> | prisma.Player | null
  }
  deleteManyPlayers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPlayersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PlayerWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createInjury: {
    type: 'Injury'
    args: Record<MutationCreateInjuryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: InjuryCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Injury> | prisma.Injury
  }
  updateInjury: {
    type: 'Injury'
    args: Record<MutationUpdateInjuryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: InjuryUpdateInput, where: InjuryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Injury | null> | prisma.Injury | null
  }
  updateManyInjuries: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyInjuriesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: InjuryUpdateManyMutationInput, where?: InjuryWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertInjury: {
    type: 'Injury'
    args: Record<MutationUpsertInjuryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: InjuryWhereUniqueInput, create: InjuryCreateInput, update: InjuryUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Injury> | prisma.Injury
  }
  deleteInjury: {
    type: 'Injury'
    args: Record<MutationDeleteInjuryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: InjuryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Injury | null> | prisma.Injury | null
  }
  deleteManyInjuries: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyInjuriesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: InjuryWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createMatch: {
    type: 'Match'
    args: Record<MutationCreateMatchArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MatchCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Match> | prisma.Match
  }
  updateMatch: {
    type: 'Match'
    args: Record<MutationUpdateMatchArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MatchUpdateInput, where: MatchWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Match | null> | prisma.Match | null
  }
  updateManyMatches: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyMatchesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MatchUpdateManyMutationInput, where?: MatchWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertMatch: {
    type: 'Match'
    args: Record<MutationUpsertMatchArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: MatchWhereUniqueInput, create: MatchCreateInput, update: MatchUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Match> | prisma.Match
  }
  deleteMatch: {
    type: 'Match'
    args: Record<MutationDeleteMatchArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: MatchWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Match | null> | prisma.Match | null
  }
  deleteManyMatches: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyMatchesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: MatchWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createGoal: {
    type: 'Goal'
    args: Record<MutationCreateGoalArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GoalCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Goal> | prisma.Goal
  }
  updateGoal: {
    type: 'Goal'
    args: Record<MutationUpdateGoalArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GoalUpdateInput, where: GoalWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Goal | null> | prisma.Goal | null
  }
  updateManyGoals: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyGoalsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GoalUpdateManyMutationInput, where?: GoalWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertGoal: {
    type: 'Goal'
    args: Record<MutationUpsertGoalArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GoalWhereUniqueInput, create: GoalCreateInput, update: GoalUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Goal> | prisma.Goal
  }
  deleteGoal: {
    type: 'Goal'
    args: Record<MutationDeleteGoalArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GoalWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Goal | null> | prisma.Goal | null
  }
  deleteManyGoals: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyGoalsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: GoalWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createAssist: {
    type: 'Assist'
    args: Record<MutationCreateAssistArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AssistCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Assist> | prisma.Assist
  }
  updateAssist: {
    type: 'Assist'
    args: Record<MutationUpdateAssistArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AssistUpdateInput, where: AssistWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Assist | null> | prisma.Assist | null
  }
  updateManyAssists: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyAssistsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AssistUpdateManyMutationInput, where?: AssistWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertAssist: {
    type: 'Assist'
    args: Record<MutationUpsertAssistArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: AssistWhereUniqueInput, create: AssistCreateInput, update: AssistUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Assist> | prisma.Assist
  }
  deleteAssist: {
    type: 'Assist'
    args: Record<MutationDeleteAssistArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: AssistWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Assist | null> | prisma.Assist | null
  }
  deleteManyAssists: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyAssistsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: AssistWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createBooking: {
    type: 'Booking'
    args: Record<MutationCreateBookingArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: BookingCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Booking> | prisma.Booking
  }
  updateBooking: {
    type: 'Booking'
    args: Record<MutationUpdateBookingArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: BookingUpdateInput, where: BookingWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Booking | null> | prisma.Booking | null
  }
  updateManyBookings: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyBookingsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: BookingUpdateManyMutationInput, where?: BookingWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertBooking: {
    type: 'Booking'
    args: Record<MutationUpsertBookingArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: BookingWhereUniqueInput, create: BookingCreateInput, update: BookingUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Booking> | prisma.Booking
  }
  deleteBooking: {
    type: 'Booking'
    args: Record<MutationDeleteBookingArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: BookingWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Booking | null> | prisma.Booking | null
  }
  deleteManyBookings: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyBookingsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: BookingWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createTeam: {
    type: 'Team'
    args: Record<MutationCreateTeamArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TeamCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team> | prisma.Team
  }
  updateTeam: {
    type: 'Team'
    args: Record<MutationUpdateTeamArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TeamUpdateInput, where: TeamWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team | null> | prisma.Team | null
  }
  updateManyTeams: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyTeamsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TeamUpdateManyMutationInput, where?: TeamWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertTeam: {
    type: 'Team'
    args: Record<MutationUpsertTeamArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TeamWhereUniqueInput, create: TeamCreateInput, update: TeamUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team> | prisma.Team
  }
  deleteTeam: {
    type: 'Team'
    args: Record<MutationDeleteTeamArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TeamWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team | null> | prisma.Team | null
  }
  deleteManyTeams: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyTeamsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: TeamWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createStaff: {
    type: 'Staff'
    args: Record<MutationCreateStaffArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: StaffCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Staff> | prisma.Staff
  }
  updateStaff: {
    type: 'Staff'
    args: Record<MutationUpdateStaffArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: StaffUpdateInput, where: StaffWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Staff | null> | prisma.Staff | null
  }
  updateManyStaffs: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyStaffsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: StaffUpdateManyMutationInput, where?: StaffWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertStaff: {
    type: 'Staff'
    args: Record<MutationUpsertStaffArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: StaffWhereUniqueInput, create: StaffCreateInput, update: StaffUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Staff> | prisma.Staff
  }
  deleteStaff: {
    type: 'Staff'
    args: Record<MutationDeleteStaffArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: StaffWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Staff | null> | prisma.Staff | null
  }
  deleteManyStaffs: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyStaffsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: StaffWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'player', args?: SubscriptionPlayerArgs[] | false, alias?: string  } 
  | { name: 'injury', args?: SubscriptionInjuryArgs[] | false, alias?: string  } 
  | { name: 'match', args?: SubscriptionMatchArgs[] | false, alias?: string  } 
  | { name: 'goal', args?: SubscriptionGoalArgs[] | false, alias?: string  } 
  | { name: 'assist', args?: SubscriptionAssistArgs[] | false, alias?: string  } 
  | { name: 'booking', args?: SubscriptionBookingArgs[] | false, alias?: string  } 
  | { name: 'team', args?: SubscriptionTeamArgs[] | false, alias?: string  } 
  | { name: 'staff', args?: SubscriptionStaffArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'player'
  | 'injury'
  | 'match'
  | 'goal'
  | 'assist'
  | 'booking'
  | 'team'
  | 'staff'


type SubscriptionPlayerArgs =
  | 'where'
type SubscriptionInjuryArgs =
  | 'where'
type SubscriptionMatchArgs =
  | 'where'
type SubscriptionGoalArgs =
  | 'where'
type SubscriptionAssistArgs =
  | 'where'
type SubscriptionBookingArgs =
  | 'where'
type SubscriptionTeamArgs =
  | 'where'
type SubscriptionStaffArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  player: {
    type: 'PlayerSubscriptionPayload'
    args: Record<SubscriptionPlayerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PlayerSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PlayerSubscriptionPayload | null> | prisma.PlayerSubscriptionPayload | null
  }
  injury: {
    type: 'InjurySubscriptionPayload'
    args: Record<SubscriptionInjuryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: InjurySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InjurySubscriptionPayload | null> | prisma.InjurySubscriptionPayload | null
  }
  match: {
    type: 'MatchSubscriptionPayload'
    args: Record<SubscriptionMatchArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: MatchSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MatchSubscriptionPayload | null> | prisma.MatchSubscriptionPayload | null
  }
  goal: {
    type: 'GoalSubscriptionPayload'
    args: Record<SubscriptionGoalArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: GoalSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GoalSubscriptionPayload | null> | prisma.GoalSubscriptionPayload | null
  }
  assist: {
    type: 'AssistSubscriptionPayload'
    args: Record<SubscriptionAssistArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: AssistSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AssistSubscriptionPayload | null> | prisma.AssistSubscriptionPayload | null
  }
  booking: {
    type: 'BookingSubscriptionPayload'
    args: Record<SubscriptionBookingArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: BookingSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BookingSubscriptionPayload | null> | prisma.BookingSubscriptionPayload | null
  }
  team: {
    type: 'TeamSubscriptionPayload'
    args: Record<SubscriptionTeamArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: TeamSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TeamSubscriptionPayload | null> | prisma.TeamSubscriptionPayload | null
  }
  staff: {
    type: 'StaffSubscriptionPayload'
    args: Record<SubscriptionStaffArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: StaffSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.StaffSubscriptionPayload | null> | prisma.StaffSubscriptionPayload | null
  }
}
  

// Types for PlayerSubscriptionPayload

type PlayerSubscriptionPayloadObject =
  | PlayerSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PlayerSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PlayerSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PlayerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Player'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PlayerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Player | null> | prisma.Player | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PlayerPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PlayerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PlayerPreviousValues | null> | prisma.PlayerPreviousValues | null
  }
}
  

// Types for PlayerPreviousValues

type PlayerPreviousValuesObject =
  | PlayerPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'nick', args?: [] | false, alias?: string  } 
  | { name: 'shirtNumber', args?: [] | false, alias?: string  } 
  | { name: 'imgUrl', args?: [] | false, alias?: string  } 
  | { name: 'captain', args?: [] | false, alias?: string  } 
  | { name: 'position', args?: [] | false, alias?: string  } 
  | { name: 'altPosition', args?: [] | false, alias?: string  } 
  | { name: 'foot', args?: [] | false, alias?: string  } 
  | { name: 'injured', args?: [] | false, alias?: string  } 

type PlayerPreviousValuesFields =
  | 'id'
  | 'nick'
  | 'shirtNumber'
  | 'imgUrl'
  | 'captain'
  | 'position'
  | 'altPosition'
  | 'foot'
  | 'injured'



  

export interface PlayerPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  nick: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  shirtNumber: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  imgUrl: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  captain: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  position: {
    type: 'PlayerPosition'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PlayerPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PlayerPosition> | prisma.PlayerPosition
  }
  altPosition: {
    type: 'PlayerPosition'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PlayerPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PlayerPosition | null> | prisma.PlayerPosition | null
  }
  foot: {
    type: 'Foot'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PlayerPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Foot | null> | prisma.Foot | null
  }
  injured: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for InjurySubscriptionPayload

type InjurySubscriptionPayloadObject =
  | InjurySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type InjurySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface InjurySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InjurySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Injury'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"InjurySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Injury | null> | prisma.Injury | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'InjuryPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"InjurySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InjuryPreviousValues | null> | prisma.InjuryPreviousValues | null
  }
}
  

// Types for InjuryPreviousValues

type InjuryPreviousValuesObject =
  | InjuryPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'startAt', args?: [] | false, alias?: string  } 
  | { name: 'endAt', args?: [] | false, alias?: string  } 
  | { name: 'desc', args?: [] | false, alias?: string  } 

type InjuryPreviousValuesFields =
  | 'id'
  | 'startAt'
  | 'endAt'
  | 'desc'



  

export interface InjuryPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  endAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  desc: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for MatchSubscriptionPayload

type MatchSubscriptionPayloadObject =
  | MatchSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type MatchSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface MatchSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MatchSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Match'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MatchSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Match | null> | prisma.Match | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'MatchPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MatchSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MatchPreviousValues | null> | prisma.MatchPreviousValues | null
  }
}
  

// Types for MatchPreviousValues

type MatchPreviousValuesObject =
  | MatchPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'date', args?: [] | false, alias?: string  } 
  | { name: 'jornada', args?: [] | false, alias?: string  } 
  | { name: 'finished', args?: [] | false, alias?: string  } 
  | { name: 'homeTeam', args?: [] | false, alias?: string  } 
  | { name: 'win', args?: [] | false, alias?: string  } 
  | { name: 'competition', args?: [] | false, alias?: string  } 
  | { name: 'referees', args?: [] | false, alias?: string  } 
  | { name: 'desc', args?: [] | false, alias?: string  } 

type MatchPreviousValuesFields =
  | 'id'
  | 'date'
  | 'jornada'
  | 'finished'
  | 'homeTeam'
  | 'win'
  | 'competition'
  | 'referees'
  | 'desc'



  

export interface MatchPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  date: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  jornada: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  finished: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  homeTeam: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  win: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  competition: {
    type: 'Competiton'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MatchPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Competiton | null> | prisma.Competiton | null
  }
  referees: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  desc: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for GoalSubscriptionPayload

type GoalSubscriptionPayloadObject =
  | GoalSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type GoalSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface GoalSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GoalSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Goal'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GoalSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Goal | null> | prisma.Goal | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'GoalPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GoalSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GoalPreviousValues | null> | prisma.GoalPreviousValues | null
  }
}
  

// Types for GoalPreviousValues

type GoalPreviousValuesObject =
  | GoalPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'min', args?: [] | false, alias?: string  } 
  | { name: 'desc', args?: [] | false, alias?: string  } 

type GoalPreviousValuesFields =
  | 'id'
  | 'min'
  | 'desc'



  

export interface GoalPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  min: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  desc: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for AssistSubscriptionPayload

type AssistSubscriptionPayloadObject =
  | AssistSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type AssistSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface AssistSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AssistSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Assist'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AssistSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Assist | null> | prisma.Assist | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'AssistPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AssistSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AssistPreviousValues | null> | prisma.AssistPreviousValues | null
  }
}
  

// Types for AssistPreviousValues

type AssistPreviousValuesObject =
  | AssistPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'min', args?: [] | false, alias?: string  } 
  | { name: 'desc', args?: [] | false, alias?: string  } 

type AssistPreviousValuesFields =
  | 'id'
  | 'min'
  | 'desc'



  

export interface AssistPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  min: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  desc: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for BookingSubscriptionPayload

type BookingSubscriptionPayloadObject =
  | BookingSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type BookingSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface BookingSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BookingSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Booking'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"BookingSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Booking | null> | prisma.Booking | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'BookingPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"BookingSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BookingPreviousValues | null> | prisma.BookingPreviousValues | null
  }
}
  

// Types for BookingPreviousValues

type BookingPreviousValuesObject =
  | BookingPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'min', args?: [] | false, alias?: string  } 
  | { name: 'desc', args?: [] | false, alias?: string  } 
  | { name: 'card', args?: [] | false, alias?: string  } 

type BookingPreviousValuesFields =
  | 'id'
  | 'min'
  | 'desc'
  | 'card'



  

export interface BookingPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  min: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  desc: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  card: {
    type: 'ColorCard'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"BookingPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ColorCard | null> | prisma.ColorCard | null
  }
}
  

// Types for TeamSubscriptionPayload

type TeamSubscriptionPayloadObject =
  | TeamSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type TeamSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface TeamSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TeamSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Team'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TeamSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team | null> | prisma.Team | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'TeamPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TeamSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TeamPreviousValues | null> | prisma.TeamPreviousValues | null
  }
}
  

// Types for TeamPreviousValues

type TeamPreviousValuesObject =
  | TeamPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'logoUrl', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type TeamPreviousValuesFields =
  | 'id'
  | 'logoUrl'
  | 'name'



  

export interface TeamPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  logoUrl: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for StaffSubscriptionPayload

type StaffSubscriptionPayloadObject =
  | StaffSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type StaffSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface StaffSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"StaffSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Staff'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"StaffSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Staff | null> | prisma.Staff | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'StaffPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"StaffSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.StaffPreviousValues | null> | prisma.StaffPreviousValues | null
  }
}
  

// Types for StaffPreviousValues

type StaffPreviousValuesObject =
  | StaffPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'nick', args?: [] | false, alias?: string  } 
  | { name: 'imgUrl', args?: [] | false, alias?: string  } 
  | { name: 'role', args?: [] | false, alias?: string  } 

type StaffPreviousValuesFields =
  | 'id'
  | 'nick'
  | 'imgUrl'
  | 'role'



  

export interface StaffPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  nick: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  imgUrl: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  role: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  


export interface PlayerWhereUniqueInput {
  id?: string | null
}
export type PlayerWhereUniqueInputInputObject =
  | Extract<keyof PlayerWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface PlayerWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  nick?: string | null
  nick_not?: string | null
  nick_in?: string[]
  nick_not_in?: string[]
  nick_lt?: string | null
  nick_lte?: string | null
  nick_gt?: string | null
  nick_gte?: string | null
  nick_contains?: string | null
  nick_not_contains?: string | null
  nick_starts_with?: string | null
  nick_not_starts_with?: string | null
  nick_ends_with?: string | null
  nick_not_ends_with?: string | null
  shirtNumber?: number | null
  shirtNumber_not?: number | null
  shirtNumber_in?: number[]
  shirtNumber_not_in?: number[]
  shirtNumber_lt?: number | null
  shirtNumber_lte?: number | null
  shirtNumber_gt?: number | null
  shirtNumber_gte?: number | null
  imgUrl?: string | null
  imgUrl_not?: string | null
  imgUrl_in?: string[]
  imgUrl_not_in?: string[]
  imgUrl_lt?: string | null
  imgUrl_lte?: string | null
  imgUrl_gt?: string | null
  imgUrl_gte?: string | null
  imgUrl_contains?: string | null
  imgUrl_not_contains?: string | null
  imgUrl_starts_with?: string | null
  imgUrl_not_starts_with?: string | null
  imgUrl_ends_with?: string | null
  imgUrl_not_ends_with?: string | null
  team?: TeamWhereInput | null
  captain?: boolean | null
  captain_not?: boolean | null
  personalInfo?: PersonalInfoWhereInput | null
  position?: prisma.PlayerPosition | null
  position_not?: prisma.PlayerPosition | null
  position_in?: prisma.PlayerPosition[]
  position_not_in?: prisma.PlayerPosition[]
  altPosition?: prisma.PlayerPosition | null
  altPosition_not?: prisma.PlayerPosition | null
  altPosition_in?: prisma.PlayerPosition[]
  altPosition_not_in?: prisma.PlayerPosition[]
  assessment?: AssessmentWhereInput | null
  foot?: prisma.Foot | null
  foot_not?: prisma.Foot | null
  foot_in?: prisma.Foot[]
  foot_not_in?: prisma.Foot[]
  from?: WhereFromWhereInput | null
  injured?: boolean | null
  injured_not?: boolean | null
  injury_some?: InjuryWhereInput | null
  sizes?: SizeWhereInput | null
  goals_some?: GoalWhereInput | null
  assist_some?: AssistWhereInput | null
  bookings_some?: BookingWhereInput | null
  lineup_some?: MatchWhereInput | null
  bench_some?: MatchWhereInput | null
  AND?: PlayerWhereInput[]
}
export type PlayerWhereInputInputObject =
  | Extract<keyof PlayerWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'nick', alias?: string  } 
  | { name: 'nick_not', alias?: string  } 
  | { name: 'nick_in', alias?: string  } 
  | { name: 'nick_not_in', alias?: string  } 
  | { name: 'nick_lt', alias?: string  } 
  | { name: 'nick_lte', alias?: string  } 
  | { name: 'nick_gt', alias?: string  } 
  | { name: 'nick_gte', alias?: string  } 
  | { name: 'nick_contains', alias?: string  } 
  | { name: 'nick_not_contains', alias?: string  } 
  | { name: 'nick_starts_with', alias?: string  } 
  | { name: 'nick_not_starts_with', alias?: string  } 
  | { name: 'nick_ends_with', alias?: string  } 
  | { name: 'nick_not_ends_with', alias?: string  } 
  | { name: 'shirtNumber', alias?: string  } 
  | { name: 'shirtNumber_not', alias?: string  } 
  | { name: 'shirtNumber_in', alias?: string  } 
  | { name: 'shirtNumber_not_in', alias?: string  } 
  | { name: 'shirtNumber_lt', alias?: string  } 
  | { name: 'shirtNumber_lte', alias?: string  } 
  | { name: 'shirtNumber_gt', alias?: string  } 
  | { name: 'shirtNumber_gte', alias?: string  } 
  | { name: 'imgUrl', alias?: string  } 
  | { name: 'imgUrl_not', alias?: string  } 
  | { name: 'imgUrl_in', alias?: string  } 
  | { name: 'imgUrl_not_in', alias?: string  } 
  | { name: 'imgUrl_lt', alias?: string  } 
  | { name: 'imgUrl_lte', alias?: string  } 
  | { name: 'imgUrl_gt', alias?: string  } 
  | { name: 'imgUrl_gte', alias?: string  } 
  | { name: 'imgUrl_contains', alias?: string  } 
  | { name: 'imgUrl_not_contains', alias?: string  } 
  | { name: 'imgUrl_starts_with', alias?: string  } 
  | { name: 'imgUrl_not_starts_with', alias?: string  } 
  | { name: 'imgUrl_ends_with', alias?: string  } 
  | { name: 'imgUrl_not_ends_with', alias?: string  } 
  | { name: 'team', alias?: string  } 
  | { name: 'captain', alias?: string  } 
  | { name: 'captain_not', alias?: string  } 
  | { name: 'personalInfo', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'position_not', alias?: string  } 
  | { name: 'position_in', alias?: string  } 
  | { name: 'position_not_in', alias?: string  } 
  | { name: 'altPosition', alias?: string  } 
  | { name: 'altPosition_not', alias?: string  } 
  | { name: 'altPosition_in', alias?: string  } 
  | { name: 'altPosition_not_in', alias?: string  } 
  | { name: 'assessment', alias?: string  } 
  | { name: 'foot', alias?: string  } 
  | { name: 'foot_not', alias?: string  } 
  | { name: 'foot_in', alias?: string  } 
  | { name: 'foot_not_in', alias?: string  } 
  | { name: 'from', alias?: string  } 
  | { name: 'injured', alias?: string  } 
  | { name: 'injured_not', alias?: string  } 
  | { name: 'injury_some', alias?: string  } 
  | { name: 'sizes', alias?: string  } 
  | { name: 'goals_some', alias?: string  } 
  | { name: 'assist_some', alias?: string  } 
  | { name: 'bookings_some', alias?: string  } 
  | { name: 'lineup_some', alias?: string  } 
  | { name: 'bench_some', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface TeamWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  logoUrl?: string | null
  logoUrl_not?: string | null
  logoUrl_in?: string[]
  logoUrl_not_in?: string[]
  logoUrl_lt?: string | null
  logoUrl_lte?: string | null
  logoUrl_gt?: string | null
  logoUrl_gte?: string | null
  logoUrl_contains?: string | null
  logoUrl_not_contains?: string | null
  logoUrl_starts_with?: string | null
  logoUrl_not_starts_with?: string | null
  logoUrl_ends_with?: string | null
  logoUrl_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  players_some?: PlayerWhereInput | null
  staff_some?: StaffWhereInput | null
  AND?: TeamWhereInput[]
}
export type TeamWhereInputInputObject =
  | Extract<keyof TeamWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'logoUrl', alias?: string  } 
  | { name: 'logoUrl_not', alias?: string  } 
  | { name: 'logoUrl_in', alias?: string  } 
  | { name: 'logoUrl_not_in', alias?: string  } 
  | { name: 'logoUrl_lt', alias?: string  } 
  | { name: 'logoUrl_lte', alias?: string  } 
  | { name: 'logoUrl_gt', alias?: string  } 
  | { name: 'logoUrl_gte', alias?: string  } 
  | { name: 'logoUrl_contains', alias?: string  } 
  | { name: 'logoUrl_not_contains', alias?: string  } 
  | { name: 'logoUrl_starts_with', alias?: string  } 
  | { name: 'logoUrl_not_starts_with', alias?: string  } 
  | { name: 'logoUrl_ends_with', alias?: string  } 
  | { name: 'logoUrl_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'players_some', alias?: string  } 
  | { name: 'staff_some', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface StaffWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  nick?: string | null
  nick_not?: string | null
  nick_in?: string[]
  nick_not_in?: string[]
  nick_lt?: string | null
  nick_lte?: string | null
  nick_gt?: string | null
  nick_gte?: string | null
  nick_contains?: string | null
  nick_not_contains?: string | null
  nick_starts_with?: string | null
  nick_not_starts_with?: string | null
  nick_ends_with?: string | null
  nick_not_ends_with?: string | null
  imgUrl?: string | null
  imgUrl_not?: string | null
  imgUrl_in?: string[]
  imgUrl_not_in?: string[]
  imgUrl_lt?: string | null
  imgUrl_lte?: string | null
  imgUrl_gt?: string | null
  imgUrl_gte?: string | null
  imgUrl_contains?: string | null
  imgUrl_not_contains?: string | null
  imgUrl_starts_with?: string | null
  imgUrl_not_starts_with?: string | null
  imgUrl_ends_with?: string | null
  imgUrl_not_ends_with?: string | null
  team?: TeamWhereInput | null
  personalInfo?: StaffInfoWhereInput | null
  from?: StaffFromWhereInput | null
  sizes?: StaffSizeWhereInput | null
  role?: string | null
  role_not?: string | null
  role_in?: string[]
  role_not_in?: string[]
  role_lt?: string | null
  role_lte?: string | null
  role_gt?: string | null
  role_gte?: string | null
  role_contains?: string | null
  role_not_contains?: string | null
  role_starts_with?: string | null
  role_not_starts_with?: string | null
  role_ends_with?: string | null
  role_not_ends_with?: string | null
  matches_some?: MatchWhereInput | null
  AND?: StaffWhereInput[]
}
export type StaffWhereInputInputObject =
  | Extract<keyof StaffWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'nick', alias?: string  } 
  | { name: 'nick_not', alias?: string  } 
  | { name: 'nick_in', alias?: string  } 
  | { name: 'nick_not_in', alias?: string  } 
  | { name: 'nick_lt', alias?: string  } 
  | { name: 'nick_lte', alias?: string  } 
  | { name: 'nick_gt', alias?: string  } 
  | { name: 'nick_gte', alias?: string  } 
  | { name: 'nick_contains', alias?: string  } 
  | { name: 'nick_not_contains', alias?: string  } 
  | { name: 'nick_starts_with', alias?: string  } 
  | { name: 'nick_not_starts_with', alias?: string  } 
  | { name: 'nick_ends_with', alias?: string  } 
  | { name: 'nick_not_ends_with', alias?: string  } 
  | { name: 'imgUrl', alias?: string  } 
  | { name: 'imgUrl_not', alias?: string  } 
  | { name: 'imgUrl_in', alias?: string  } 
  | { name: 'imgUrl_not_in', alias?: string  } 
  | { name: 'imgUrl_lt', alias?: string  } 
  | { name: 'imgUrl_lte', alias?: string  } 
  | { name: 'imgUrl_gt', alias?: string  } 
  | { name: 'imgUrl_gte', alias?: string  } 
  | { name: 'imgUrl_contains', alias?: string  } 
  | { name: 'imgUrl_not_contains', alias?: string  } 
  | { name: 'imgUrl_starts_with', alias?: string  } 
  | { name: 'imgUrl_not_starts_with', alias?: string  } 
  | { name: 'imgUrl_ends_with', alias?: string  } 
  | { name: 'imgUrl_not_ends_with', alias?: string  } 
  | { name: 'team', alias?: string  } 
  | { name: 'personalInfo', alias?: string  } 
  | { name: 'from', alias?: string  } 
  | { name: 'sizes', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'role_not', alias?: string  } 
  | { name: 'role_in', alias?: string  } 
  | { name: 'role_not_in', alias?: string  } 
  | { name: 'role_lt', alias?: string  } 
  | { name: 'role_lte', alias?: string  } 
  | { name: 'role_gt', alias?: string  } 
  | { name: 'role_gte', alias?: string  } 
  | { name: 'role_contains', alias?: string  } 
  | { name: 'role_not_contains', alias?: string  } 
  | { name: 'role_starts_with', alias?: string  } 
  | { name: 'role_not_starts_with', alias?: string  } 
  | { name: 'role_ends_with', alias?: string  } 
  | { name: 'role_not_ends_with', alias?: string  } 
  | { name: 'matches_some', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface StaffInfoWhereInput {
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  firstName?: string | null
  firstName_not?: string | null
  firstName_in?: string[]
  firstName_not_in?: string[]
  firstName_lt?: string | null
  firstName_lte?: string | null
  firstName_gt?: string | null
  firstName_gte?: string | null
  firstName_contains?: string | null
  firstName_not_contains?: string | null
  firstName_starts_with?: string | null
  firstName_not_starts_with?: string | null
  firstName_ends_with?: string | null
  firstName_not_ends_with?: string | null
  lastName?: string | null
  lastName_not?: string | null
  lastName_in?: string[]
  lastName_not_in?: string[]
  lastName_lt?: string | null
  lastName_lte?: string | null
  lastName_gt?: string | null
  lastName_gte?: string | null
  lastName_contains?: string | null
  lastName_not_contains?: string | null
  lastName_starts_with?: string | null
  lastName_not_starts_with?: string | null
  lastName_ends_with?: string | null
  lastName_not_ends_with?: string | null
  dateOfBirth?: string | null
  dateOfBirth_not?: string | null
  dateOfBirth_in?: string[]
  dateOfBirth_not_in?: string[]
  dateOfBirth_lt?: string | null
  dateOfBirth_lte?: string | null
  dateOfBirth_gt?: string | null
  dateOfBirth_gte?: string | null
  tel?: number | null
  tel_not?: number | null
  tel_in?: number[]
  tel_not_in?: number[]
  tel_lt?: number | null
  tel_lte?: number | null
  tel_gt?: number | null
  tel_gte?: number | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  dni?: string | null
  dni_not?: string | null
  dni_in?: string[]
  dni_not_in?: string[]
  dni_lt?: string | null
  dni_lte?: string | null
  dni_gt?: string | null
  dni_gte?: string | null
  dni_contains?: string | null
  dni_not_contains?: string | null
  dni_starts_with?: string | null
  dni_not_starts_with?: string | null
  dni_ends_with?: string | null
  dni_not_ends_with?: string | null
  AND?: StaffInfoWhereInput[]
}
export type StaffInfoWhereInputInputObject =
  | Extract<keyof StaffInfoWhereInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'firstName_not', alias?: string  } 
  | { name: 'firstName_in', alias?: string  } 
  | { name: 'firstName_not_in', alias?: string  } 
  | { name: 'firstName_lt', alias?: string  } 
  | { name: 'firstName_lte', alias?: string  } 
  | { name: 'firstName_gt', alias?: string  } 
  | { name: 'firstName_gte', alias?: string  } 
  | { name: 'firstName_contains', alias?: string  } 
  | { name: 'firstName_not_contains', alias?: string  } 
  | { name: 'firstName_starts_with', alias?: string  } 
  | { name: 'firstName_not_starts_with', alias?: string  } 
  | { name: 'firstName_ends_with', alias?: string  } 
  | { name: 'firstName_not_ends_with', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'lastName_not', alias?: string  } 
  | { name: 'lastName_in', alias?: string  } 
  | { name: 'lastName_not_in', alias?: string  } 
  | { name: 'lastName_lt', alias?: string  } 
  | { name: 'lastName_lte', alias?: string  } 
  | { name: 'lastName_gt', alias?: string  } 
  | { name: 'lastName_gte', alias?: string  } 
  | { name: 'lastName_contains', alias?: string  } 
  | { name: 'lastName_not_contains', alias?: string  } 
  | { name: 'lastName_starts_with', alias?: string  } 
  | { name: 'lastName_not_starts_with', alias?: string  } 
  | { name: 'lastName_ends_with', alias?: string  } 
  | { name: 'lastName_not_ends_with', alias?: string  } 
  | { name: 'dateOfBirth', alias?: string  } 
  | { name: 'dateOfBirth_not', alias?: string  } 
  | { name: 'dateOfBirth_in', alias?: string  } 
  | { name: 'dateOfBirth_not_in', alias?: string  } 
  | { name: 'dateOfBirth_lt', alias?: string  } 
  | { name: 'dateOfBirth_lte', alias?: string  } 
  | { name: 'dateOfBirth_gt', alias?: string  } 
  | { name: 'dateOfBirth_gte', alias?: string  } 
  | { name: 'tel', alias?: string  } 
  | { name: 'tel_not', alias?: string  } 
  | { name: 'tel_in', alias?: string  } 
  | { name: 'tel_not_in', alias?: string  } 
  | { name: 'tel_lt', alias?: string  } 
  | { name: 'tel_lte', alias?: string  } 
  | { name: 'tel_gt', alias?: string  } 
  | { name: 'tel_gte', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'dni', alias?: string  } 
  | { name: 'dni_not', alias?: string  } 
  | { name: 'dni_in', alias?: string  } 
  | { name: 'dni_not_in', alias?: string  } 
  | { name: 'dni_lt', alias?: string  } 
  | { name: 'dni_lte', alias?: string  } 
  | { name: 'dni_gt', alias?: string  } 
  | { name: 'dni_gte', alias?: string  } 
  | { name: 'dni_contains', alias?: string  } 
  | { name: 'dni_not_contains', alias?: string  } 
  | { name: 'dni_starts_with', alias?: string  } 
  | { name: 'dni_not_starts_with', alias?: string  } 
  | { name: 'dni_ends_with', alias?: string  } 
  | { name: 'dni_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface StaffFromWhereInput {
  address?: string | null
  address_not?: string | null
  address_in?: string[]
  address_not_in?: string[]
  address_lt?: string | null
  address_lte?: string | null
  address_gt?: string | null
  address_gte?: string | null
  address_contains?: string | null
  address_not_contains?: string | null
  address_starts_with?: string | null
  address_not_starts_with?: string | null
  address_ends_with?: string | null
  address_not_ends_with?: string | null
  number?: number | null
  number_not?: number | null
  number_in?: number[]
  number_not_in?: number[]
  number_lt?: number | null
  number_lte?: number | null
  number_gt?: number | null
  number_gte?: number | null
  town?: string | null
  town_not?: string | null
  town_in?: string[]
  town_not_in?: string[]
  town_lt?: string | null
  town_lte?: string | null
  town_gt?: string | null
  town_gte?: string | null
  town_contains?: string | null
  town_not_contains?: string | null
  town_starts_with?: string | null
  town_not_starts_with?: string | null
  town_ends_with?: string | null
  town_not_ends_with?: string | null
  province?: string | null
  province_not?: string | null
  province_in?: string[]
  province_not_in?: string[]
  province_lt?: string | null
  province_lte?: string | null
  province_gt?: string | null
  province_gte?: string | null
  province_contains?: string | null
  province_not_contains?: string | null
  province_starts_with?: string | null
  province_not_starts_with?: string | null
  province_ends_with?: string | null
  province_not_ends_with?: string | null
  countruy?: string | null
  countruy_not?: string | null
  countruy_in?: string[]
  countruy_not_in?: string[]
  countruy_lt?: string | null
  countruy_lte?: string | null
  countruy_gt?: string | null
  countruy_gte?: string | null
  countruy_contains?: string | null
  countruy_not_contains?: string | null
  countruy_starts_with?: string | null
  countruy_not_starts_with?: string | null
  countruy_ends_with?: string | null
  countruy_not_ends_with?: string | null
  PC?: number | null
  PC_not?: number | null
  PC_in?: number[]
  PC_not_in?: number[]
  PC_lt?: number | null
  PC_lte?: number | null
  PC_gt?: number | null
  PC_gte?: number | null
  AND?: StaffFromWhereInput[]
}
export type StaffFromWhereInputInputObject =
  | Extract<keyof StaffFromWhereInput, string>
  | { name: 'address', alias?: string  } 
  | { name: 'address_not', alias?: string  } 
  | { name: 'address_in', alias?: string  } 
  | { name: 'address_not_in', alias?: string  } 
  | { name: 'address_lt', alias?: string  } 
  | { name: 'address_lte', alias?: string  } 
  | { name: 'address_gt', alias?: string  } 
  | { name: 'address_gte', alias?: string  } 
  | { name: 'address_contains', alias?: string  } 
  | { name: 'address_not_contains', alias?: string  } 
  | { name: 'address_starts_with', alias?: string  } 
  | { name: 'address_not_starts_with', alias?: string  } 
  | { name: 'address_ends_with', alias?: string  } 
  | { name: 'address_not_ends_with', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'number_not', alias?: string  } 
  | { name: 'number_in', alias?: string  } 
  | { name: 'number_not_in', alias?: string  } 
  | { name: 'number_lt', alias?: string  } 
  | { name: 'number_lte', alias?: string  } 
  | { name: 'number_gt', alias?: string  } 
  | { name: 'number_gte', alias?: string  } 
  | { name: 'town', alias?: string  } 
  | { name: 'town_not', alias?: string  } 
  | { name: 'town_in', alias?: string  } 
  | { name: 'town_not_in', alias?: string  } 
  | { name: 'town_lt', alias?: string  } 
  | { name: 'town_lte', alias?: string  } 
  | { name: 'town_gt', alias?: string  } 
  | { name: 'town_gte', alias?: string  } 
  | { name: 'town_contains', alias?: string  } 
  | { name: 'town_not_contains', alias?: string  } 
  | { name: 'town_starts_with', alias?: string  } 
  | { name: 'town_not_starts_with', alias?: string  } 
  | { name: 'town_ends_with', alias?: string  } 
  | { name: 'town_not_ends_with', alias?: string  } 
  | { name: 'province', alias?: string  } 
  | { name: 'province_not', alias?: string  } 
  | { name: 'province_in', alias?: string  } 
  | { name: 'province_not_in', alias?: string  } 
  | { name: 'province_lt', alias?: string  } 
  | { name: 'province_lte', alias?: string  } 
  | { name: 'province_gt', alias?: string  } 
  | { name: 'province_gte', alias?: string  } 
  | { name: 'province_contains', alias?: string  } 
  | { name: 'province_not_contains', alias?: string  } 
  | { name: 'province_starts_with', alias?: string  } 
  | { name: 'province_not_starts_with', alias?: string  } 
  | { name: 'province_ends_with', alias?: string  } 
  | { name: 'province_not_ends_with', alias?: string  } 
  | { name: 'countruy', alias?: string  } 
  | { name: 'countruy_not', alias?: string  } 
  | { name: 'countruy_in', alias?: string  } 
  | { name: 'countruy_not_in', alias?: string  } 
  | { name: 'countruy_lt', alias?: string  } 
  | { name: 'countruy_lte', alias?: string  } 
  | { name: 'countruy_gt', alias?: string  } 
  | { name: 'countruy_gte', alias?: string  } 
  | { name: 'countruy_contains', alias?: string  } 
  | { name: 'countruy_not_contains', alias?: string  } 
  | { name: 'countruy_starts_with', alias?: string  } 
  | { name: 'countruy_not_starts_with', alias?: string  } 
  | { name: 'countruy_ends_with', alias?: string  } 
  | { name: 'countruy_not_ends_with', alias?: string  } 
  | { name: 'PC', alias?: string  } 
  | { name: 'PC_not', alias?: string  } 
  | { name: 'PC_in', alias?: string  } 
  | { name: 'PC_not_in', alias?: string  } 
  | { name: 'PC_lt', alias?: string  } 
  | { name: 'PC_lte', alias?: string  } 
  | { name: 'PC_gt', alias?: string  } 
  | { name: 'PC_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface StaffSizeWhereInput {
  clothing?: string | null
  clothing_not?: string | null
  clothing_in?: string[]
  clothing_not_in?: string[]
  clothing_lt?: string | null
  clothing_lte?: string | null
  clothing_gt?: string | null
  clothing_gte?: string | null
  clothing_contains?: string | null
  clothing_not_contains?: string | null
  clothing_starts_with?: string | null
  clothing_not_starts_with?: string | null
  clothing_ends_with?: string | null
  clothing_not_ends_with?: string | null
  step?: number | null
  step_not?: number | null
  step_in?: number[]
  step_not_in?: number[]
  step_lt?: number | null
  step_lte?: number | null
  step_gt?: number | null
  step_gte?: number | null
  AND?: StaffSizeWhereInput[]
}
export type StaffSizeWhereInputInputObject =
  | Extract<keyof StaffSizeWhereInput, string>
  | { name: 'clothing', alias?: string  } 
  | { name: 'clothing_not', alias?: string  } 
  | { name: 'clothing_in', alias?: string  } 
  | { name: 'clothing_not_in', alias?: string  } 
  | { name: 'clothing_lt', alias?: string  } 
  | { name: 'clothing_lte', alias?: string  } 
  | { name: 'clothing_gt', alias?: string  } 
  | { name: 'clothing_gte', alias?: string  } 
  | { name: 'clothing_contains', alias?: string  } 
  | { name: 'clothing_not_contains', alias?: string  } 
  | { name: 'clothing_starts_with', alias?: string  } 
  | { name: 'clothing_not_starts_with', alias?: string  } 
  | { name: 'clothing_ends_with', alias?: string  } 
  | { name: 'clothing_not_ends_with', alias?: string  } 
  | { name: 'step', alias?: string  } 
  | { name: 'step_not', alias?: string  } 
  | { name: 'step_in', alias?: string  } 
  | { name: 'step_not_in', alias?: string  } 
  | { name: 'step_lt', alias?: string  } 
  | { name: 'step_lte', alias?: string  } 
  | { name: 'step_gt', alias?: string  } 
  | { name: 'step_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface MatchWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  date?: string | null
  date_not?: string | null
  date_in?: string[]
  date_not_in?: string[]
  date_lt?: string | null
  date_lte?: string | null
  date_gt?: string | null
  date_gte?: string | null
  jornada?: number | null
  jornada_not?: number | null
  jornada_in?: number[]
  jornada_not_in?: number[]
  jornada_lt?: number | null
  jornada_lte?: number | null
  jornada_gt?: number | null
  jornada_gte?: number | null
  finished?: boolean | null
  finished_not?: boolean | null
  homeTeam?: boolean | null
  homeTeam_not?: boolean | null
  opponent?: TeamWhereInput | null
  win?: boolean | null
  win_not?: boolean | null
  competition?: prisma.Competiton | null
  competition_not?: prisma.Competiton | null
  competition_in?: prisma.Competiton[]
  competition_not_in?: prisma.Competiton[]
  captain?: PlayerWhereInput | null
  staff_some?: StaffWhereInput | null
  lineup_some?: PlayerWhereInput | null
  bench_some?: PlayerWhereInput | null
  score?: ScoreWhereInput | null
  goals_some?: GoalWhereInput | null
  assist_some?: AssistWhereInput | null
  substitutions_some?: SubstitutionsWhereInput | null
  substitutions_every?: SubstitutionsRestrictedWhereInput | null
  substitutions_none?: SubstitutionsRestrictedWhereInput | null
  bookings_some?: BookingWhereInput | null
  referees?: string | null
  referees_not?: string | null
  referees_in?: string[]
  referees_not_in?: string[]
  referees_lt?: string | null
  referees_lte?: string | null
  referees_gt?: string | null
  referees_gte?: string | null
  referees_contains?: string | null
  referees_not_contains?: string | null
  referees_starts_with?: string | null
  referees_not_starts_with?: string | null
  referees_ends_with?: string | null
  referees_not_ends_with?: string | null
  desc?: string | null
  desc_not?: string | null
  desc_in?: string[]
  desc_not_in?: string[]
  desc_lt?: string | null
  desc_lte?: string | null
  desc_gt?: string | null
  desc_gte?: string | null
  desc_contains?: string | null
  desc_not_contains?: string | null
  desc_starts_with?: string | null
  desc_not_starts_with?: string | null
  desc_ends_with?: string | null
  desc_not_ends_with?: string | null
  AND?: MatchWhereInput[]
}
export type MatchWhereInputInputObject =
  | Extract<keyof MatchWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'date_not', alias?: string  } 
  | { name: 'date_in', alias?: string  } 
  | { name: 'date_not_in', alias?: string  } 
  | { name: 'date_lt', alias?: string  } 
  | { name: 'date_lte', alias?: string  } 
  | { name: 'date_gt', alias?: string  } 
  | { name: 'date_gte', alias?: string  } 
  | { name: 'jornada', alias?: string  } 
  | { name: 'jornada_not', alias?: string  } 
  | { name: 'jornada_in', alias?: string  } 
  | { name: 'jornada_not_in', alias?: string  } 
  | { name: 'jornada_lt', alias?: string  } 
  | { name: 'jornada_lte', alias?: string  } 
  | { name: 'jornada_gt', alias?: string  } 
  | { name: 'jornada_gte', alias?: string  } 
  | { name: 'finished', alias?: string  } 
  | { name: 'finished_not', alias?: string  } 
  | { name: 'homeTeam', alias?: string  } 
  | { name: 'homeTeam_not', alias?: string  } 
  | { name: 'opponent', alias?: string  } 
  | { name: 'win', alias?: string  } 
  | { name: 'win_not', alias?: string  } 
  | { name: 'competition', alias?: string  } 
  | { name: 'competition_not', alias?: string  } 
  | { name: 'competition_in', alias?: string  } 
  | { name: 'competition_not_in', alias?: string  } 
  | { name: 'captain', alias?: string  } 
  | { name: 'staff_some', alias?: string  } 
  | { name: 'lineup_some', alias?: string  } 
  | { name: 'bench_some', alias?: string  } 
  | { name: 'score', alias?: string  } 
  | { name: 'goals_some', alias?: string  } 
  | { name: 'assist_some', alias?: string  } 
  | { name: 'substitutions_some', alias?: string  } 
  | { name: 'substitutions_every', alias?: string  } 
  | { name: 'substitutions_none', alias?: string  } 
  | { name: 'bookings_some', alias?: string  } 
  | { name: 'referees', alias?: string  } 
  | { name: 'referees_not', alias?: string  } 
  | { name: 'referees_in', alias?: string  } 
  | { name: 'referees_not_in', alias?: string  } 
  | { name: 'referees_lt', alias?: string  } 
  | { name: 'referees_lte', alias?: string  } 
  | { name: 'referees_gt', alias?: string  } 
  | { name: 'referees_gte', alias?: string  } 
  | { name: 'referees_contains', alias?: string  } 
  | { name: 'referees_not_contains', alias?: string  } 
  | { name: 'referees_starts_with', alias?: string  } 
  | { name: 'referees_not_starts_with', alias?: string  } 
  | { name: 'referees_ends_with', alias?: string  } 
  | { name: 'referees_not_ends_with', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'desc_not', alias?: string  } 
  | { name: 'desc_in', alias?: string  } 
  | { name: 'desc_not_in', alias?: string  } 
  | { name: 'desc_lt', alias?: string  } 
  | { name: 'desc_lte', alias?: string  } 
  | { name: 'desc_gt', alias?: string  } 
  | { name: 'desc_gte', alias?: string  } 
  | { name: 'desc_contains', alias?: string  } 
  | { name: 'desc_not_contains', alias?: string  } 
  | { name: 'desc_starts_with', alias?: string  } 
  | { name: 'desc_not_starts_with', alias?: string  } 
  | { name: 'desc_ends_with', alias?: string  } 
  | { name: 'desc_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface ScoreWhereInput {
  fullTime?: HomeAndAwayWhereInput | null
  halfTime?: HomeAndAwayWhereInput | null
  extraTime?: HomeAndAwayWhereInput | null
  penalties?: HomeAndAwayWhereInput | null
  AND?: ScoreWhereInput[]
}
export type ScoreWhereInputInputObject =
  | Extract<keyof ScoreWhereInput, string>
  | { name: 'fullTime', alias?: string  } 
  | { name: 'halfTime', alias?: string  } 
  | { name: 'extraTime', alias?: string  } 
  | { name: 'penalties', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface HomeAndAwayWhereInput {
  homeTeam?: number | null
  homeTeam_not?: number | null
  homeTeam_in?: number[]
  homeTeam_not_in?: number[]
  homeTeam_lt?: number | null
  homeTeam_lte?: number | null
  homeTeam_gt?: number | null
  homeTeam_gte?: number | null
  awayTeam?: number | null
  awayTeam_not?: number | null
  awayTeam_in?: number[]
  awayTeam_not_in?: number[]
  awayTeam_lt?: number | null
  awayTeam_lte?: number | null
  awayTeam_gt?: number | null
  awayTeam_gte?: number | null
  AND?: HomeAndAwayWhereInput[]
}
export type HomeAndAwayWhereInputInputObject =
  | Extract<keyof HomeAndAwayWhereInput, string>
  | { name: 'homeTeam', alias?: string  } 
  | { name: 'homeTeam_not', alias?: string  } 
  | { name: 'homeTeam_in', alias?: string  } 
  | { name: 'homeTeam_not_in', alias?: string  } 
  | { name: 'homeTeam_lt', alias?: string  } 
  | { name: 'homeTeam_lte', alias?: string  } 
  | { name: 'homeTeam_gt', alias?: string  } 
  | { name: 'homeTeam_gte', alias?: string  } 
  | { name: 'awayTeam', alias?: string  } 
  | { name: 'awayTeam_not', alias?: string  } 
  | { name: 'awayTeam_in', alias?: string  } 
  | { name: 'awayTeam_not_in', alias?: string  } 
  | { name: 'awayTeam_lt', alias?: string  } 
  | { name: 'awayTeam_lte', alias?: string  } 
  | { name: 'awayTeam_gt', alias?: string  } 
  | { name: 'awayTeam_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface GoalWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  player?: PlayerWhereInput | null
  match?: MatchWhereInput | null
  min?: number | null
  min_not?: number | null
  min_in?: number[]
  min_not_in?: number[]
  min_lt?: number | null
  min_lte?: number | null
  min_gt?: number | null
  min_gte?: number | null
  desc?: string | null
  desc_not?: string | null
  desc_in?: string[]
  desc_not_in?: string[]
  desc_lt?: string | null
  desc_lte?: string | null
  desc_gt?: string | null
  desc_gte?: string | null
  desc_contains?: string | null
  desc_not_contains?: string | null
  desc_starts_with?: string | null
  desc_not_starts_with?: string | null
  desc_ends_with?: string | null
  desc_not_ends_with?: string | null
  AND?: GoalWhereInput[]
}
export type GoalWhereInputInputObject =
  | Extract<keyof GoalWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'player', alias?: string  } 
  | { name: 'match', alias?: string  } 
  | { name: 'min', alias?: string  } 
  | { name: 'min_not', alias?: string  } 
  | { name: 'min_in', alias?: string  } 
  | { name: 'min_not_in', alias?: string  } 
  | { name: 'min_lt', alias?: string  } 
  | { name: 'min_lte', alias?: string  } 
  | { name: 'min_gt', alias?: string  } 
  | { name: 'min_gte', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'desc_not', alias?: string  } 
  | { name: 'desc_in', alias?: string  } 
  | { name: 'desc_not_in', alias?: string  } 
  | { name: 'desc_lt', alias?: string  } 
  | { name: 'desc_lte', alias?: string  } 
  | { name: 'desc_gt', alias?: string  } 
  | { name: 'desc_gte', alias?: string  } 
  | { name: 'desc_contains', alias?: string  } 
  | { name: 'desc_not_contains', alias?: string  } 
  | { name: 'desc_starts_with', alias?: string  } 
  | { name: 'desc_not_starts_with', alias?: string  } 
  | { name: 'desc_ends_with', alias?: string  } 
  | { name: 'desc_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface AssistWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  player?: PlayerWhereInput | null
  match?: MatchWhereInput | null
  min?: number | null
  min_not?: number | null
  min_in?: number[]
  min_not_in?: number[]
  min_lt?: number | null
  min_lte?: number | null
  min_gt?: number | null
  min_gte?: number | null
  desc?: string | null
  desc_not?: string | null
  desc_in?: string[]
  desc_not_in?: string[]
  desc_lt?: string | null
  desc_lte?: string | null
  desc_gt?: string | null
  desc_gte?: string | null
  desc_contains?: string | null
  desc_not_contains?: string | null
  desc_starts_with?: string | null
  desc_not_starts_with?: string | null
  desc_ends_with?: string | null
  desc_not_ends_with?: string | null
  AND?: AssistWhereInput[]
}
export type AssistWhereInputInputObject =
  | Extract<keyof AssistWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'player', alias?: string  } 
  | { name: 'match', alias?: string  } 
  | { name: 'min', alias?: string  } 
  | { name: 'min_not', alias?: string  } 
  | { name: 'min_in', alias?: string  } 
  | { name: 'min_not_in', alias?: string  } 
  | { name: 'min_lt', alias?: string  } 
  | { name: 'min_lte', alias?: string  } 
  | { name: 'min_gt', alias?: string  } 
  | { name: 'min_gte', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'desc_not', alias?: string  } 
  | { name: 'desc_in', alias?: string  } 
  | { name: 'desc_not_in', alias?: string  } 
  | { name: 'desc_lt', alias?: string  } 
  | { name: 'desc_lte', alias?: string  } 
  | { name: 'desc_gt', alias?: string  } 
  | { name: 'desc_gte', alias?: string  } 
  | { name: 'desc_contains', alias?: string  } 
  | { name: 'desc_not_contains', alias?: string  } 
  | { name: 'desc_starts_with', alias?: string  } 
  | { name: 'desc_not_starts_with', alias?: string  } 
  | { name: 'desc_ends_with', alias?: string  } 
  | { name: 'desc_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface SubstitutionsWhereInput {
  playerIn?: PlayerWhereInput | null
  playerOut?: PlayerWhereInput | null
  min?: number | null
  min_not?: number | null
  min_in?: number[]
  min_not_in?: number[]
  min_lt?: number | null
  min_lte?: number | null
  min_gt?: number | null
  min_gte?: number | null
  AND?: SubstitutionsWhereInput[]
}
export type SubstitutionsWhereInputInputObject =
  | Extract<keyof SubstitutionsWhereInput, string>
  | { name: 'playerIn', alias?: string  } 
  | { name: 'playerOut', alias?: string  } 
  | { name: 'min', alias?: string  } 
  | { name: 'min_not', alias?: string  } 
  | { name: 'min_in', alias?: string  } 
  | { name: 'min_not_in', alias?: string  } 
  | { name: 'min_lt', alias?: string  } 
  | { name: 'min_lte', alias?: string  } 
  | { name: 'min_gt', alias?: string  } 
  | { name: 'min_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface SubstitutionsRestrictedWhereInput {
  min?: number | null
  min_not?: number | null
  min_in?: number[]
  min_not_in?: number[]
  min_lt?: number | null
  min_lte?: number | null
  min_gt?: number | null
  min_gte?: number | null
  AND?: SubstitutionsRestrictedWhereInput[]
}
export type SubstitutionsRestrictedWhereInputInputObject =
  | Extract<keyof SubstitutionsRestrictedWhereInput, string>
  | { name: 'min', alias?: string  } 
  | { name: 'min_not', alias?: string  } 
  | { name: 'min_in', alias?: string  } 
  | { name: 'min_not_in', alias?: string  } 
  | { name: 'min_lt', alias?: string  } 
  | { name: 'min_lte', alias?: string  } 
  | { name: 'min_gt', alias?: string  } 
  | { name: 'min_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface BookingWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  player?: PlayerWhereInput | null
  match?: MatchWhereInput | null
  min?: number | null
  min_not?: number | null
  min_in?: number[]
  min_not_in?: number[]
  min_lt?: number | null
  min_lte?: number | null
  min_gt?: number | null
  min_gte?: number | null
  desc?: string | null
  desc_not?: string | null
  desc_in?: string[]
  desc_not_in?: string[]
  desc_lt?: string | null
  desc_lte?: string | null
  desc_gt?: string | null
  desc_gte?: string | null
  desc_contains?: string | null
  desc_not_contains?: string | null
  desc_starts_with?: string | null
  desc_not_starts_with?: string | null
  desc_ends_with?: string | null
  desc_not_ends_with?: string | null
  card?: prisma.ColorCard | null
  card_not?: prisma.ColorCard | null
  card_in?: prisma.ColorCard[]
  card_not_in?: prisma.ColorCard[]
  AND?: BookingWhereInput[]
}
export type BookingWhereInputInputObject =
  | Extract<keyof BookingWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'player', alias?: string  } 
  | { name: 'match', alias?: string  } 
  | { name: 'min', alias?: string  } 
  | { name: 'min_not', alias?: string  } 
  | { name: 'min_in', alias?: string  } 
  | { name: 'min_not_in', alias?: string  } 
  | { name: 'min_lt', alias?: string  } 
  | { name: 'min_lte', alias?: string  } 
  | { name: 'min_gt', alias?: string  } 
  | { name: 'min_gte', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'desc_not', alias?: string  } 
  | { name: 'desc_in', alias?: string  } 
  | { name: 'desc_not_in', alias?: string  } 
  | { name: 'desc_lt', alias?: string  } 
  | { name: 'desc_lte', alias?: string  } 
  | { name: 'desc_gt', alias?: string  } 
  | { name: 'desc_gte', alias?: string  } 
  | { name: 'desc_contains', alias?: string  } 
  | { name: 'desc_not_contains', alias?: string  } 
  | { name: 'desc_starts_with', alias?: string  } 
  | { name: 'desc_not_starts_with', alias?: string  } 
  | { name: 'desc_ends_with', alias?: string  } 
  | { name: 'desc_not_ends_with', alias?: string  } 
  | { name: 'card', alias?: string  } 
  | { name: 'card_not', alias?: string  } 
  | { name: 'card_in', alias?: string  } 
  | { name: 'card_not_in', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface PersonalInfoWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  firstName?: string | null
  firstName_not?: string | null
  firstName_in?: string[]
  firstName_not_in?: string[]
  firstName_lt?: string | null
  firstName_lte?: string | null
  firstName_gt?: string | null
  firstName_gte?: string | null
  firstName_contains?: string | null
  firstName_not_contains?: string | null
  firstName_starts_with?: string | null
  firstName_not_starts_with?: string | null
  firstName_ends_with?: string | null
  firstName_not_ends_with?: string | null
  lastName?: string | null
  lastName_not?: string | null
  lastName_in?: string[]
  lastName_not_in?: string[]
  lastName_lt?: string | null
  lastName_lte?: string | null
  lastName_gt?: string | null
  lastName_gte?: string | null
  lastName_contains?: string | null
  lastName_not_contains?: string | null
  lastName_starts_with?: string | null
  lastName_not_starts_with?: string | null
  lastName_ends_with?: string | null
  lastName_not_ends_with?: string | null
  dateOfBirth?: string | null
  dateOfBirth_not?: string | null
  dateOfBirth_in?: string[]
  dateOfBirth_not_in?: string[]
  dateOfBirth_lt?: string | null
  dateOfBirth_lte?: string | null
  dateOfBirth_gt?: string | null
  dateOfBirth_gte?: string | null
  tel?: number | null
  tel_not?: number | null
  tel_in?: number[]
  tel_not_in?: number[]
  tel_lt?: number | null
  tel_lte?: number | null
  tel_gt?: number | null
  tel_gte?: number | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  dni?: string | null
  dni_not?: string | null
  dni_in?: string[]
  dni_not_in?: string[]
  dni_lt?: string | null
  dni_lte?: string | null
  dni_gt?: string | null
  dni_gte?: string | null
  dni_contains?: string | null
  dni_not_contains?: string | null
  dni_starts_with?: string | null
  dni_not_starts_with?: string | null
  dni_ends_with?: string | null
  dni_not_ends_with?: string | null
  origin?: string | null
  origin_not?: string | null
  origin_in?: string[]
  origin_not_in?: string[]
  origin_lt?: string | null
  origin_lte?: string | null
  origin_gt?: string | null
  origin_gte?: string | null
  origin_contains?: string | null
  origin_not_contains?: string | null
  origin_starts_with?: string | null
  origin_not_starts_with?: string | null
  origin_ends_with?: string | null
  origin_not_ends_with?: string | null
  status?: string | null
  status_not?: string | null
  status_in?: string[]
  status_not_in?: string[]
  status_lt?: string | null
  status_lte?: string | null
  status_gt?: string | null
  status_gte?: string | null
  status_contains?: string | null
  status_not_contains?: string | null
  status_starts_with?: string | null
  status_not_starts_with?: string | null
  status_ends_with?: string | null
  status_not_ends_with?: string | null
  childs?: number | null
  childs_not?: number | null
  childs_in?: number[]
  childs_not_in?: number[]
  childs_lt?: number | null
  childs_lte?: number | null
  childs_gt?: number | null
  childs_gte?: number | null
  brothers?: number | null
  brothers_not?: number | null
  brothers_in?: number[]
  brothers_not_in?: number[]
  brothers_lt?: number | null
  brothers_lte?: number | null
  brothers_gt?: number | null
  brothers_gte?: number | null
  poscBrothers?: number | null
  poscBrothers_not?: number | null
  poscBrothers_in?: number[]
  poscBrothers_not_in?: number[]
  poscBrothers_lt?: number | null
  poscBrothers_lte?: number | null
  poscBrothers_gt?: number | null
  poscBrothers_gte?: number | null
  clubBrothers?: number | null
  clubBrothers_not?: number | null
  clubBrothers_in?: number[]
  clubBrothers_not_in?: number[]
  clubBrothers_lt?: number | null
  clubBrothers_lte?: number | null
  clubBrothers_gt?: number | null
  clubBrothers_gte?: number | null
  AND?: PersonalInfoWhereInput[]
}
export type PersonalInfoWhereInputInputObject =
  | Extract<keyof PersonalInfoWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'firstName_not', alias?: string  } 
  | { name: 'firstName_in', alias?: string  } 
  | { name: 'firstName_not_in', alias?: string  } 
  | { name: 'firstName_lt', alias?: string  } 
  | { name: 'firstName_lte', alias?: string  } 
  | { name: 'firstName_gt', alias?: string  } 
  | { name: 'firstName_gte', alias?: string  } 
  | { name: 'firstName_contains', alias?: string  } 
  | { name: 'firstName_not_contains', alias?: string  } 
  | { name: 'firstName_starts_with', alias?: string  } 
  | { name: 'firstName_not_starts_with', alias?: string  } 
  | { name: 'firstName_ends_with', alias?: string  } 
  | { name: 'firstName_not_ends_with', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'lastName_not', alias?: string  } 
  | { name: 'lastName_in', alias?: string  } 
  | { name: 'lastName_not_in', alias?: string  } 
  | { name: 'lastName_lt', alias?: string  } 
  | { name: 'lastName_lte', alias?: string  } 
  | { name: 'lastName_gt', alias?: string  } 
  | { name: 'lastName_gte', alias?: string  } 
  | { name: 'lastName_contains', alias?: string  } 
  | { name: 'lastName_not_contains', alias?: string  } 
  | { name: 'lastName_starts_with', alias?: string  } 
  | { name: 'lastName_not_starts_with', alias?: string  } 
  | { name: 'lastName_ends_with', alias?: string  } 
  | { name: 'lastName_not_ends_with', alias?: string  } 
  | { name: 'dateOfBirth', alias?: string  } 
  | { name: 'dateOfBirth_not', alias?: string  } 
  | { name: 'dateOfBirth_in', alias?: string  } 
  | { name: 'dateOfBirth_not_in', alias?: string  } 
  | { name: 'dateOfBirth_lt', alias?: string  } 
  | { name: 'dateOfBirth_lte', alias?: string  } 
  | { name: 'dateOfBirth_gt', alias?: string  } 
  | { name: 'dateOfBirth_gte', alias?: string  } 
  | { name: 'tel', alias?: string  } 
  | { name: 'tel_not', alias?: string  } 
  | { name: 'tel_in', alias?: string  } 
  | { name: 'tel_not_in', alias?: string  } 
  | { name: 'tel_lt', alias?: string  } 
  | { name: 'tel_lte', alias?: string  } 
  | { name: 'tel_gt', alias?: string  } 
  | { name: 'tel_gte', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'dni', alias?: string  } 
  | { name: 'dni_not', alias?: string  } 
  | { name: 'dni_in', alias?: string  } 
  | { name: 'dni_not_in', alias?: string  } 
  | { name: 'dni_lt', alias?: string  } 
  | { name: 'dni_lte', alias?: string  } 
  | { name: 'dni_gt', alias?: string  } 
  | { name: 'dni_gte', alias?: string  } 
  | { name: 'dni_contains', alias?: string  } 
  | { name: 'dni_not_contains', alias?: string  } 
  | { name: 'dni_starts_with', alias?: string  } 
  | { name: 'dni_not_starts_with', alias?: string  } 
  | { name: 'dni_ends_with', alias?: string  } 
  | { name: 'dni_not_ends_with', alias?: string  } 
  | { name: 'origin', alias?: string  } 
  | { name: 'origin_not', alias?: string  } 
  | { name: 'origin_in', alias?: string  } 
  | { name: 'origin_not_in', alias?: string  } 
  | { name: 'origin_lt', alias?: string  } 
  | { name: 'origin_lte', alias?: string  } 
  | { name: 'origin_gt', alias?: string  } 
  | { name: 'origin_gte', alias?: string  } 
  | { name: 'origin_contains', alias?: string  } 
  | { name: 'origin_not_contains', alias?: string  } 
  | { name: 'origin_starts_with', alias?: string  } 
  | { name: 'origin_not_starts_with', alias?: string  } 
  | { name: 'origin_ends_with', alias?: string  } 
  | { name: 'origin_not_ends_with', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'status_not', alias?: string  } 
  | { name: 'status_in', alias?: string  } 
  | { name: 'status_not_in', alias?: string  } 
  | { name: 'status_lt', alias?: string  } 
  | { name: 'status_lte', alias?: string  } 
  | { name: 'status_gt', alias?: string  } 
  | { name: 'status_gte', alias?: string  } 
  | { name: 'status_contains', alias?: string  } 
  | { name: 'status_not_contains', alias?: string  } 
  | { name: 'status_starts_with', alias?: string  } 
  | { name: 'status_not_starts_with', alias?: string  } 
  | { name: 'status_ends_with', alias?: string  } 
  | { name: 'status_not_ends_with', alias?: string  } 
  | { name: 'childs', alias?: string  } 
  | { name: 'childs_not', alias?: string  } 
  | { name: 'childs_in', alias?: string  } 
  | { name: 'childs_not_in', alias?: string  } 
  | { name: 'childs_lt', alias?: string  } 
  | { name: 'childs_lte', alias?: string  } 
  | { name: 'childs_gt', alias?: string  } 
  | { name: 'childs_gte', alias?: string  } 
  | { name: 'brothers', alias?: string  } 
  | { name: 'brothers_not', alias?: string  } 
  | { name: 'brothers_in', alias?: string  } 
  | { name: 'brothers_not_in', alias?: string  } 
  | { name: 'brothers_lt', alias?: string  } 
  | { name: 'brothers_lte', alias?: string  } 
  | { name: 'brothers_gt', alias?: string  } 
  | { name: 'brothers_gte', alias?: string  } 
  | { name: 'poscBrothers', alias?: string  } 
  | { name: 'poscBrothers_not', alias?: string  } 
  | { name: 'poscBrothers_in', alias?: string  } 
  | { name: 'poscBrothers_not_in', alias?: string  } 
  | { name: 'poscBrothers_lt', alias?: string  } 
  | { name: 'poscBrothers_lte', alias?: string  } 
  | { name: 'poscBrothers_gt', alias?: string  } 
  | { name: 'poscBrothers_gte', alias?: string  } 
  | { name: 'clubBrothers', alias?: string  } 
  | { name: 'clubBrothers_not', alias?: string  } 
  | { name: 'clubBrothers_in', alias?: string  } 
  | { name: 'clubBrothers_not_in', alias?: string  } 
  | { name: 'clubBrothers_lt', alias?: string  } 
  | { name: 'clubBrothers_lte', alias?: string  } 
  | { name: 'clubBrothers_gt', alias?: string  } 
  | { name: 'clubBrothers_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface AssessmentWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  personality?: number | null
  personality_not?: number | null
  personality_in?: number[]
  personality_not_in?: number[]
  personality_lt?: number | null
  personality_lte?: number | null
  personality_gt?: number | null
  personality_gte?: number | null
  psychology?: number | null
  psychology_not?: number | null
  psychology_in?: number[]
  psychology_not_in?: number[]
  psychology_lt?: number | null
  psychology_lte?: number | null
  psychology_gt?: number | null
  psychology_gte?: number | null
  technical?: number | null
  technical_not?: number | null
  technical_in?: number[]
  technical_not_in?: number[]
  technical_lt?: number | null
  technical_lte?: number | null
  technical_gt?: number | null
  technical_gte?: number | null
  tactical?: number | null
  tactical_not?: number | null
  tactical_in?: number[]
  tactical_not_in?: number[]
  tactical_lt?: number | null
  tactical_lte?: number | null
  tactical_gt?: number | null
  tactical_gte?: number | null
  physical?: number | null
  physical_not?: number | null
  physical_in?: number[]
  physical_not_in?: number[]
  physical_lt?: number | null
  physical_lte?: number | null
  physical_gt?: number | null
  physical_gte?: number | null
  AND?: AssessmentWhereInput[]
}
export type AssessmentWhereInputInputObject =
  | Extract<keyof AssessmentWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'personality', alias?: string  } 
  | { name: 'personality_not', alias?: string  } 
  | { name: 'personality_in', alias?: string  } 
  | { name: 'personality_not_in', alias?: string  } 
  | { name: 'personality_lt', alias?: string  } 
  | { name: 'personality_lte', alias?: string  } 
  | { name: 'personality_gt', alias?: string  } 
  | { name: 'personality_gte', alias?: string  } 
  | { name: 'psychology', alias?: string  } 
  | { name: 'psychology_not', alias?: string  } 
  | { name: 'psychology_in', alias?: string  } 
  | { name: 'psychology_not_in', alias?: string  } 
  | { name: 'psychology_lt', alias?: string  } 
  | { name: 'psychology_lte', alias?: string  } 
  | { name: 'psychology_gt', alias?: string  } 
  | { name: 'psychology_gte', alias?: string  } 
  | { name: 'technical', alias?: string  } 
  | { name: 'technical_not', alias?: string  } 
  | { name: 'technical_in', alias?: string  } 
  | { name: 'technical_not_in', alias?: string  } 
  | { name: 'technical_lt', alias?: string  } 
  | { name: 'technical_lte', alias?: string  } 
  | { name: 'technical_gt', alias?: string  } 
  | { name: 'technical_gte', alias?: string  } 
  | { name: 'tactical', alias?: string  } 
  | { name: 'tactical_not', alias?: string  } 
  | { name: 'tactical_in', alias?: string  } 
  | { name: 'tactical_not_in', alias?: string  } 
  | { name: 'tactical_lt', alias?: string  } 
  | { name: 'tactical_lte', alias?: string  } 
  | { name: 'tactical_gt', alias?: string  } 
  | { name: 'tactical_gte', alias?: string  } 
  | { name: 'physical', alias?: string  } 
  | { name: 'physical_not', alias?: string  } 
  | { name: 'physical_in', alias?: string  } 
  | { name: 'physical_not_in', alias?: string  } 
  | { name: 'physical_lt', alias?: string  } 
  | { name: 'physical_lte', alias?: string  } 
  | { name: 'physical_gt', alias?: string  } 
  | { name: 'physical_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface WhereFromWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  address?: string | null
  address_not?: string | null
  address_in?: string[]
  address_not_in?: string[]
  address_lt?: string | null
  address_lte?: string | null
  address_gt?: string | null
  address_gte?: string | null
  address_contains?: string | null
  address_not_contains?: string | null
  address_starts_with?: string | null
  address_not_starts_with?: string | null
  address_ends_with?: string | null
  address_not_ends_with?: string | null
  number?: number | null
  number_not?: number | null
  number_in?: number[]
  number_not_in?: number[]
  number_lt?: number | null
  number_lte?: number | null
  number_gt?: number | null
  number_gte?: number | null
  town?: string | null
  town_not?: string | null
  town_in?: string[]
  town_not_in?: string[]
  town_lt?: string | null
  town_lte?: string | null
  town_gt?: string | null
  town_gte?: string | null
  town_contains?: string | null
  town_not_contains?: string | null
  town_starts_with?: string | null
  town_not_starts_with?: string | null
  town_ends_with?: string | null
  town_not_ends_with?: string | null
  province?: string | null
  province_not?: string | null
  province_in?: string[]
  province_not_in?: string[]
  province_lt?: string | null
  province_lte?: string | null
  province_gt?: string | null
  province_gte?: string | null
  province_contains?: string | null
  province_not_contains?: string | null
  province_starts_with?: string | null
  province_not_starts_with?: string | null
  province_ends_with?: string | null
  province_not_ends_with?: string | null
  countruy?: string | null
  countruy_not?: string | null
  countruy_in?: string[]
  countruy_not_in?: string[]
  countruy_lt?: string | null
  countruy_lte?: string | null
  countruy_gt?: string | null
  countruy_gte?: string | null
  countruy_contains?: string | null
  countruy_not_contains?: string | null
  countruy_starts_with?: string | null
  countruy_not_starts_with?: string | null
  countruy_ends_with?: string | null
  countruy_not_ends_with?: string | null
  PC?: number | null
  PC_not?: number | null
  PC_in?: number[]
  PC_not_in?: number[]
  PC_lt?: number | null
  PC_lte?: number | null
  PC_gt?: number | null
  PC_gte?: number | null
  placeOfBirth?: string | null
  placeOfBirth_not?: string | null
  placeOfBirth_in?: string[]
  placeOfBirth_not_in?: string[]
  placeOfBirth_lt?: string | null
  placeOfBirth_lte?: string | null
  placeOfBirth_gt?: string | null
  placeOfBirth_gte?: string | null
  placeOfBirth_contains?: string | null
  placeOfBirth_not_contains?: string | null
  placeOfBirth_starts_with?: string | null
  placeOfBirth_not_starts_with?: string | null
  placeOfBirth_ends_with?: string | null
  placeOfBirth_not_ends_with?: string | null
  nationality?: string | null
  nationality_not?: string | null
  nationality_in?: string[]
  nationality_not_in?: string[]
  nationality_lt?: string | null
  nationality_lte?: string | null
  nationality_gt?: string | null
  nationality_gte?: string | null
  nationality_contains?: string | null
  nationality_not_contains?: string | null
  nationality_starts_with?: string | null
  nationality_not_starts_with?: string | null
  nationality_ends_with?: string | null
  nationality_not_ends_with?: string | null
  extra?: boolean | null
  extra_not?: boolean | null
  AND?: WhereFromWhereInput[]
}
export type WhereFromWhereInputInputObject =
  | Extract<keyof WhereFromWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'address_not', alias?: string  } 
  | { name: 'address_in', alias?: string  } 
  | { name: 'address_not_in', alias?: string  } 
  | { name: 'address_lt', alias?: string  } 
  | { name: 'address_lte', alias?: string  } 
  | { name: 'address_gt', alias?: string  } 
  | { name: 'address_gte', alias?: string  } 
  | { name: 'address_contains', alias?: string  } 
  | { name: 'address_not_contains', alias?: string  } 
  | { name: 'address_starts_with', alias?: string  } 
  | { name: 'address_not_starts_with', alias?: string  } 
  | { name: 'address_ends_with', alias?: string  } 
  | { name: 'address_not_ends_with', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'number_not', alias?: string  } 
  | { name: 'number_in', alias?: string  } 
  | { name: 'number_not_in', alias?: string  } 
  | { name: 'number_lt', alias?: string  } 
  | { name: 'number_lte', alias?: string  } 
  | { name: 'number_gt', alias?: string  } 
  | { name: 'number_gte', alias?: string  } 
  | { name: 'town', alias?: string  } 
  | { name: 'town_not', alias?: string  } 
  | { name: 'town_in', alias?: string  } 
  | { name: 'town_not_in', alias?: string  } 
  | { name: 'town_lt', alias?: string  } 
  | { name: 'town_lte', alias?: string  } 
  | { name: 'town_gt', alias?: string  } 
  | { name: 'town_gte', alias?: string  } 
  | { name: 'town_contains', alias?: string  } 
  | { name: 'town_not_contains', alias?: string  } 
  | { name: 'town_starts_with', alias?: string  } 
  | { name: 'town_not_starts_with', alias?: string  } 
  | { name: 'town_ends_with', alias?: string  } 
  | { name: 'town_not_ends_with', alias?: string  } 
  | { name: 'province', alias?: string  } 
  | { name: 'province_not', alias?: string  } 
  | { name: 'province_in', alias?: string  } 
  | { name: 'province_not_in', alias?: string  } 
  | { name: 'province_lt', alias?: string  } 
  | { name: 'province_lte', alias?: string  } 
  | { name: 'province_gt', alias?: string  } 
  | { name: 'province_gte', alias?: string  } 
  | { name: 'province_contains', alias?: string  } 
  | { name: 'province_not_contains', alias?: string  } 
  | { name: 'province_starts_with', alias?: string  } 
  | { name: 'province_not_starts_with', alias?: string  } 
  | { name: 'province_ends_with', alias?: string  } 
  | { name: 'province_not_ends_with', alias?: string  } 
  | { name: 'countruy', alias?: string  } 
  | { name: 'countruy_not', alias?: string  } 
  | { name: 'countruy_in', alias?: string  } 
  | { name: 'countruy_not_in', alias?: string  } 
  | { name: 'countruy_lt', alias?: string  } 
  | { name: 'countruy_lte', alias?: string  } 
  | { name: 'countruy_gt', alias?: string  } 
  | { name: 'countruy_gte', alias?: string  } 
  | { name: 'countruy_contains', alias?: string  } 
  | { name: 'countruy_not_contains', alias?: string  } 
  | { name: 'countruy_starts_with', alias?: string  } 
  | { name: 'countruy_not_starts_with', alias?: string  } 
  | { name: 'countruy_ends_with', alias?: string  } 
  | { name: 'countruy_not_ends_with', alias?: string  } 
  | { name: 'PC', alias?: string  } 
  | { name: 'PC_not', alias?: string  } 
  | { name: 'PC_in', alias?: string  } 
  | { name: 'PC_not_in', alias?: string  } 
  | { name: 'PC_lt', alias?: string  } 
  | { name: 'PC_lte', alias?: string  } 
  | { name: 'PC_gt', alias?: string  } 
  | { name: 'PC_gte', alias?: string  } 
  | { name: 'placeOfBirth', alias?: string  } 
  | { name: 'placeOfBirth_not', alias?: string  } 
  | { name: 'placeOfBirth_in', alias?: string  } 
  | { name: 'placeOfBirth_not_in', alias?: string  } 
  | { name: 'placeOfBirth_lt', alias?: string  } 
  | { name: 'placeOfBirth_lte', alias?: string  } 
  | { name: 'placeOfBirth_gt', alias?: string  } 
  | { name: 'placeOfBirth_gte', alias?: string  } 
  | { name: 'placeOfBirth_contains', alias?: string  } 
  | { name: 'placeOfBirth_not_contains', alias?: string  } 
  | { name: 'placeOfBirth_starts_with', alias?: string  } 
  | { name: 'placeOfBirth_not_starts_with', alias?: string  } 
  | { name: 'placeOfBirth_ends_with', alias?: string  } 
  | { name: 'placeOfBirth_not_ends_with', alias?: string  } 
  | { name: 'nationality', alias?: string  } 
  | { name: 'nationality_not', alias?: string  } 
  | { name: 'nationality_in', alias?: string  } 
  | { name: 'nationality_not_in', alias?: string  } 
  | { name: 'nationality_lt', alias?: string  } 
  | { name: 'nationality_lte', alias?: string  } 
  | { name: 'nationality_gt', alias?: string  } 
  | { name: 'nationality_gte', alias?: string  } 
  | { name: 'nationality_contains', alias?: string  } 
  | { name: 'nationality_not_contains', alias?: string  } 
  | { name: 'nationality_starts_with', alias?: string  } 
  | { name: 'nationality_not_starts_with', alias?: string  } 
  | { name: 'nationality_ends_with', alias?: string  } 
  | { name: 'nationality_not_ends_with', alias?: string  } 
  | { name: 'extra', alias?: string  } 
  | { name: 'extra_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface InjuryWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  startAt?: string | null
  startAt_not?: string | null
  startAt_in?: string[]
  startAt_not_in?: string[]
  startAt_lt?: string | null
  startAt_lte?: string | null
  startAt_gt?: string | null
  startAt_gte?: string | null
  endAt?: string | null
  endAt_not?: string | null
  endAt_in?: string[]
  endAt_not_in?: string[]
  endAt_lt?: string | null
  endAt_lte?: string | null
  endAt_gt?: string | null
  endAt_gte?: string | null
  desc?: string | null
  desc_not?: string | null
  desc_in?: string[]
  desc_not_in?: string[]
  desc_lt?: string | null
  desc_lte?: string | null
  desc_gt?: string | null
  desc_gte?: string | null
  desc_contains?: string | null
  desc_not_contains?: string | null
  desc_starts_with?: string | null
  desc_not_starts_with?: string | null
  desc_ends_with?: string | null
  desc_not_ends_with?: string | null
  player?: PlayerWhereInput | null
  AND?: InjuryWhereInput[]
}
export type InjuryWhereInputInputObject =
  | Extract<keyof InjuryWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'startAt', alias?: string  } 
  | { name: 'startAt_not', alias?: string  } 
  | { name: 'startAt_in', alias?: string  } 
  | { name: 'startAt_not_in', alias?: string  } 
  | { name: 'startAt_lt', alias?: string  } 
  | { name: 'startAt_lte', alias?: string  } 
  | { name: 'startAt_gt', alias?: string  } 
  | { name: 'startAt_gte', alias?: string  } 
  | { name: 'endAt', alias?: string  } 
  | { name: 'endAt_not', alias?: string  } 
  | { name: 'endAt_in', alias?: string  } 
  | { name: 'endAt_not_in', alias?: string  } 
  | { name: 'endAt_lt', alias?: string  } 
  | { name: 'endAt_lte', alias?: string  } 
  | { name: 'endAt_gt', alias?: string  } 
  | { name: 'endAt_gte', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'desc_not', alias?: string  } 
  | { name: 'desc_in', alias?: string  } 
  | { name: 'desc_not_in', alias?: string  } 
  | { name: 'desc_lt', alias?: string  } 
  | { name: 'desc_lte', alias?: string  } 
  | { name: 'desc_gt', alias?: string  } 
  | { name: 'desc_gte', alias?: string  } 
  | { name: 'desc_contains', alias?: string  } 
  | { name: 'desc_not_contains', alias?: string  } 
  | { name: 'desc_starts_with', alias?: string  } 
  | { name: 'desc_not_starts_with', alias?: string  } 
  | { name: 'desc_ends_with', alias?: string  } 
  | { name: 'desc_not_ends_with', alias?: string  } 
  | { name: 'player', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface SizeWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  clothing?: string | null
  clothing_not?: string | null
  clothing_in?: string[]
  clothing_not_in?: string[]
  clothing_lt?: string | null
  clothing_lte?: string | null
  clothing_gt?: string | null
  clothing_gte?: string | null
  clothing_contains?: string | null
  clothing_not_contains?: string | null
  clothing_starts_with?: string | null
  clothing_not_starts_with?: string | null
  clothing_ends_with?: string | null
  clothing_not_ends_with?: string | null
  step?: number | null
  step_not?: number | null
  step_in?: number[]
  step_not_in?: number[]
  step_lt?: number | null
  step_lte?: number | null
  step_gt?: number | null
  step_gte?: number | null
  AND?: SizeWhereInput[]
}
export type SizeWhereInputInputObject =
  | Extract<keyof SizeWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'clothing', alias?: string  } 
  | { name: 'clothing_not', alias?: string  } 
  | { name: 'clothing_in', alias?: string  } 
  | { name: 'clothing_not_in', alias?: string  } 
  | { name: 'clothing_lt', alias?: string  } 
  | { name: 'clothing_lte', alias?: string  } 
  | { name: 'clothing_gt', alias?: string  } 
  | { name: 'clothing_gte', alias?: string  } 
  | { name: 'clothing_contains', alias?: string  } 
  | { name: 'clothing_not_contains', alias?: string  } 
  | { name: 'clothing_starts_with', alias?: string  } 
  | { name: 'clothing_not_starts_with', alias?: string  } 
  | { name: 'clothing_ends_with', alias?: string  } 
  | { name: 'clothing_not_ends_with', alias?: string  } 
  | { name: 'step', alias?: string  } 
  | { name: 'step_not', alias?: string  } 
  | { name: 'step_in', alias?: string  } 
  | { name: 'step_not_in', alias?: string  } 
  | { name: 'step_lt', alias?: string  } 
  | { name: 'step_lte', alias?: string  } 
  | { name: 'step_gt', alias?: string  } 
  | { name: 'step_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface InjuryWhereUniqueInput {
  id?: string | null
}
export type InjuryWhereUniqueInputInputObject =
  | Extract<keyof InjuryWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface MatchWhereUniqueInput {
  id?: string | null
  jornada?: number | null
}
export type MatchWhereUniqueInputInputObject =
  | Extract<keyof MatchWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'jornada', alias?: string  } 
  
export interface GoalWhereUniqueInput {
  id?: string | null
}
export type GoalWhereUniqueInputInputObject =
  | Extract<keyof GoalWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface AssistWhereUniqueInput {
  id?: string | null
}
export type AssistWhereUniqueInputInputObject =
  | Extract<keyof AssistWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface BookingWhereUniqueInput {
  id?: string | null
}
export type BookingWhereUniqueInputInputObject =
  | Extract<keyof BookingWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface TeamWhereUniqueInput {
  id?: string | null
  name?: string | null
}
export type TeamWhereUniqueInputInputObject =
  | Extract<keyof TeamWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface StaffWhereUniqueInput {
  id?: string | null
}
export type StaffWhereUniqueInputInputObject =
  | Extract<keyof StaffWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface PlayerCreateInput {
  nick?: string
  shirtNumber?: number
  imgUrl?: string | null
  team?: TeamCreateOneWithoutPlayersInput | null
  captain?: boolean | null
  personalInfo?: PersonalInfoCreateOneInput | null
  position?: prisma.PlayerPosition
  altPosition?: prisma.PlayerPosition | null
  assessment?: AssessmentCreateOneInput | null
  foot?: prisma.Foot | null
  from?: WhereFromCreateOneInput | null
  injured?: boolean | null
  injury?: InjuryCreateManyWithoutPlayerInput | null
  sizes?: SizeCreateOneInput | null
  goals?: GoalCreateManyWithoutPlayerInput | null
  assist?: AssistCreateManyWithoutPlayerInput | null
  bookings?: BookingCreateManyWithoutPlayerInput | null
  lineup?: MatchCreateManyWithoutLineupInput | null
  bench?: MatchCreateManyWithoutBenchInput | null
}
export type PlayerCreateInputInputObject =
  | Extract<keyof PlayerCreateInput, string>
  | { name: 'nick', alias?: string  } 
  | { name: 'shirtNumber', alias?: string  } 
  | { name: 'imgUrl', alias?: string  } 
  | { name: 'team', alias?: string  } 
  | { name: 'captain', alias?: string  } 
  | { name: 'personalInfo', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'altPosition', alias?: string  } 
  | { name: 'assessment', alias?: string  } 
  | { name: 'foot', alias?: string  } 
  | { name: 'from', alias?: string  } 
  | { name: 'injured', alias?: string  } 
  | { name: 'injury', alias?: string  } 
  | { name: 'sizes', alias?: string  } 
  | { name: 'goals', alias?: string  } 
  | { name: 'assist', alias?: string  } 
  | { name: 'bookings', alias?: string  } 
  | { name: 'lineup', alias?: string  } 
  | { name: 'bench', alias?: string  } 
  
export interface TeamCreateOneWithoutPlayersInput {
  create?: TeamCreateWithoutPlayersInput | null
  connect?: TeamWhereUniqueInput | null
}
export type TeamCreateOneWithoutPlayersInputInputObject =
  | Extract<keyof TeamCreateOneWithoutPlayersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TeamCreateWithoutPlayersInput {
  logoUrl?: string | null
  name?: string
  staff?: StaffCreateManyWithoutTeamInput | null
}
export type TeamCreateWithoutPlayersInputInputObject =
  | Extract<keyof TeamCreateWithoutPlayersInput, string>
  | { name: 'logoUrl', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'staff', alias?: string  } 
  
export interface StaffCreateManyWithoutTeamInput {
  create?: StaffCreateWithoutTeamInput[]
  connect?: StaffWhereUniqueInput[]
}
export type StaffCreateManyWithoutTeamInputInputObject =
  | Extract<keyof StaffCreateManyWithoutTeamInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface StaffCreateWithoutTeamInput {
  nick?: string
  imgUrl?: string | null
  personalInfo?: StaffInfoCreateOneInput | null
  from?: StaffFromCreateOneInput | null
  sizes?: StaffSizeCreateOneInput | null
  role?: string | null
  matches?: MatchCreateManyWithoutStaffInput | null
}
export type StaffCreateWithoutTeamInputInputObject =
  | Extract<keyof StaffCreateWithoutTeamInput, string>
  | { name: 'nick', alias?: string  } 
  | { name: 'imgUrl', alias?: string  } 
  | { name: 'personalInfo', alias?: string  } 
  | { name: 'from', alias?: string  } 
  | { name: 'sizes', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'matches', alias?: string  } 
  
export interface StaffInfoCreateOneInput {
  create?: StaffInfoCreateInput | null
}
export type StaffInfoCreateOneInputInputObject =
  | Extract<keyof StaffInfoCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  
export interface StaffInfoCreateInput {
  name?: string
  firstName?: string
  lastName?: string | null
  dateOfBirth?: string | null
  tel?: number | null
  email?: string | null
  dni?: string
}
export type StaffInfoCreateInputInputObject =
  | Extract<keyof StaffInfoCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'dateOfBirth', alias?: string  } 
  | { name: 'tel', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'dni', alias?: string  } 
  
export interface StaffFromCreateOneInput {
  create?: StaffFromCreateInput | null
}
export type StaffFromCreateOneInputInputObject =
  | Extract<keyof StaffFromCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  
export interface StaffFromCreateInput {
  address?: string | null
  number?: number | null
  town?: string | null
  province?: string | null
  countruy?: string | null
  PC?: number | null
}
export type StaffFromCreateInputInputObject =
  | Extract<keyof StaffFromCreateInput, string>
  | { name: 'address', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'town', alias?: string  } 
  | { name: 'province', alias?: string  } 
  | { name: 'countruy', alias?: string  } 
  | { name: 'PC', alias?: string  } 
  
export interface StaffSizeCreateOneInput {
  create?: StaffSizeCreateInput | null
}
export type StaffSizeCreateOneInputInputObject =
  | Extract<keyof StaffSizeCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  
export interface StaffSizeCreateInput {
  clothing?: string | null
  step?: number | null
}
export type StaffSizeCreateInputInputObject =
  | Extract<keyof StaffSizeCreateInput, string>
  | { name: 'clothing', alias?: string  } 
  | { name: 'step', alias?: string  } 
  
export interface MatchCreateManyWithoutStaffInput {
  create?: MatchCreateWithoutStaffInput[]
  connect?: MatchWhereUniqueInput[]
}
export type MatchCreateManyWithoutStaffInputInputObject =
  | Extract<keyof MatchCreateManyWithoutStaffInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface MatchCreateWithoutStaffInput {
  date?: string | null
  jornada?: number
  finished?: boolean | null
  homeTeam?: boolean | null
  opponent?: TeamCreateOneInput | null
  win?: boolean | null
  competition?: prisma.Competiton | null
  captain?: PlayerCreateOneInput
  lineup?: PlayerCreateManyWithoutLineupInput | null
  bench?: PlayerCreateManyWithoutBenchInput | null
  score?: ScoreCreateOneInput
  goals?: GoalCreateManyWithoutMatchInput | null
  assist?: AssistCreateManyWithoutMatchInput | null
  substitutions?: SubstitutionsCreateManyInput | null
  bookings?: BookingCreateManyWithoutMatchInput | null
  referees?: string | null
  desc?: string | null
}
export type MatchCreateWithoutStaffInputInputObject =
  | Extract<keyof MatchCreateWithoutStaffInput, string>
  | { name: 'date', alias?: string  } 
  | { name: 'jornada', alias?: string  } 
  | { name: 'finished', alias?: string  } 
  | { name: 'homeTeam', alias?: string  } 
  | { name: 'opponent', alias?: string  } 
  | { name: 'win', alias?: string  } 
  | { name: 'competition', alias?: string  } 
  | { name: 'captain', alias?: string  } 
  | { name: 'lineup', alias?: string  } 
  | { name: 'bench', alias?: string  } 
  | { name: 'score', alias?: string  } 
  | { name: 'goals', alias?: string  } 
  | { name: 'assist', alias?: string  } 
  | { name: 'substitutions', alias?: string  } 
  | { name: 'bookings', alias?: string  } 
  | { name: 'referees', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  
export interface TeamCreateOneInput {
  create?: TeamCreateInput | null
  connect?: TeamWhereUniqueInput | null
}
export type TeamCreateOneInputInputObject =
  | Extract<keyof TeamCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TeamCreateInput {
  logoUrl?: string | null
  name?: string
  players?: PlayerCreateManyWithoutTeamInput | null
  staff?: StaffCreateManyWithoutTeamInput | null
}
export type TeamCreateInputInputObject =
  | Extract<keyof TeamCreateInput, string>
  | { name: 'logoUrl', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'players', alias?: string  } 
  | { name: 'staff', alias?: string  } 
  
export interface PlayerCreateManyWithoutTeamInput {
  create?: PlayerCreateWithoutTeamInput[]
  connect?: PlayerWhereUniqueInput[]
}
export type PlayerCreateManyWithoutTeamInputInputObject =
  | Extract<keyof PlayerCreateManyWithoutTeamInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PlayerCreateWithoutTeamInput {
  nick?: string
  shirtNumber?: number
  imgUrl?: string | null
  captain?: boolean | null
  personalInfo?: PersonalInfoCreateOneInput | null
  position?: prisma.PlayerPosition
  altPosition?: prisma.PlayerPosition | null
  assessment?: AssessmentCreateOneInput | null
  foot?: prisma.Foot | null
  from?: WhereFromCreateOneInput | null
  injured?: boolean | null
  injury?: InjuryCreateManyWithoutPlayerInput | null
  sizes?: SizeCreateOneInput | null
  goals?: GoalCreateManyWithoutPlayerInput | null
  assist?: AssistCreateManyWithoutPlayerInput | null
  bookings?: BookingCreateManyWithoutPlayerInput | null
  lineup?: MatchCreateManyWithoutLineupInput | null
  bench?: MatchCreateManyWithoutBenchInput | null
}
export type PlayerCreateWithoutTeamInputInputObject =
  | Extract<keyof PlayerCreateWithoutTeamInput, string>
  | { name: 'nick', alias?: string  } 
  | { name: 'shirtNumber', alias?: string  } 
  | { name: 'imgUrl', alias?: string  } 
  | { name: 'captain', alias?: string  } 
  | { name: 'personalInfo', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'altPosition', alias?: string  } 
  | { name: 'assessment', alias?: string  } 
  | { name: 'foot', alias?: string  } 
  | { name: 'from', alias?: string  } 
  | { name: 'injured', alias?: string  } 
  | { name: 'injury', alias?: string  } 
  | { name: 'sizes', alias?: string  } 
  | { name: 'goals', alias?: string  } 
  | { name: 'assist', alias?: string  } 
  | { name: 'bookings', alias?: string  } 
  | { name: 'lineup', alias?: string  } 
  | { name: 'bench', alias?: string  } 
  
export interface PersonalInfoCreateOneInput {
  create?: PersonalInfoCreateInput | null
}
export type PersonalInfoCreateOneInputInputObject =
  | Extract<keyof PersonalInfoCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  
export interface PersonalInfoCreateInput {
  name?: string
  firstName?: string
  lastName?: string | null
  dateOfBirth?: string | null
  tel?: number | null
  email?: string | null
  dni?: string
  origin?: string | null
  status?: string | null
  childs?: number | null
  brothers?: number | null
  poscBrothers?: number | null
  clubBrothers?: number | null
}
export type PersonalInfoCreateInputInputObject =
  | Extract<keyof PersonalInfoCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'dateOfBirth', alias?: string  } 
  | { name: 'tel', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'dni', alias?: string  } 
  | { name: 'origin', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'childs', alias?: string  } 
  | { name: 'brothers', alias?: string  } 
  | { name: 'poscBrothers', alias?: string  } 
  | { name: 'clubBrothers', alias?: string  } 
  
export interface AssessmentCreateOneInput {
  create?: AssessmentCreateInput | null
}
export type AssessmentCreateOneInputInputObject =
  | Extract<keyof AssessmentCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  
export interface AssessmentCreateInput {
  personality?: number | null
  psychology?: number | null
  technical?: number | null
  tactical?: number | null
  physical?: number | null
}
export type AssessmentCreateInputInputObject =
  | Extract<keyof AssessmentCreateInput, string>
  | { name: 'personality', alias?: string  } 
  | { name: 'psychology', alias?: string  } 
  | { name: 'technical', alias?: string  } 
  | { name: 'tactical', alias?: string  } 
  | { name: 'physical', alias?: string  } 
  
export interface WhereFromCreateOneInput {
  create?: WhereFromCreateInput | null
}
export type WhereFromCreateOneInputInputObject =
  | Extract<keyof WhereFromCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  
export interface WhereFromCreateInput {
  address?: string | null
  number?: number | null
  town?: string | null
  province?: string | null
  countruy?: string | null
  PC?: number | null
  placeOfBirth?: string | null
  nationality?: string | null
  extra?: boolean | null
}
export type WhereFromCreateInputInputObject =
  | Extract<keyof WhereFromCreateInput, string>
  | { name: 'address', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'town', alias?: string  } 
  | { name: 'province', alias?: string  } 
  | { name: 'countruy', alias?: string  } 
  | { name: 'PC', alias?: string  } 
  | { name: 'placeOfBirth', alias?: string  } 
  | { name: 'nationality', alias?: string  } 
  | { name: 'extra', alias?: string  } 
  
export interface InjuryCreateManyWithoutPlayerInput {
  create?: InjuryCreateWithoutPlayerInput[]
  connect?: InjuryWhereUniqueInput[]
}
export type InjuryCreateManyWithoutPlayerInputInputObject =
  | Extract<keyof InjuryCreateManyWithoutPlayerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface InjuryCreateWithoutPlayerInput {
  startAt?: string
  endAt?: string | null
  desc?: string
}
export type InjuryCreateWithoutPlayerInputInputObject =
  | Extract<keyof InjuryCreateWithoutPlayerInput, string>
  | { name: 'startAt', alias?: string  } 
  | { name: 'endAt', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  
export interface SizeCreateOneInput {
  create?: SizeCreateInput | null
}
export type SizeCreateOneInputInputObject =
  | Extract<keyof SizeCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  
export interface SizeCreateInput {
  clothing?: string | null
  step?: number | null
}
export type SizeCreateInputInputObject =
  | Extract<keyof SizeCreateInput, string>
  | { name: 'clothing', alias?: string  } 
  | { name: 'step', alias?: string  } 
  
export interface GoalCreateManyWithoutPlayerInput {
  create?: GoalCreateWithoutPlayerInput[]
  connect?: GoalWhereUniqueInput[]
}
export type GoalCreateManyWithoutPlayerInputInputObject =
  | Extract<keyof GoalCreateManyWithoutPlayerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GoalCreateWithoutPlayerInput {
  match?: MatchCreateOneWithoutGoalsInput
  min?: number | null
  desc?: string | null
}
export type GoalCreateWithoutPlayerInputInputObject =
  | Extract<keyof GoalCreateWithoutPlayerInput, string>
  | { name: 'match', alias?: string  } 
  | { name: 'min', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  
export interface MatchCreateOneWithoutGoalsInput {
  create?: MatchCreateWithoutGoalsInput | null
  connect?: MatchWhereUniqueInput | null
}
export type MatchCreateOneWithoutGoalsInputInputObject =
  | Extract<keyof MatchCreateOneWithoutGoalsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface MatchCreateWithoutGoalsInput {
  date?: string | null
  jornada?: number
  finished?: boolean | null
  homeTeam?: boolean | null
  opponent?: TeamCreateOneInput | null
  win?: boolean | null
  competition?: prisma.Competiton | null
  captain?: PlayerCreateOneInput
  staff?: StaffCreateManyWithoutMatchesInput | null
  lineup?: PlayerCreateManyWithoutLineupInput | null
  bench?: PlayerCreateManyWithoutBenchInput | null
  score?: ScoreCreateOneInput
  assist?: AssistCreateManyWithoutMatchInput | null
  substitutions?: SubstitutionsCreateManyInput | null
  bookings?: BookingCreateManyWithoutMatchInput | null
  referees?: string | null
  desc?: string | null
}
export type MatchCreateWithoutGoalsInputInputObject =
  | Extract<keyof MatchCreateWithoutGoalsInput, string>
  | { name: 'date', alias?: string  } 
  | { name: 'jornada', alias?: string  } 
  | { name: 'finished', alias?: string  } 
  | { name: 'homeTeam', alias?: string  } 
  | { name: 'opponent', alias?: string  } 
  | { name: 'win', alias?: string  } 
  | { name: 'competition', alias?: string  } 
  | { name: 'captain', alias?: string  } 
  | { name: 'staff', alias?: string  } 
  | { name: 'lineup', alias?: string  } 
  | { name: 'bench', alias?: string  } 
  | { name: 'score', alias?: string  } 
  | { name: 'assist', alias?: string  } 
  | { name: 'substitutions', alias?: string  } 
  | { name: 'bookings', alias?: string  } 
  | { name: 'referees', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  
export interface PlayerCreateOneInput {
  create?: PlayerCreateInput | null
  connect?: PlayerWhereUniqueInput | null
}
export type PlayerCreateOneInputInputObject =
  | Extract<keyof PlayerCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface StaffCreateManyWithoutMatchesInput {
  create?: StaffCreateWithoutMatchesInput[]
  connect?: StaffWhereUniqueInput[]
}
export type StaffCreateManyWithoutMatchesInputInputObject =
  | Extract<keyof StaffCreateManyWithoutMatchesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface StaffCreateWithoutMatchesInput {
  nick?: string
  imgUrl?: string | null
  team?: TeamCreateOneWithoutStaffInput | null
  personalInfo?: StaffInfoCreateOneInput | null
  from?: StaffFromCreateOneInput | null
  sizes?: StaffSizeCreateOneInput | null
  role?: string | null
}
export type StaffCreateWithoutMatchesInputInputObject =
  | Extract<keyof StaffCreateWithoutMatchesInput, string>
  | { name: 'nick', alias?: string  } 
  | { name: 'imgUrl', alias?: string  } 
  | { name: 'team', alias?: string  } 
  | { name: 'personalInfo', alias?: string  } 
  | { name: 'from', alias?: string  } 
  | { name: 'sizes', alias?: string  } 
  | { name: 'role', alias?: string  } 
  
export interface TeamCreateOneWithoutStaffInput {
  create?: TeamCreateWithoutStaffInput | null
  connect?: TeamWhereUniqueInput | null
}
export type TeamCreateOneWithoutStaffInputInputObject =
  | Extract<keyof TeamCreateOneWithoutStaffInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TeamCreateWithoutStaffInput {
  logoUrl?: string | null
  name?: string
  players?: PlayerCreateManyWithoutTeamInput | null
}
export type TeamCreateWithoutStaffInputInputObject =
  | Extract<keyof TeamCreateWithoutStaffInput, string>
  | { name: 'logoUrl', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'players', alias?: string  } 
  
export interface PlayerCreateManyWithoutLineupInput {
  create?: PlayerCreateWithoutLineupInput[]
  connect?: PlayerWhereUniqueInput[]
}
export type PlayerCreateManyWithoutLineupInputInputObject =
  | Extract<keyof PlayerCreateManyWithoutLineupInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PlayerCreateWithoutLineupInput {
  nick?: string
  shirtNumber?: number
  imgUrl?: string | null
  team?: TeamCreateOneWithoutPlayersInput | null
  captain?: boolean | null
  personalInfo?: PersonalInfoCreateOneInput | null
  position?: prisma.PlayerPosition
  altPosition?: prisma.PlayerPosition | null
  assessment?: AssessmentCreateOneInput | null
  foot?: prisma.Foot | null
  from?: WhereFromCreateOneInput | null
  injured?: boolean | null
  injury?: InjuryCreateManyWithoutPlayerInput | null
  sizes?: SizeCreateOneInput | null
  goals?: GoalCreateManyWithoutPlayerInput | null
  assist?: AssistCreateManyWithoutPlayerInput | null
  bookings?: BookingCreateManyWithoutPlayerInput | null
  bench?: MatchCreateManyWithoutBenchInput | null
}
export type PlayerCreateWithoutLineupInputInputObject =
  | Extract<keyof PlayerCreateWithoutLineupInput, string>
  | { name: 'nick', alias?: string  } 
  | { name: 'shirtNumber', alias?: string  } 
  | { name: 'imgUrl', alias?: string  } 
  | { name: 'team', alias?: string  } 
  | { name: 'captain', alias?: string  } 
  | { name: 'personalInfo', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'altPosition', alias?: string  } 
  | { name: 'assessment', alias?: string  } 
  | { name: 'foot', alias?: string  } 
  | { name: 'from', alias?: string  } 
  | { name: 'injured', alias?: string  } 
  | { name: 'injury', alias?: string  } 
  | { name: 'sizes', alias?: string  } 
  | { name: 'goals', alias?: string  } 
  | { name: 'assist', alias?: string  } 
  | { name: 'bookings', alias?: string  } 
  | { name: 'bench', alias?: string  } 
  
export interface AssistCreateManyWithoutPlayerInput {
  create?: AssistCreateWithoutPlayerInput[]
  connect?: AssistWhereUniqueInput[]
}
export type AssistCreateManyWithoutPlayerInputInputObject =
  | Extract<keyof AssistCreateManyWithoutPlayerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface AssistCreateWithoutPlayerInput {
  match?: MatchCreateOneWithoutAssistInput
  min?: number | null
  desc?: string | null
}
export type AssistCreateWithoutPlayerInputInputObject =
  | Extract<keyof AssistCreateWithoutPlayerInput, string>
  | { name: 'match', alias?: string  } 
  | { name: 'min', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  
export interface MatchCreateOneWithoutAssistInput {
  create?: MatchCreateWithoutAssistInput | null
  connect?: MatchWhereUniqueInput | null
}
export type MatchCreateOneWithoutAssistInputInputObject =
  | Extract<keyof MatchCreateOneWithoutAssistInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface MatchCreateWithoutAssistInput {
  date?: string | null
  jornada?: number
  finished?: boolean | null
  homeTeam?: boolean | null
  opponent?: TeamCreateOneInput | null
  win?: boolean | null
  competition?: prisma.Competiton | null
  captain?: PlayerCreateOneInput
  staff?: StaffCreateManyWithoutMatchesInput | null
  lineup?: PlayerCreateManyWithoutLineupInput | null
  bench?: PlayerCreateManyWithoutBenchInput | null
  score?: ScoreCreateOneInput
  goals?: GoalCreateManyWithoutMatchInput | null
  substitutions?: SubstitutionsCreateManyInput | null
  bookings?: BookingCreateManyWithoutMatchInput | null
  referees?: string | null
  desc?: string | null
}
export type MatchCreateWithoutAssistInputInputObject =
  | Extract<keyof MatchCreateWithoutAssistInput, string>
  | { name: 'date', alias?: string  } 
  | { name: 'jornada', alias?: string  } 
  | { name: 'finished', alias?: string  } 
  | { name: 'homeTeam', alias?: string  } 
  | { name: 'opponent', alias?: string  } 
  | { name: 'win', alias?: string  } 
  | { name: 'competition', alias?: string  } 
  | { name: 'captain', alias?: string  } 
  | { name: 'staff', alias?: string  } 
  | { name: 'lineup', alias?: string  } 
  | { name: 'bench', alias?: string  } 
  | { name: 'score', alias?: string  } 
  | { name: 'goals', alias?: string  } 
  | { name: 'substitutions', alias?: string  } 
  | { name: 'bookings', alias?: string  } 
  | { name: 'referees', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  
export interface PlayerCreateManyWithoutBenchInput {
  create?: PlayerCreateWithoutBenchInput[]
  connect?: PlayerWhereUniqueInput[]
}
export type PlayerCreateManyWithoutBenchInputInputObject =
  | Extract<keyof PlayerCreateManyWithoutBenchInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PlayerCreateWithoutBenchInput {
  nick?: string
  shirtNumber?: number
  imgUrl?: string | null
  team?: TeamCreateOneWithoutPlayersInput | null
  captain?: boolean | null
  personalInfo?: PersonalInfoCreateOneInput | null
  position?: prisma.PlayerPosition
  altPosition?: prisma.PlayerPosition | null
  assessment?: AssessmentCreateOneInput | null
  foot?: prisma.Foot | null
  from?: WhereFromCreateOneInput | null
  injured?: boolean | null
  injury?: InjuryCreateManyWithoutPlayerInput | null
  sizes?: SizeCreateOneInput | null
  goals?: GoalCreateManyWithoutPlayerInput | null
  assist?: AssistCreateManyWithoutPlayerInput | null
  bookings?: BookingCreateManyWithoutPlayerInput | null
  lineup?: MatchCreateManyWithoutLineupInput | null
}
export type PlayerCreateWithoutBenchInputInputObject =
  | Extract<keyof PlayerCreateWithoutBenchInput, string>
  | { name: 'nick', alias?: string  } 
  | { name: 'shirtNumber', alias?: string  } 
  | { name: 'imgUrl', alias?: string  } 
  | { name: 'team', alias?: string  } 
  | { name: 'captain', alias?: string  } 
  | { name: 'personalInfo', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'altPosition', alias?: string  } 
  | { name: 'assessment', alias?: string  } 
  | { name: 'foot', alias?: string  } 
  | { name: 'from', alias?: string  } 
  | { name: 'injured', alias?: string  } 
  | { name: 'injury', alias?: string  } 
  | { name: 'sizes', alias?: string  } 
  | { name: 'goals', alias?: string  } 
  | { name: 'assist', alias?: string  } 
  | { name: 'bookings', alias?: string  } 
  | { name: 'lineup', alias?: string  } 
  
export interface BookingCreateManyWithoutPlayerInput {
  create?: BookingCreateWithoutPlayerInput[]
  connect?: BookingWhereUniqueInput[]
}
export type BookingCreateManyWithoutPlayerInputInputObject =
  | Extract<keyof BookingCreateManyWithoutPlayerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface BookingCreateWithoutPlayerInput {
  match?: MatchCreateOneWithoutBookingsInput
  min?: number | null
  desc?: string | null
  card?: prisma.ColorCard | null
}
export type BookingCreateWithoutPlayerInputInputObject =
  | Extract<keyof BookingCreateWithoutPlayerInput, string>
  | { name: 'match', alias?: string  } 
  | { name: 'min', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'card', alias?: string  } 
  
export interface MatchCreateOneWithoutBookingsInput {
  create?: MatchCreateWithoutBookingsInput | null
  connect?: MatchWhereUniqueInput | null
}
export type MatchCreateOneWithoutBookingsInputInputObject =
  | Extract<keyof MatchCreateOneWithoutBookingsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface MatchCreateWithoutBookingsInput {
  date?: string | null
  jornada?: number
  finished?: boolean | null
  homeTeam?: boolean | null
  opponent?: TeamCreateOneInput | null
  win?: boolean | null
  competition?: prisma.Competiton | null
  captain?: PlayerCreateOneInput
  staff?: StaffCreateManyWithoutMatchesInput | null
  lineup?: PlayerCreateManyWithoutLineupInput | null
  bench?: PlayerCreateManyWithoutBenchInput | null
  score?: ScoreCreateOneInput
  goals?: GoalCreateManyWithoutMatchInput | null
  assist?: AssistCreateManyWithoutMatchInput | null
  substitutions?: SubstitutionsCreateManyInput | null
  referees?: string | null
  desc?: string | null
}
export type MatchCreateWithoutBookingsInputInputObject =
  | Extract<keyof MatchCreateWithoutBookingsInput, string>
  | { name: 'date', alias?: string  } 
  | { name: 'jornada', alias?: string  } 
  | { name: 'finished', alias?: string  } 
  | { name: 'homeTeam', alias?: string  } 
  | { name: 'opponent', alias?: string  } 
  | { name: 'win', alias?: string  } 
  | { name: 'competition', alias?: string  } 
  | { name: 'captain', alias?: string  } 
  | { name: 'staff', alias?: string  } 
  | { name: 'lineup', alias?: string  } 
  | { name: 'bench', alias?: string  } 
  | { name: 'score', alias?: string  } 
  | { name: 'goals', alias?: string  } 
  | { name: 'assist', alias?: string  } 
  | { name: 'substitutions', alias?: string  } 
  | { name: 'referees', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  
export interface ScoreCreateOneInput {
  create?: ScoreCreateInput | null
}
export type ScoreCreateOneInputInputObject =
  | Extract<keyof ScoreCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  
export interface ScoreCreateInput {
  fullTime?: HomeAndAwayCreateOneInput
  halfTime?: HomeAndAwayCreateOneInput | null
  extraTime?: HomeAndAwayCreateOneInput | null
  penalties?: HomeAndAwayCreateOneInput | null
}
export type ScoreCreateInputInputObject =
  | Extract<keyof ScoreCreateInput, string>
  | { name: 'fullTime', alias?: string  } 
  | { name: 'halfTime', alias?: string  } 
  | { name: 'extraTime', alias?: string  } 
  | { name: 'penalties', alias?: string  } 
  
export interface HomeAndAwayCreateOneInput {
  create?: HomeAndAwayCreateInput | null
}
export type HomeAndAwayCreateOneInputInputObject =
  | Extract<keyof HomeAndAwayCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  
export interface HomeAndAwayCreateInput {
  homeTeam?: number | null
  awayTeam?: number | null
}
export type HomeAndAwayCreateInputInputObject =
  | Extract<keyof HomeAndAwayCreateInput, string>
  | { name: 'homeTeam', alias?: string  } 
  | { name: 'awayTeam', alias?: string  } 
  
export interface GoalCreateManyWithoutMatchInput {
  create?: GoalCreateWithoutMatchInput[]
  connect?: GoalWhereUniqueInput[]
}
export type GoalCreateManyWithoutMatchInputInputObject =
  | Extract<keyof GoalCreateManyWithoutMatchInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GoalCreateWithoutMatchInput {
  player?: PlayerCreateOneWithoutGoalsInput
  min?: number | null
  desc?: string | null
}
export type GoalCreateWithoutMatchInputInputObject =
  | Extract<keyof GoalCreateWithoutMatchInput, string>
  | { name: 'player', alias?: string  } 
  | { name: 'min', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  
export interface PlayerCreateOneWithoutGoalsInput {
  create?: PlayerCreateWithoutGoalsInput | null
  connect?: PlayerWhereUniqueInput | null
}
export type PlayerCreateOneWithoutGoalsInputInputObject =
  | Extract<keyof PlayerCreateOneWithoutGoalsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PlayerCreateWithoutGoalsInput {
  nick?: string
  shirtNumber?: number
  imgUrl?: string | null
  team?: TeamCreateOneWithoutPlayersInput | null
  captain?: boolean | null
  personalInfo?: PersonalInfoCreateOneInput | null
  position?: prisma.PlayerPosition
  altPosition?: prisma.PlayerPosition | null
  assessment?: AssessmentCreateOneInput | null
  foot?: prisma.Foot | null
  from?: WhereFromCreateOneInput | null
  injured?: boolean | null
  injury?: InjuryCreateManyWithoutPlayerInput | null
  sizes?: SizeCreateOneInput | null
  assist?: AssistCreateManyWithoutPlayerInput | null
  bookings?: BookingCreateManyWithoutPlayerInput | null
  lineup?: MatchCreateManyWithoutLineupInput | null
  bench?: MatchCreateManyWithoutBenchInput | null
}
export type PlayerCreateWithoutGoalsInputInputObject =
  | Extract<keyof PlayerCreateWithoutGoalsInput, string>
  | { name: 'nick', alias?: string  } 
  | { name: 'shirtNumber', alias?: string  } 
  | { name: 'imgUrl', alias?: string  } 
  | { name: 'team', alias?: string  } 
  | { name: 'captain', alias?: string  } 
  | { name: 'personalInfo', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'altPosition', alias?: string  } 
  | { name: 'assessment', alias?: string  } 
  | { name: 'foot', alias?: string  } 
  | { name: 'from', alias?: string  } 
  | { name: 'injured', alias?: string  } 
  | { name: 'injury', alias?: string  } 
  | { name: 'sizes', alias?: string  } 
  | { name: 'assist', alias?: string  } 
  | { name: 'bookings', alias?: string  } 
  | { name: 'lineup', alias?: string  } 
  | { name: 'bench', alias?: string  } 
  
export interface MatchCreateManyWithoutLineupInput {
  create?: MatchCreateWithoutLineupInput[]
  connect?: MatchWhereUniqueInput[]
}
export type MatchCreateManyWithoutLineupInputInputObject =
  | Extract<keyof MatchCreateManyWithoutLineupInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface MatchCreateWithoutLineupInput {
  date?: string | null
  jornada?: number
  finished?: boolean | null
  homeTeam?: boolean | null
  opponent?: TeamCreateOneInput | null
  win?: boolean | null
  competition?: prisma.Competiton | null
  captain?: PlayerCreateOneInput
  staff?: StaffCreateManyWithoutMatchesInput | null
  bench?: PlayerCreateManyWithoutBenchInput | null
  score?: ScoreCreateOneInput
  goals?: GoalCreateManyWithoutMatchInput | null
  assist?: AssistCreateManyWithoutMatchInput | null
  substitutions?: SubstitutionsCreateManyInput | null
  bookings?: BookingCreateManyWithoutMatchInput | null
  referees?: string | null
  desc?: string | null
}
export type MatchCreateWithoutLineupInputInputObject =
  | Extract<keyof MatchCreateWithoutLineupInput, string>
  | { name: 'date', alias?: string  } 
  | { name: 'jornada', alias?: string  } 
  | { name: 'finished', alias?: string  } 
  | { name: 'homeTeam', alias?: string  } 
  | { name: 'opponent', alias?: string  } 
  | { name: 'win', alias?: string  } 
  | { name: 'competition', alias?: string  } 
  | { name: 'captain', alias?: string  } 
  | { name: 'staff', alias?: string  } 
  | { name: 'bench', alias?: string  } 
  | { name: 'score', alias?: string  } 
  | { name: 'goals', alias?: string  } 
  | { name: 'assist', alias?: string  } 
  | { name: 'substitutions', alias?: string  } 
  | { name: 'bookings', alias?: string  } 
  | { name: 'referees', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  
export interface AssistCreateManyWithoutMatchInput {
  create?: AssistCreateWithoutMatchInput[]
  connect?: AssistWhereUniqueInput[]
}
export type AssistCreateManyWithoutMatchInputInputObject =
  | Extract<keyof AssistCreateManyWithoutMatchInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface AssistCreateWithoutMatchInput {
  player?: PlayerCreateOneWithoutAssistInput
  min?: number | null
  desc?: string | null
}
export type AssistCreateWithoutMatchInputInputObject =
  | Extract<keyof AssistCreateWithoutMatchInput, string>
  | { name: 'player', alias?: string  } 
  | { name: 'min', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  
export interface PlayerCreateOneWithoutAssistInput {
  create?: PlayerCreateWithoutAssistInput | null
  connect?: PlayerWhereUniqueInput | null
}
export type PlayerCreateOneWithoutAssistInputInputObject =
  | Extract<keyof PlayerCreateOneWithoutAssistInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PlayerCreateWithoutAssistInput {
  nick?: string
  shirtNumber?: number
  imgUrl?: string | null
  team?: TeamCreateOneWithoutPlayersInput | null
  captain?: boolean | null
  personalInfo?: PersonalInfoCreateOneInput | null
  position?: prisma.PlayerPosition
  altPosition?: prisma.PlayerPosition | null
  assessment?: AssessmentCreateOneInput | null
  foot?: prisma.Foot | null
  from?: WhereFromCreateOneInput | null
  injured?: boolean | null
  injury?: InjuryCreateManyWithoutPlayerInput | null
  sizes?: SizeCreateOneInput | null
  goals?: GoalCreateManyWithoutPlayerInput | null
  bookings?: BookingCreateManyWithoutPlayerInput | null
  lineup?: MatchCreateManyWithoutLineupInput | null
  bench?: MatchCreateManyWithoutBenchInput | null
}
export type PlayerCreateWithoutAssistInputInputObject =
  | Extract<keyof PlayerCreateWithoutAssistInput, string>
  | { name: 'nick', alias?: string  } 
  | { name: 'shirtNumber', alias?: string  } 
  | { name: 'imgUrl', alias?: string  } 
  | { name: 'team', alias?: string  } 
  | { name: 'captain', alias?: string  } 
  | { name: 'personalInfo', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'altPosition', alias?: string  } 
  | { name: 'assessment', alias?: string  } 
  | { name: 'foot', alias?: string  } 
  | { name: 'from', alias?: string  } 
  | { name: 'injured', alias?: string  } 
  | { name: 'injury', alias?: string  } 
  | { name: 'sizes', alias?: string  } 
  | { name: 'goals', alias?: string  } 
  | { name: 'bookings', alias?: string  } 
  | { name: 'lineup', alias?: string  } 
  | { name: 'bench', alias?: string  } 
  
export interface MatchCreateManyWithoutBenchInput {
  create?: MatchCreateWithoutBenchInput[]
  connect?: MatchWhereUniqueInput[]
}
export type MatchCreateManyWithoutBenchInputInputObject =
  | Extract<keyof MatchCreateManyWithoutBenchInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface MatchCreateWithoutBenchInput {
  date?: string | null
  jornada?: number
  finished?: boolean | null
  homeTeam?: boolean | null
  opponent?: TeamCreateOneInput | null
  win?: boolean | null
  competition?: prisma.Competiton | null
  captain?: PlayerCreateOneInput
  staff?: StaffCreateManyWithoutMatchesInput | null
  lineup?: PlayerCreateManyWithoutLineupInput | null
  score?: ScoreCreateOneInput
  goals?: GoalCreateManyWithoutMatchInput | null
  assist?: AssistCreateManyWithoutMatchInput | null
  substitutions?: SubstitutionsCreateManyInput | null
  bookings?: BookingCreateManyWithoutMatchInput | null
  referees?: string | null
  desc?: string | null
}
export type MatchCreateWithoutBenchInputInputObject =
  | Extract<keyof MatchCreateWithoutBenchInput, string>
  | { name: 'date', alias?: string  } 
  | { name: 'jornada', alias?: string  } 
  | { name: 'finished', alias?: string  } 
  | { name: 'homeTeam', alias?: string  } 
  | { name: 'opponent', alias?: string  } 
  | { name: 'win', alias?: string  } 
  | { name: 'competition', alias?: string  } 
  | { name: 'captain', alias?: string  } 
  | { name: 'staff', alias?: string  } 
  | { name: 'lineup', alias?: string  } 
  | { name: 'score', alias?: string  } 
  | { name: 'goals', alias?: string  } 
  | { name: 'assist', alias?: string  } 
  | { name: 'substitutions', alias?: string  } 
  | { name: 'bookings', alias?: string  } 
  | { name: 'referees', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  
export interface SubstitutionsCreateManyInput {
  create?: SubstitutionsCreateInput[]
}
export type SubstitutionsCreateManyInputInputObject =
  | Extract<keyof SubstitutionsCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  
export interface SubstitutionsCreateInput {
  playerIn?: PlayerCreateOneInput
  playerOut?: PlayerCreateOneInput
  min?: number | null
}
export type SubstitutionsCreateInputInputObject =
  | Extract<keyof SubstitutionsCreateInput, string>
  | { name: 'playerIn', alias?: string  } 
  | { name: 'playerOut', alias?: string  } 
  | { name: 'min', alias?: string  } 
  
export interface BookingCreateManyWithoutMatchInput {
  create?: BookingCreateWithoutMatchInput[]
  connect?: BookingWhereUniqueInput[]
}
export type BookingCreateManyWithoutMatchInputInputObject =
  | Extract<keyof BookingCreateManyWithoutMatchInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface BookingCreateWithoutMatchInput {
  player?: PlayerCreateOneWithoutBookingsInput
  min?: number | null
  desc?: string | null
  card?: prisma.ColorCard | null
}
export type BookingCreateWithoutMatchInputInputObject =
  | Extract<keyof BookingCreateWithoutMatchInput, string>
  | { name: 'player', alias?: string  } 
  | { name: 'min', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'card', alias?: string  } 
  
export interface PlayerCreateOneWithoutBookingsInput {
  create?: PlayerCreateWithoutBookingsInput | null
  connect?: PlayerWhereUniqueInput | null
}
export type PlayerCreateOneWithoutBookingsInputInputObject =
  | Extract<keyof PlayerCreateOneWithoutBookingsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PlayerCreateWithoutBookingsInput {
  nick?: string
  shirtNumber?: number
  imgUrl?: string | null
  team?: TeamCreateOneWithoutPlayersInput | null
  captain?: boolean | null
  personalInfo?: PersonalInfoCreateOneInput | null
  position?: prisma.PlayerPosition
  altPosition?: prisma.PlayerPosition | null
  assessment?: AssessmentCreateOneInput | null
  foot?: prisma.Foot | null
  from?: WhereFromCreateOneInput | null
  injured?: boolean | null
  injury?: InjuryCreateManyWithoutPlayerInput | null
  sizes?: SizeCreateOneInput | null
  goals?: GoalCreateManyWithoutPlayerInput | null
  assist?: AssistCreateManyWithoutPlayerInput | null
  lineup?: MatchCreateManyWithoutLineupInput | null
  bench?: MatchCreateManyWithoutBenchInput | null
}
export type PlayerCreateWithoutBookingsInputInputObject =
  | Extract<keyof PlayerCreateWithoutBookingsInput, string>
  | { name: 'nick', alias?: string  } 
  | { name: 'shirtNumber', alias?: string  } 
  | { name: 'imgUrl', alias?: string  } 
  | { name: 'team', alias?: string  } 
  | { name: 'captain', alias?: string  } 
  | { name: 'personalInfo', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'altPosition', alias?: string  } 
  | { name: 'assessment', alias?: string  } 
  | { name: 'foot', alias?: string  } 
  | { name: 'from', alias?: string  } 
  | { name: 'injured', alias?: string  } 
  | { name: 'injury', alias?: string  } 
  | { name: 'sizes', alias?: string  } 
  | { name: 'goals', alias?: string  } 
  | { name: 'assist', alias?: string  } 
  | { name: 'lineup', alias?: string  } 
  | { name: 'bench', alias?: string  } 
  
export interface PlayerUpdateInput {
  nick?: string | null
  shirtNumber?: number | null
  imgUrl?: string | null
  team?: TeamUpdateOneWithoutPlayersInput | null
  captain?: boolean | null
  personalInfo?: PersonalInfoUpdateOneInput | null
  position?: prisma.PlayerPosition | null
  altPosition?: prisma.PlayerPosition | null
  assessment?: AssessmentUpdateOneInput | null
  foot?: prisma.Foot | null
  from?: WhereFromUpdateOneInput | null
  injured?: boolean | null
  injury?: InjuryUpdateManyWithoutPlayerInput | null
  sizes?: SizeUpdateOneInput | null
  goals?: GoalUpdateManyWithoutPlayerInput | null
  assist?: AssistUpdateManyWithoutPlayerInput | null
  bookings?: BookingUpdateManyWithoutPlayerInput | null
  lineup?: MatchUpdateManyWithoutLineupInput | null
  bench?: MatchUpdateManyWithoutBenchInput | null
}
export type PlayerUpdateInputInputObject =
  | Extract<keyof PlayerUpdateInput, string>
  | { name: 'nick', alias?: string  } 
  | { name: 'shirtNumber', alias?: string  } 
  | { name: 'imgUrl', alias?: string  } 
  | { name: 'team', alias?: string  } 
  | { name: 'captain', alias?: string  } 
  | { name: 'personalInfo', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'altPosition', alias?: string  } 
  | { name: 'assessment', alias?: string  } 
  | { name: 'foot', alias?: string  } 
  | { name: 'from', alias?: string  } 
  | { name: 'injured', alias?: string  } 
  | { name: 'injury', alias?: string  } 
  | { name: 'sizes', alias?: string  } 
  | { name: 'goals', alias?: string  } 
  | { name: 'assist', alias?: string  } 
  | { name: 'bookings', alias?: string  } 
  | { name: 'lineup', alias?: string  } 
  | { name: 'bench', alias?: string  } 
  
export interface TeamUpdateOneWithoutPlayersInput {
  create?: TeamCreateWithoutPlayersInput | null
  update?: TeamUpdateWithoutPlayersDataInput | null
  upsert?: TeamUpsertWithoutPlayersInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: TeamWhereUniqueInput | null
}
export type TeamUpdateOneWithoutPlayersInputInputObject =
  | Extract<keyof TeamUpdateOneWithoutPlayersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TeamUpdateWithoutPlayersDataInput {
  logoUrl?: string | null
  name?: string | null
  staff?: StaffUpdateManyWithoutTeamInput | null
}
export type TeamUpdateWithoutPlayersDataInputInputObject =
  | Extract<keyof TeamUpdateWithoutPlayersDataInput, string>
  | { name: 'logoUrl', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'staff', alias?: string  } 
  
export interface StaffUpdateManyWithoutTeamInput {
  create?: StaffCreateWithoutTeamInput[]
  delete?: StaffWhereUniqueInput[]
  connect?: StaffWhereUniqueInput[]
  set?: StaffWhereUniqueInput[]
  disconnect?: StaffWhereUniqueInput[]
  update?: StaffUpdateWithWhereUniqueWithoutTeamInput[]
  upsert?: StaffUpsertWithWhereUniqueWithoutTeamInput[]
  deleteMany?: StaffScalarWhereInput[]
  updateMany?: StaffUpdateManyWithWhereNestedInput[]
}
export type StaffUpdateManyWithoutTeamInputInputObject =
  | Extract<keyof StaffUpdateManyWithoutTeamInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface StaffUpdateWithWhereUniqueWithoutTeamInput {
  where?: StaffWhereUniqueInput
  data?: StaffUpdateWithoutTeamDataInput
}
export type StaffUpdateWithWhereUniqueWithoutTeamInputInputObject =
  | Extract<keyof StaffUpdateWithWhereUniqueWithoutTeamInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface StaffUpdateWithoutTeamDataInput {
  nick?: string | null
  imgUrl?: string | null
  personalInfo?: StaffInfoUpdateOneInput | null
  from?: StaffFromUpdateOneInput | null
  sizes?: StaffSizeUpdateOneInput | null
  role?: string | null
  matches?: MatchUpdateManyWithoutStaffInput | null
}
export type StaffUpdateWithoutTeamDataInputInputObject =
  | Extract<keyof StaffUpdateWithoutTeamDataInput, string>
  | { name: 'nick', alias?: string  } 
  | { name: 'imgUrl', alias?: string  } 
  | { name: 'personalInfo', alias?: string  } 
  | { name: 'from', alias?: string  } 
  | { name: 'sizes', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'matches', alias?: string  } 
  
export interface StaffInfoUpdateOneInput {
  create?: StaffInfoCreateInput | null
  update?: StaffInfoUpdateDataInput | null
  upsert?: StaffInfoUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
}
export type StaffInfoUpdateOneInputInputObject =
  | Extract<keyof StaffInfoUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  
export interface StaffInfoUpdateDataInput {
  name?: string | null
  firstName?: string | null
  lastName?: string | null
  dateOfBirth?: string | null
  tel?: number | null
  email?: string | null
  dni?: string | null
}
export type StaffInfoUpdateDataInputInputObject =
  | Extract<keyof StaffInfoUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'dateOfBirth', alias?: string  } 
  | { name: 'tel', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'dni', alias?: string  } 
  
export interface StaffInfoUpsertNestedInput {
  update?: StaffInfoUpdateDataInput
  create?: StaffInfoCreateInput
}
export type StaffInfoUpsertNestedInputInputObject =
  | Extract<keyof StaffInfoUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface StaffFromUpdateOneInput {
  create?: StaffFromCreateInput | null
  update?: StaffFromUpdateDataInput | null
  upsert?: StaffFromUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
}
export type StaffFromUpdateOneInputInputObject =
  | Extract<keyof StaffFromUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  
export interface StaffFromUpdateDataInput {
  address?: string | null
  number?: number | null
  town?: string | null
  province?: string | null
  countruy?: string | null
  PC?: number | null
}
export type StaffFromUpdateDataInputInputObject =
  | Extract<keyof StaffFromUpdateDataInput, string>
  | { name: 'address', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'town', alias?: string  } 
  | { name: 'province', alias?: string  } 
  | { name: 'countruy', alias?: string  } 
  | { name: 'PC', alias?: string  } 
  
export interface StaffFromUpsertNestedInput {
  update?: StaffFromUpdateDataInput
  create?: StaffFromCreateInput
}
export type StaffFromUpsertNestedInputInputObject =
  | Extract<keyof StaffFromUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface StaffSizeUpdateOneInput {
  create?: StaffSizeCreateInput | null
  update?: StaffSizeUpdateDataInput | null
  upsert?: StaffSizeUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
}
export type StaffSizeUpdateOneInputInputObject =
  | Extract<keyof StaffSizeUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  
export interface StaffSizeUpdateDataInput {
  clothing?: string | null
  step?: number | null
}
export type StaffSizeUpdateDataInputInputObject =
  | Extract<keyof StaffSizeUpdateDataInput, string>
  | { name: 'clothing', alias?: string  } 
  | { name: 'step', alias?: string  } 
  
export interface StaffSizeUpsertNestedInput {
  update?: StaffSizeUpdateDataInput
  create?: StaffSizeCreateInput
}
export type StaffSizeUpsertNestedInputInputObject =
  | Extract<keyof StaffSizeUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface MatchUpdateManyWithoutStaffInput {
  create?: MatchCreateWithoutStaffInput[]
  delete?: MatchWhereUniqueInput[]
  connect?: MatchWhereUniqueInput[]
  set?: MatchWhereUniqueInput[]
  disconnect?: MatchWhereUniqueInput[]
  update?: MatchUpdateWithWhereUniqueWithoutStaffInput[]
  upsert?: MatchUpsertWithWhereUniqueWithoutStaffInput[]
  deleteMany?: MatchScalarWhereInput[]
  updateMany?: MatchUpdateManyWithWhereNestedInput[]
}
export type MatchUpdateManyWithoutStaffInputInputObject =
  | Extract<keyof MatchUpdateManyWithoutStaffInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface MatchUpdateWithWhereUniqueWithoutStaffInput {
  where?: MatchWhereUniqueInput
  data?: MatchUpdateWithoutStaffDataInput
}
export type MatchUpdateWithWhereUniqueWithoutStaffInputInputObject =
  | Extract<keyof MatchUpdateWithWhereUniqueWithoutStaffInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface MatchUpdateWithoutStaffDataInput {
  date?: string | null
  jornada?: number | null
  finished?: boolean | null
  homeTeam?: boolean | null
  opponent?: TeamUpdateOneInput | null
  win?: boolean | null
  competition?: prisma.Competiton | null
  captain?: PlayerUpdateOneRequiredInput | null
  lineup?: PlayerUpdateManyWithoutLineupInput | null
  bench?: PlayerUpdateManyWithoutBenchInput | null
  score?: ScoreUpdateOneRequiredInput | null
  goals?: GoalUpdateManyWithoutMatchInput | null
  assist?: AssistUpdateManyWithoutMatchInput | null
  substitutions?: SubstitutionsUpdateManyInput | null
  bookings?: BookingUpdateManyWithoutMatchInput | null
  referees?: string | null
  desc?: string | null
}
export type MatchUpdateWithoutStaffDataInputInputObject =
  | Extract<keyof MatchUpdateWithoutStaffDataInput, string>
  | { name: 'date', alias?: string  } 
  | { name: 'jornada', alias?: string  } 
  | { name: 'finished', alias?: string  } 
  | { name: 'homeTeam', alias?: string  } 
  | { name: 'opponent', alias?: string  } 
  | { name: 'win', alias?: string  } 
  | { name: 'competition', alias?: string  } 
  | { name: 'captain', alias?: string  } 
  | { name: 'lineup', alias?: string  } 
  | { name: 'bench', alias?: string  } 
  | { name: 'score', alias?: string  } 
  | { name: 'goals', alias?: string  } 
  | { name: 'assist', alias?: string  } 
  | { name: 'substitutions', alias?: string  } 
  | { name: 'bookings', alias?: string  } 
  | { name: 'referees', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  
export interface TeamUpdateOneInput {
  create?: TeamCreateInput | null
  update?: TeamUpdateDataInput | null
  upsert?: TeamUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: TeamWhereUniqueInput | null
}
export type TeamUpdateOneInputInputObject =
  | Extract<keyof TeamUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TeamUpdateDataInput {
  logoUrl?: string | null
  name?: string | null
  players?: PlayerUpdateManyWithoutTeamInput | null
  staff?: StaffUpdateManyWithoutTeamInput | null
}
export type TeamUpdateDataInputInputObject =
  | Extract<keyof TeamUpdateDataInput, string>
  | { name: 'logoUrl', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'players', alias?: string  } 
  | { name: 'staff', alias?: string  } 
  
export interface PlayerUpdateManyWithoutTeamInput {
  create?: PlayerCreateWithoutTeamInput[]
  delete?: PlayerWhereUniqueInput[]
  connect?: PlayerWhereUniqueInput[]
  set?: PlayerWhereUniqueInput[]
  disconnect?: PlayerWhereUniqueInput[]
  update?: PlayerUpdateWithWhereUniqueWithoutTeamInput[]
  upsert?: PlayerUpsertWithWhereUniqueWithoutTeamInput[]
  deleteMany?: PlayerScalarWhereInput[]
  updateMany?: PlayerUpdateManyWithWhereNestedInput[]
}
export type PlayerUpdateManyWithoutTeamInputInputObject =
  | Extract<keyof PlayerUpdateManyWithoutTeamInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface PlayerUpdateWithWhereUniqueWithoutTeamInput {
  where?: PlayerWhereUniqueInput
  data?: PlayerUpdateWithoutTeamDataInput
}
export type PlayerUpdateWithWhereUniqueWithoutTeamInputInputObject =
  | Extract<keyof PlayerUpdateWithWhereUniqueWithoutTeamInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PlayerUpdateWithoutTeamDataInput {
  nick?: string | null
  shirtNumber?: number | null
  imgUrl?: string | null
  captain?: boolean | null
  personalInfo?: PersonalInfoUpdateOneInput | null
  position?: prisma.PlayerPosition | null
  altPosition?: prisma.PlayerPosition | null
  assessment?: AssessmentUpdateOneInput | null
  foot?: prisma.Foot | null
  from?: WhereFromUpdateOneInput | null
  injured?: boolean | null
  injury?: InjuryUpdateManyWithoutPlayerInput | null
  sizes?: SizeUpdateOneInput | null
  goals?: GoalUpdateManyWithoutPlayerInput | null
  assist?: AssistUpdateManyWithoutPlayerInput | null
  bookings?: BookingUpdateManyWithoutPlayerInput | null
  lineup?: MatchUpdateManyWithoutLineupInput | null
  bench?: MatchUpdateManyWithoutBenchInput | null
}
export type PlayerUpdateWithoutTeamDataInputInputObject =
  | Extract<keyof PlayerUpdateWithoutTeamDataInput, string>
  | { name: 'nick', alias?: string  } 
  | { name: 'shirtNumber', alias?: string  } 
  | { name: 'imgUrl', alias?: string  } 
  | { name: 'captain', alias?: string  } 
  | { name: 'personalInfo', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'altPosition', alias?: string  } 
  | { name: 'assessment', alias?: string  } 
  | { name: 'foot', alias?: string  } 
  | { name: 'from', alias?: string  } 
  | { name: 'injured', alias?: string  } 
  | { name: 'injury', alias?: string  } 
  | { name: 'sizes', alias?: string  } 
  | { name: 'goals', alias?: string  } 
  | { name: 'assist', alias?: string  } 
  | { name: 'bookings', alias?: string  } 
  | { name: 'lineup', alias?: string  } 
  | { name: 'bench', alias?: string  } 
  
export interface PersonalInfoUpdateOneInput {
  create?: PersonalInfoCreateInput | null
  update?: PersonalInfoUpdateDataInput | null
  upsert?: PersonalInfoUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: PersonalInfoWhereUniqueInput | null
}
export type PersonalInfoUpdateOneInputInputObject =
  | Extract<keyof PersonalInfoUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PersonalInfoUpdateDataInput {
  name?: string | null
  firstName?: string | null
  lastName?: string | null
  dateOfBirth?: string | null
  tel?: number | null
  email?: string | null
  dni?: string | null
  origin?: string | null
  status?: string | null
  childs?: number | null
  brothers?: number | null
  poscBrothers?: number | null
  clubBrothers?: number | null
}
export type PersonalInfoUpdateDataInputInputObject =
  | Extract<keyof PersonalInfoUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'dateOfBirth', alias?: string  } 
  | { name: 'tel', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'dni', alias?: string  } 
  | { name: 'origin', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'childs', alias?: string  } 
  | { name: 'brothers', alias?: string  } 
  | { name: 'poscBrothers', alias?: string  } 
  | { name: 'clubBrothers', alias?: string  } 
  
export interface PersonalInfoUpsertNestedInput {
  update?: PersonalInfoUpdateDataInput
  create?: PersonalInfoCreateInput
}
export type PersonalInfoUpsertNestedInputInputObject =
  | Extract<keyof PersonalInfoUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PersonalInfoWhereUniqueInput {
  id?: string | null
}
export type PersonalInfoWhereUniqueInputInputObject =
  | Extract<keyof PersonalInfoWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface AssessmentUpdateOneInput {
  create?: AssessmentCreateInput | null
  update?: AssessmentUpdateDataInput | null
  upsert?: AssessmentUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: AssessmentWhereUniqueInput | null
}
export type AssessmentUpdateOneInputInputObject =
  | Extract<keyof AssessmentUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface AssessmentUpdateDataInput {
  personality?: number | null
  psychology?: number | null
  technical?: number | null
  tactical?: number | null
  physical?: number | null
}
export type AssessmentUpdateDataInputInputObject =
  | Extract<keyof AssessmentUpdateDataInput, string>
  | { name: 'personality', alias?: string  } 
  | { name: 'psychology', alias?: string  } 
  | { name: 'technical', alias?: string  } 
  | { name: 'tactical', alias?: string  } 
  | { name: 'physical', alias?: string  } 
  
export interface AssessmentUpsertNestedInput {
  update?: AssessmentUpdateDataInput
  create?: AssessmentCreateInput
}
export type AssessmentUpsertNestedInputInputObject =
  | Extract<keyof AssessmentUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface AssessmentWhereUniqueInput {
  id?: string | null
}
export type AssessmentWhereUniqueInputInputObject =
  | Extract<keyof AssessmentWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface WhereFromUpdateOneInput {
  create?: WhereFromCreateInput | null
  update?: WhereFromUpdateDataInput | null
  upsert?: WhereFromUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: WhereFromWhereUniqueInput | null
}
export type WhereFromUpdateOneInputInputObject =
  | Extract<keyof WhereFromUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface WhereFromUpdateDataInput {
  address?: string | null
  number?: number | null
  town?: string | null
  province?: string | null
  countruy?: string | null
  PC?: number | null
  placeOfBirth?: string | null
  nationality?: string | null
  extra?: boolean | null
}
export type WhereFromUpdateDataInputInputObject =
  | Extract<keyof WhereFromUpdateDataInput, string>
  | { name: 'address', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'town', alias?: string  } 
  | { name: 'province', alias?: string  } 
  | { name: 'countruy', alias?: string  } 
  | { name: 'PC', alias?: string  } 
  | { name: 'placeOfBirth', alias?: string  } 
  | { name: 'nationality', alias?: string  } 
  | { name: 'extra', alias?: string  } 
  
export interface WhereFromUpsertNestedInput {
  update?: WhereFromUpdateDataInput
  create?: WhereFromCreateInput
}
export type WhereFromUpsertNestedInputInputObject =
  | Extract<keyof WhereFromUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface WhereFromWhereUniqueInput {
  id?: string | null
}
export type WhereFromWhereUniqueInputInputObject =
  | Extract<keyof WhereFromWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface InjuryUpdateManyWithoutPlayerInput {
  create?: InjuryCreateWithoutPlayerInput[]
  delete?: InjuryWhereUniqueInput[]
  connect?: InjuryWhereUniqueInput[]
  set?: InjuryWhereUniqueInput[]
  disconnect?: InjuryWhereUniqueInput[]
  update?: InjuryUpdateWithWhereUniqueWithoutPlayerInput[]
  upsert?: InjuryUpsertWithWhereUniqueWithoutPlayerInput[]
  deleteMany?: InjuryScalarWhereInput[]
  updateMany?: InjuryUpdateManyWithWhereNestedInput[]
}
export type InjuryUpdateManyWithoutPlayerInputInputObject =
  | Extract<keyof InjuryUpdateManyWithoutPlayerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface InjuryUpdateWithWhereUniqueWithoutPlayerInput {
  where?: InjuryWhereUniqueInput
  data?: InjuryUpdateWithoutPlayerDataInput
}
export type InjuryUpdateWithWhereUniqueWithoutPlayerInputInputObject =
  | Extract<keyof InjuryUpdateWithWhereUniqueWithoutPlayerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface InjuryUpdateWithoutPlayerDataInput {
  startAt?: string | null
  endAt?: string | null
  desc?: string | null
}
export type InjuryUpdateWithoutPlayerDataInputInputObject =
  | Extract<keyof InjuryUpdateWithoutPlayerDataInput, string>
  | { name: 'startAt', alias?: string  } 
  | { name: 'endAt', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  
export interface InjuryUpsertWithWhereUniqueWithoutPlayerInput {
  where?: InjuryWhereUniqueInput
  update?: InjuryUpdateWithoutPlayerDataInput
  create?: InjuryCreateWithoutPlayerInput
}
export type InjuryUpsertWithWhereUniqueWithoutPlayerInputInputObject =
  | Extract<keyof InjuryUpsertWithWhereUniqueWithoutPlayerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface InjuryScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  startAt?: string | null
  startAt_not?: string | null
  startAt_in?: string[]
  startAt_not_in?: string[]
  startAt_lt?: string | null
  startAt_lte?: string | null
  startAt_gt?: string | null
  startAt_gte?: string | null
  endAt?: string | null
  endAt_not?: string | null
  endAt_in?: string[]
  endAt_not_in?: string[]
  endAt_lt?: string | null
  endAt_lte?: string | null
  endAt_gt?: string | null
  endAt_gte?: string | null
  desc?: string | null
  desc_not?: string | null
  desc_in?: string[]
  desc_not_in?: string[]
  desc_lt?: string | null
  desc_lte?: string | null
  desc_gt?: string | null
  desc_gte?: string | null
  desc_contains?: string | null
  desc_not_contains?: string | null
  desc_starts_with?: string | null
  desc_not_starts_with?: string | null
  desc_ends_with?: string | null
  desc_not_ends_with?: string | null
  AND?: InjuryScalarWhereInput[]
  OR?: InjuryScalarWhereInput[]
  NOT?: InjuryScalarWhereInput[]
}
export type InjuryScalarWhereInputInputObject =
  | Extract<keyof InjuryScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'startAt', alias?: string  } 
  | { name: 'startAt_not', alias?: string  } 
  | { name: 'startAt_in', alias?: string  } 
  | { name: 'startAt_not_in', alias?: string  } 
  | { name: 'startAt_lt', alias?: string  } 
  | { name: 'startAt_lte', alias?: string  } 
  | { name: 'startAt_gt', alias?: string  } 
  | { name: 'startAt_gte', alias?: string  } 
  | { name: 'endAt', alias?: string  } 
  | { name: 'endAt_not', alias?: string  } 
  | { name: 'endAt_in', alias?: string  } 
  | { name: 'endAt_not_in', alias?: string  } 
  | { name: 'endAt_lt', alias?: string  } 
  | { name: 'endAt_lte', alias?: string  } 
  | { name: 'endAt_gt', alias?: string  } 
  | { name: 'endAt_gte', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'desc_not', alias?: string  } 
  | { name: 'desc_in', alias?: string  } 
  | { name: 'desc_not_in', alias?: string  } 
  | { name: 'desc_lt', alias?: string  } 
  | { name: 'desc_lte', alias?: string  } 
  | { name: 'desc_gt', alias?: string  } 
  | { name: 'desc_gte', alias?: string  } 
  | { name: 'desc_contains', alias?: string  } 
  | { name: 'desc_not_contains', alias?: string  } 
  | { name: 'desc_starts_with', alias?: string  } 
  | { name: 'desc_not_starts_with', alias?: string  } 
  | { name: 'desc_ends_with', alias?: string  } 
  | { name: 'desc_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface InjuryUpdateManyWithWhereNestedInput {
  where?: InjuryScalarWhereInput
  data?: InjuryUpdateManyDataInput
}
export type InjuryUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof InjuryUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface InjuryUpdateManyDataInput {
  startAt?: string | null
  endAt?: string | null
  desc?: string | null
}
export type InjuryUpdateManyDataInputInputObject =
  | Extract<keyof InjuryUpdateManyDataInput, string>
  | { name: 'startAt', alias?: string  } 
  | { name: 'endAt', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  
export interface SizeUpdateOneInput {
  create?: SizeCreateInput | null
  update?: SizeUpdateDataInput | null
  upsert?: SizeUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: SizeWhereUniqueInput | null
}
export type SizeUpdateOneInputInputObject =
  | Extract<keyof SizeUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface SizeUpdateDataInput {
  clothing?: string | null
  step?: number | null
}
export type SizeUpdateDataInputInputObject =
  | Extract<keyof SizeUpdateDataInput, string>
  | { name: 'clothing', alias?: string  } 
  | { name: 'step', alias?: string  } 
  
export interface SizeUpsertNestedInput {
  update?: SizeUpdateDataInput
  create?: SizeCreateInput
}
export type SizeUpsertNestedInputInputObject =
  | Extract<keyof SizeUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface SizeWhereUniqueInput {
  id?: string | null
}
export type SizeWhereUniqueInputInputObject =
  | Extract<keyof SizeWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface GoalUpdateManyWithoutPlayerInput {
  create?: GoalCreateWithoutPlayerInput[]
  delete?: GoalWhereUniqueInput[]
  connect?: GoalWhereUniqueInput[]
  set?: GoalWhereUniqueInput[]
  disconnect?: GoalWhereUniqueInput[]
  update?: GoalUpdateWithWhereUniqueWithoutPlayerInput[]
  upsert?: GoalUpsertWithWhereUniqueWithoutPlayerInput[]
  deleteMany?: GoalScalarWhereInput[]
  updateMany?: GoalUpdateManyWithWhereNestedInput[]
}
export type GoalUpdateManyWithoutPlayerInputInputObject =
  | Extract<keyof GoalUpdateManyWithoutPlayerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface GoalUpdateWithWhereUniqueWithoutPlayerInput {
  where?: GoalWhereUniqueInput
  data?: GoalUpdateWithoutPlayerDataInput
}
export type GoalUpdateWithWhereUniqueWithoutPlayerInputInputObject =
  | Extract<keyof GoalUpdateWithWhereUniqueWithoutPlayerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface GoalUpdateWithoutPlayerDataInput {
  match?: MatchUpdateOneRequiredWithoutGoalsInput | null
  min?: number | null
  desc?: string | null
}
export type GoalUpdateWithoutPlayerDataInputInputObject =
  | Extract<keyof GoalUpdateWithoutPlayerDataInput, string>
  | { name: 'match', alias?: string  } 
  | { name: 'min', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  
export interface MatchUpdateOneRequiredWithoutGoalsInput {
  create?: MatchCreateWithoutGoalsInput | null
  update?: MatchUpdateWithoutGoalsDataInput | null
  upsert?: MatchUpsertWithoutGoalsInput | null
  connect?: MatchWhereUniqueInput | null
}
export type MatchUpdateOneRequiredWithoutGoalsInputInputObject =
  | Extract<keyof MatchUpdateOneRequiredWithoutGoalsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface MatchUpdateWithoutGoalsDataInput {
  date?: string | null
  jornada?: number | null
  finished?: boolean | null
  homeTeam?: boolean | null
  opponent?: TeamUpdateOneInput | null
  win?: boolean | null
  competition?: prisma.Competiton | null
  captain?: PlayerUpdateOneRequiredInput | null
  staff?: StaffUpdateManyWithoutMatchesInput | null
  lineup?: PlayerUpdateManyWithoutLineupInput | null
  bench?: PlayerUpdateManyWithoutBenchInput | null
  score?: ScoreUpdateOneRequiredInput | null
  assist?: AssistUpdateManyWithoutMatchInput | null
  substitutions?: SubstitutionsUpdateManyInput | null
  bookings?: BookingUpdateManyWithoutMatchInput | null
  referees?: string | null
  desc?: string | null
}
export type MatchUpdateWithoutGoalsDataInputInputObject =
  | Extract<keyof MatchUpdateWithoutGoalsDataInput, string>
  | { name: 'date', alias?: string  } 
  | { name: 'jornada', alias?: string  } 
  | { name: 'finished', alias?: string  } 
  | { name: 'homeTeam', alias?: string  } 
  | { name: 'opponent', alias?: string  } 
  | { name: 'win', alias?: string  } 
  | { name: 'competition', alias?: string  } 
  | { name: 'captain', alias?: string  } 
  | { name: 'staff', alias?: string  } 
  | { name: 'lineup', alias?: string  } 
  | { name: 'bench', alias?: string  } 
  | { name: 'score', alias?: string  } 
  | { name: 'assist', alias?: string  } 
  | { name: 'substitutions', alias?: string  } 
  | { name: 'bookings', alias?: string  } 
  | { name: 'referees', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  
export interface PlayerUpdateOneRequiredInput {
  create?: PlayerCreateInput | null
  update?: PlayerUpdateDataInput | null
  upsert?: PlayerUpsertNestedInput | null
  connect?: PlayerWhereUniqueInput | null
}
export type PlayerUpdateOneRequiredInputInputObject =
  | Extract<keyof PlayerUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PlayerUpdateDataInput {
  nick?: string | null
  shirtNumber?: number | null
  imgUrl?: string | null
  team?: TeamUpdateOneWithoutPlayersInput | null
  captain?: boolean | null
  personalInfo?: PersonalInfoUpdateOneInput | null
  position?: prisma.PlayerPosition | null
  altPosition?: prisma.PlayerPosition | null
  assessment?: AssessmentUpdateOneInput | null
  foot?: prisma.Foot | null
  from?: WhereFromUpdateOneInput | null
  injured?: boolean | null
  injury?: InjuryUpdateManyWithoutPlayerInput | null
  sizes?: SizeUpdateOneInput | null
  goals?: GoalUpdateManyWithoutPlayerInput | null
  assist?: AssistUpdateManyWithoutPlayerInput | null
  bookings?: BookingUpdateManyWithoutPlayerInput | null
  lineup?: MatchUpdateManyWithoutLineupInput | null
  bench?: MatchUpdateManyWithoutBenchInput | null
}
export type PlayerUpdateDataInputInputObject =
  | Extract<keyof PlayerUpdateDataInput, string>
  | { name: 'nick', alias?: string  } 
  | { name: 'shirtNumber', alias?: string  } 
  | { name: 'imgUrl', alias?: string  } 
  | { name: 'team', alias?: string  } 
  | { name: 'captain', alias?: string  } 
  | { name: 'personalInfo', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'altPosition', alias?: string  } 
  | { name: 'assessment', alias?: string  } 
  | { name: 'foot', alias?: string  } 
  | { name: 'from', alias?: string  } 
  | { name: 'injured', alias?: string  } 
  | { name: 'injury', alias?: string  } 
  | { name: 'sizes', alias?: string  } 
  | { name: 'goals', alias?: string  } 
  | { name: 'assist', alias?: string  } 
  | { name: 'bookings', alias?: string  } 
  | { name: 'lineup', alias?: string  } 
  | { name: 'bench', alias?: string  } 
  
export interface AssistUpdateManyWithoutPlayerInput {
  create?: AssistCreateWithoutPlayerInput[]
  delete?: AssistWhereUniqueInput[]
  connect?: AssistWhereUniqueInput[]
  set?: AssistWhereUniqueInput[]
  disconnect?: AssistWhereUniqueInput[]
  update?: AssistUpdateWithWhereUniqueWithoutPlayerInput[]
  upsert?: AssistUpsertWithWhereUniqueWithoutPlayerInput[]
  deleteMany?: AssistScalarWhereInput[]
  updateMany?: AssistUpdateManyWithWhereNestedInput[]
}
export type AssistUpdateManyWithoutPlayerInputInputObject =
  | Extract<keyof AssistUpdateManyWithoutPlayerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface AssistUpdateWithWhereUniqueWithoutPlayerInput {
  where?: AssistWhereUniqueInput
  data?: AssistUpdateWithoutPlayerDataInput
}
export type AssistUpdateWithWhereUniqueWithoutPlayerInputInputObject =
  | Extract<keyof AssistUpdateWithWhereUniqueWithoutPlayerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface AssistUpdateWithoutPlayerDataInput {
  match?: MatchUpdateOneRequiredWithoutAssistInput | null
  min?: number | null
  desc?: string | null
}
export type AssistUpdateWithoutPlayerDataInputInputObject =
  | Extract<keyof AssistUpdateWithoutPlayerDataInput, string>
  | { name: 'match', alias?: string  } 
  | { name: 'min', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  
export interface MatchUpdateOneRequiredWithoutAssistInput {
  create?: MatchCreateWithoutAssistInput | null
  update?: MatchUpdateWithoutAssistDataInput | null
  upsert?: MatchUpsertWithoutAssistInput | null
  connect?: MatchWhereUniqueInput | null
}
export type MatchUpdateOneRequiredWithoutAssistInputInputObject =
  | Extract<keyof MatchUpdateOneRequiredWithoutAssistInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface MatchUpdateWithoutAssistDataInput {
  date?: string | null
  jornada?: number | null
  finished?: boolean | null
  homeTeam?: boolean | null
  opponent?: TeamUpdateOneInput | null
  win?: boolean | null
  competition?: prisma.Competiton | null
  captain?: PlayerUpdateOneRequiredInput | null
  staff?: StaffUpdateManyWithoutMatchesInput | null
  lineup?: PlayerUpdateManyWithoutLineupInput | null
  bench?: PlayerUpdateManyWithoutBenchInput | null
  score?: ScoreUpdateOneRequiredInput | null
  goals?: GoalUpdateManyWithoutMatchInput | null
  substitutions?: SubstitutionsUpdateManyInput | null
  bookings?: BookingUpdateManyWithoutMatchInput | null
  referees?: string | null
  desc?: string | null
}
export type MatchUpdateWithoutAssistDataInputInputObject =
  | Extract<keyof MatchUpdateWithoutAssistDataInput, string>
  | { name: 'date', alias?: string  } 
  | { name: 'jornada', alias?: string  } 
  | { name: 'finished', alias?: string  } 
  | { name: 'homeTeam', alias?: string  } 
  | { name: 'opponent', alias?: string  } 
  | { name: 'win', alias?: string  } 
  | { name: 'competition', alias?: string  } 
  | { name: 'captain', alias?: string  } 
  | { name: 'staff', alias?: string  } 
  | { name: 'lineup', alias?: string  } 
  | { name: 'bench', alias?: string  } 
  | { name: 'score', alias?: string  } 
  | { name: 'goals', alias?: string  } 
  | { name: 'substitutions', alias?: string  } 
  | { name: 'bookings', alias?: string  } 
  | { name: 'referees', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  
export interface StaffUpdateManyWithoutMatchesInput {
  create?: StaffCreateWithoutMatchesInput[]
  delete?: StaffWhereUniqueInput[]
  connect?: StaffWhereUniqueInput[]
  set?: StaffWhereUniqueInput[]
  disconnect?: StaffWhereUniqueInput[]
  update?: StaffUpdateWithWhereUniqueWithoutMatchesInput[]
  upsert?: StaffUpsertWithWhereUniqueWithoutMatchesInput[]
  deleteMany?: StaffScalarWhereInput[]
  updateMany?: StaffUpdateManyWithWhereNestedInput[]
}
export type StaffUpdateManyWithoutMatchesInputInputObject =
  | Extract<keyof StaffUpdateManyWithoutMatchesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface StaffUpdateWithWhereUniqueWithoutMatchesInput {
  where?: StaffWhereUniqueInput
  data?: StaffUpdateWithoutMatchesDataInput
}
export type StaffUpdateWithWhereUniqueWithoutMatchesInputInputObject =
  | Extract<keyof StaffUpdateWithWhereUniqueWithoutMatchesInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface StaffUpdateWithoutMatchesDataInput {
  nick?: string | null
  imgUrl?: string | null
  team?: TeamUpdateOneWithoutStaffInput | null
  personalInfo?: StaffInfoUpdateOneInput | null
  from?: StaffFromUpdateOneInput | null
  sizes?: StaffSizeUpdateOneInput | null
  role?: string | null
}
export type StaffUpdateWithoutMatchesDataInputInputObject =
  | Extract<keyof StaffUpdateWithoutMatchesDataInput, string>
  | { name: 'nick', alias?: string  } 
  | { name: 'imgUrl', alias?: string  } 
  | { name: 'team', alias?: string  } 
  | { name: 'personalInfo', alias?: string  } 
  | { name: 'from', alias?: string  } 
  | { name: 'sizes', alias?: string  } 
  | { name: 'role', alias?: string  } 
  
export interface TeamUpdateOneWithoutStaffInput {
  create?: TeamCreateWithoutStaffInput | null
  update?: TeamUpdateWithoutStaffDataInput | null
  upsert?: TeamUpsertWithoutStaffInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: TeamWhereUniqueInput | null
}
export type TeamUpdateOneWithoutStaffInputInputObject =
  | Extract<keyof TeamUpdateOneWithoutStaffInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TeamUpdateWithoutStaffDataInput {
  logoUrl?: string | null
  name?: string | null
  players?: PlayerUpdateManyWithoutTeamInput | null
}
export type TeamUpdateWithoutStaffDataInputInputObject =
  | Extract<keyof TeamUpdateWithoutStaffDataInput, string>
  | { name: 'logoUrl', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'players', alias?: string  } 
  
export interface TeamUpsertWithoutStaffInput {
  update?: TeamUpdateWithoutStaffDataInput
  create?: TeamCreateWithoutStaffInput
}
export type TeamUpsertWithoutStaffInputInputObject =
  | Extract<keyof TeamUpsertWithoutStaffInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface StaffUpsertWithWhereUniqueWithoutMatchesInput {
  where?: StaffWhereUniqueInput
  update?: StaffUpdateWithoutMatchesDataInput
  create?: StaffCreateWithoutMatchesInput
}
export type StaffUpsertWithWhereUniqueWithoutMatchesInputInputObject =
  | Extract<keyof StaffUpsertWithWhereUniqueWithoutMatchesInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface StaffScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  nick?: string | null
  nick_not?: string | null
  nick_in?: string[]
  nick_not_in?: string[]
  nick_lt?: string | null
  nick_lte?: string | null
  nick_gt?: string | null
  nick_gte?: string | null
  nick_contains?: string | null
  nick_not_contains?: string | null
  nick_starts_with?: string | null
  nick_not_starts_with?: string | null
  nick_ends_with?: string | null
  nick_not_ends_with?: string | null
  imgUrl?: string | null
  imgUrl_not?: string | null
  imgUrl_in?: string[]
  imgUrl_not_in?: string[]
  imgUrl_lt?: string | null
  imgUrl_lte?: string | null
  imgUrl_gt?: string | null
  imgUrl_gte?: string | null
  imgUrl_contains?: string | null
  imgUrl_not_contains?: string | null
  imgUrl_starts_with?: string | null
  imgUrl_not_starts_with?: string | null
  imgUrl_ends_with?: string | null
  imgUrl_not_ends_with?: string | null
  role?: string | null
  role_not?: string | null
  role_in?: string[]
  role_not_in?: string[]
  role_lt?: string | null
  role_lte?: string | null
  role_gt?: string | null
  role_gte?: string | null
  role_contains?: string | null
  role_not_contains?: string | null
  role_starts_with?: string | null
  role_not_starts_with?: string | null
  role_ends_with?: string | null
  role_not_ends_with?: string | null
  AND?: StaffScalarWhereInput[]
  OR?: StaffScalarWhereInput[]
  NOT?: StaffScalarWhereInput[]
}
export type StaffScalarWhereInputInputObject =
  | Extract<keyof StaffScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'nick', alias?: string  } 
  | { name: 'nick_not', alias?: string  } 
  | { name: 'nick_in', alias?: string  } 
  | { name: 'nick_not_in', alias?: string  } 
  | { name: 'nick_lt', alias?: string  } 
  | { name: 'nick_lte', alias?: string  } 
  | { name: 'nick_gt', alias?: string  } 
  | { name: 'nick_gte', alias?: string  } 
  | { name: 'nick_contains', alias?: string  } 
  | { name: 'nick_not_contains', alias?: string  } 
  | { name: 'nick_starts_with', alias?: string  } 
  | { name: 'nick_not_starts_with', alias?: string  } 
  | { name: 'nick_ends_with', alias?: string  } 
  | { name: 'nick_not_ends_with', alias?: string  } 
  | { name: 'imgUrl', alias?: string  } 
  | { name: 'imgUrl_not', alias?: string  } 
  | { name: 'imgUrl_in', alias?: string  } 
  | { name: 'imgUrl_not_in', alias?: string  } 
  | { name: 'imgUrl_lt', alias?: string  } 
  | { name: 'imgUrl_lte', alias?: string  } 
  | { name: 'imgUrl_gt', alias?: string  } 
  | { name: 'imgUrl_gte', alias?: string  } 
  | { name: 'imgUrl_contains', alias?: string  } 
  | { name: 'imgUrl_not_contains', alias?: string  } 
  | { name: 'imgUrl_starts_with', alias?: string  } 
  | { name: 'imgUrl_not_starts_with', alias?: string  } 
  | { name: 'imgUrl_ends_with', alias?: string  } 
  | { name: 'imgUrl_not_ends_with', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'role_not', alias?: string  } 
  | { name: 'role_in', alias?: string  } 
  | { name: 'role_not_in', alias?: string  } 
  | { name: 'role_lt', alias?: string  } 
  | { name: 'role_lte', alias?: string  } 
  | { name: 'role_gt', alias?: string  } 
  | { name: 'role_gte', alias?: string  } 
  | { name: 'role_contains', alias?: string  } 
  | { name: 'role_not_contains', alias?: string  } 
  | { name: 'role_starts_with', alias?: string  } 
  | { name: 'role_not_starts_with', alias?: string  } 
  | { name: 'role_ends_with', alias?: string  } 
  | { name: 'role_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface StaffUpdateManyWithWhereNestedInput {
  where?: StaffScalarWhereInput
  data?: StaffUpdateManyDataInput
}
export type StaffUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof StaffUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface StaffUpdateManyDataInput {
  nick?: string | null
  imgUrl?: string | null
  role?: string | null
}
export type StaffUpdateManyDataInputInputObject =
  | Extract<keyof StaffUpdateManyDataInput, string>
  | { name: 'nick', alias?: string  } 
  | { name: 'imgUrl', alias?: string  } 
  | { name: 'role', alias?: string  } 
  
export interface PlayerUpdateManyWithoutLineupInput {
  create?: PlayerCreateWithoutLineupInput[]
  delete?: PlayerWhereUniqueInput[]
  connect?: PlayerWhereUniqueInput[]
  set?: PlayerWhereUniqueInput[]
  disconnect?: PlayerWhereUniqueInput[]
  update?: PlayerUpdateWithWhereUniqueWithoutLineupInput[]
  upsert?: PlayerUpsertWithWhereUniqueWithoutLineupInput[]
  deleteMany?: PlayerScalarWhereInput[]
  updateMany?: PlayerUpdateManyWithWhereNestedInput[]
}
export type PlayerUpdateManyWithoutLineupInputInputObject =
  | Extract<keyof PlayerUpdateManyWithoutLineupInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface PlayerUpdateWithWhereUniqueWithoutLineupInput {
  where?: PlayerWhereUniqueInput
  data?: PlayerUpdateWithoutLineupDataInput
}
export type PlayerUpdateWithWhereUniqueWithoutLineupInputInputObject =
  | Extract<keyof PlayerUpdateWithWhereUniqueWithoutLineupInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PlayerUpdateWithoutLineupDataInput {
  nick?: string | null
  shirtNumber?: number | null
  imgUrl?: string | null
  team?: TeamUpdateOneWithoutPlayersInput | null
  captain?: boolean | null
  personalInfo?: PersonalInfoUpdateOneInput | null
  position?: prisma.PlayerPosition | null
  altPosition?: prisma.PlayerPosition | null
  assessment?: AssessmentUpdateOneInput | null
  foot?: prisma.Foot | null
  from?: WhereFromUpdateOneInput | null
  injured?: boolean | null
  injury?: InjuryUpdateManyWithoutPlayerInput | null
  sizes?: SizeUpdateOneInput | null
  goals?: GoalUpdateManyWithoutPlayerInput | null
  assist?: AssistUpdateManyWithoutPlayerInput | null
  bookings?: BookingUpdateManyWithoutPlayerInput | null
  bench?: MatchUpdateManyWithoutBenchInput | null
}
export type PlayerUpdateWithoutLineupDataInputInputObject =
  | Extract<keyof PlayerUpdateWithoutLineupDataInput, string>
  | { name: 'nick', alias?: string  } 
  | { name: 'shirtNumber', alias?: string  } 
  | { name: 'imgUrl', alias?: string  } 
  | { name: 'team', alias?: string  } 
  | { name: 'captain', alias?: string  } 
  | { name: 'personalInfo', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'altPosition', alias?: string  } 
  | { name: 'assessment', alias?: string  } 
  | { name: 'foot', alias?: string  } 
  | { name: 'from', alias?: string  } 
  | { name: 'injured', alias?: string  } 
  | { name: 'injury', alias?: string  } 
  | { name: 'sizes', alias?: string  } 
  | { name: 'goals', alias?: string  } 
  | { name: 'assist', alias?: string  } 
  | { name: 'bookings', alias?: string  } 
  | { name: 'bench', alias?: string  } 
  
export interface BookingUpdateManyWithoutPlayerInput {
  create?: BookingCreateWithoutPlayerInput[]
  delete?: BookingWhereUniqueInput[]
  connect?: BookingWhereUniqueInput[]
  set?: BookingWhereUniqueInput[]
  disconnect?: BookingWhereUniqueInput[]
  update?: BookingUpdateWithWhereUniqueWithoutPlayerInput[]
  upsert?: BookingUpsertWithWhereUniqueWithoutPlayerInput[]
  deleteMany?: BookingScalarWhereInput[]
  updateMany?: BookingUpdateManyWithWhereNestedInput[]
}
export type BookingUpdateManyWithoutPlayerInputInputObject =
  | Extract<keyof BookingUpdateManyWithoutPlayerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface BookingUpdateWithWhereUniqueWithoutPlayerInput {
  where?: BookingWhereUniqueInput
  data?: BookingUpdateWithoutPlayerDataInput
}
export type BookingUpdateWithWhereUniqueWithoutPlayerInputInputObject =
  | Extract<keyof BookingUpdateWithWhereUniqueWithoutPlayerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface BookingUpdateWithoutPlayerDataInput {
  match?: MatchUpdateOneRequiredWithoutBookingsInput | null
  min?: number | null
  desc?: string | null
  card?: prisma.ColorCard | null
}
export type BookingUpdateWithoutPlayerDataInputInputObject =
  | Extract<keyof BookingUpdateWithoutPlayerDataInput, string>
  | { name: 'match', alias?: string  } 
  | { name: 'min', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'card', alias?: string  } 
  
export interface MatchUpdateOneRequiredWithoutBookingsInput {
  create?: MatchCreateWithoutBookingsInput | null
  update?: MatchUpdateWithoutBookingsDataInput | null
  upsert?: MatchUpsertWithoutBookingsInput | null
  connect?: MatchWhereUniqueInput | null
}
export type MatchUpdateOneRequiredWithoutBookingsInputInputObject =
  | Extract<keyof MatchUpdateOneRequiredWithoutBookingsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface MatchUpdateWithoutBookingsDataInput {
  date?: string | null
  jornada?: number | null
  finished?: boolean | null
  homeTeam?: boolean | null
  opponent?: TeamUpdateOneInput | null
  win?: boolean | null
  competition?: prisma.Competiton | null
  captain?: PlayerUpdateOneRequiredInput | null
  staff?: StaffUpdateManyWithoutMatchesInput | null
  lineup?: PlayerUpdateManyWithoutLineupInput | null
  bench?: PlayerUpdateManyWithoutBenchInput | null
  score?: ScoreUpdateOneRequiredInput | null
  goals?: GoalUpdateManyWithoutMatchInput | null
  assist?: AssistUpdateManyWithoutMatchInput | null
  substitutions?: SubstitutionsUpdateManyInput | null
  referees?: string | null
  desc?: string | null
}
export type MatchUpdateWithoutBookingsDataInputInputObject =
  | Extract<keyof MatchUpdateWithoutBookingsDataInput, string>
  | { name: 'date', alias?: string  } 
  | { name: 'jornada', alias?: string  } 
  | { name: 'finished', alias?: string  } 
  | { name: 'homeTeam', alias?: string  } 
  | { name: 'opponent', alias?: string  } 
  | { name: 'win', alias?: string  } 
  | { name: 'competition', alias?: string  } 
  | { name: 'captain', alias?: string  } 
  | { name: 'staff', alias?: string  } 
  | { name: 'lineup', alias?: string  } 
  | { name: 'bench', alias?: string  } 
  | { name: 'score', alias?: string  } 
  | { name: 'goals', alias?: string  } 
  | { name: 'assist', alias?: string  } 
  | { name: 'substitutions', alias?: string  } 
  | { name: 'referees', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  
export interface PlayerUpdateManyWithoutBenchInput {
  create?: PlayerCreateWithoutBenchInput[]
  delete?: PlayerWhereUniqueInput[]
  connect?: PlayerWhereUniqueInput[]
  set?: PlayerWhereUniqueInput[]
  disconnect?: PlayerWhereUniqueInput[]
  update?: PlayerUpdateWithWhereUniqueWithoutBenchInput[]
  upsert?: PlayerUpsertWithWhereUniqueWithoutBenchInput[]
  deleteMany?: PlayerScalarWhereInput[]
  updateMany?: PlayerUpdateManyWithWhereNestedInput[]
}
export type PlayerUpdateManyWithoutBenchInputInputObject =
  | Extract<keyof PlayerUpdateManyWithoutBenchInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface PlayerUpdateWithWhereUniqueWithoutBenchInput {
  where?: PlayerWhereUniqueInput
  data?: PlayerUpdateWithoutBenchDataInput
}
export type PlayerUpdateWithWhereUniqueWithoutBenchInputInputObject =
  | Extract<keyof PlayerUpdateWithWhereUniqueWithoutBenchInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PlayerUpdateWithoutBenchDataInput {
  nick?: string | null
  shirtNumber?: number | null
  imgUrl?: string | null
  team?: TeamUpdateOneWithoutPlayersInput | null
  captain?: boolean | null
  personalInfo?: PersonalInfoUpdateOneInput | null
  position?: prisma.PlayerPosition | null
  altPosition?: prisma.PlayerPosition | null
  assessment?: AssessmentUpdateOneInput | null
  foot?: prisma.Foot | null
  from?: WhereFromUpdateOneInput | null
  injured?: boolean | null
  injury?: InjuryUpdateManyWithoutPlayerInput | null
  sizes?: SizeUpdateOneInput | null
  goals?: GoalUpdateManyWithoutPlayerInput | null
  assist?: AssistUpdateManyWithoutPlayerInput | null
  bookings?: BookingUpdateManyWithoutPlayerInput | null
  lineup?: MatchUpdateManyWithoutLineupInput | null
}
export type PlayerUpdateWithoutBenchDataInputInputObject =
  | Extract<keyof PlayerUpdateWithoutBenchDataInput, string>
  | { name: 'nick', alias?: string  } 
  | { name: 'shirtNumber', alias?: string  } 
  | { name: 'imgUrl', alias?: string  } 
  | { name: 'team', alias?: string  } 
  | { name: 'captain', alias?: string  } 
  | { name: 'personalInfo', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'altPosition', alias?: string  } 
  | { name: 'assessment', alias?: string  } 
  | { name: 'foot', alias?: string  } 
  | { name: 'from', alias?: string  } 
  | { name: 'injured', alias?: string  } 
  | { name: 'injury', alias?: string  } 
  | { name: 'sizes', alias?: string  } 
  | { name: 'goals', alias?: string  } 
  | { name: 'assist', alias?: string  } 
  | { name: 'bookings', alias?: string  } 
  | { name: 'lineup', alias?: string  } 
  
export interface MatchUpdateManyWithoutLineupInput {
  create?: MatchCreateWithoutLineupInput[]
  delete?: MatchWhereUniqueInput[]
  connect?: MatchWhereUniqueInput[]
  set?: MatchWhereUniqueInput[]
  disconnect?: MatchWhereUniqueInput[]
  update?: MatchUpdateWithWhereUniqueWithoutLineupInput[]
  upsert?: MatchUpsertWithWhereUniqueWithoutLineupInput[]
  deleteMany?: MatchScalarWhereInput[]
  updateMany?: MatchUpdateManyWithWhereNestedInput[]
}
export type MatchUpdateManyWithoutLineupInputInputObject =
  | Extract<keyof MatchUpdateManyWithoutLineupInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface MatchUpdateWithWhereUniqueWithoutLineupInput {
  where?: MatchWhereUniqueInput
  data?: MatchUpdateWithoutLineupDataInput
}
export type MatchUpdateWithWhereUniqueWithoutLineupInputInputObject =
  | Extract<keyof MatchUpdateWithWhereUniqueWithoutLineupInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface MatchUpdateWithoutLineupDataInput {
  date?: string | null
  jornada?: number | null
  finished?: boolean | null
  homeTeam?: boolean | null
  opponent?: TeamUpdateOneInput | null
  win?: boolean | null
  competition?: prisma.Competiton | null
  captain?: PlayerUpdateOneRequiredInput | null
  staff?: StaffUpdateManyWithoutMatchesInput | null
  bench?: PlayerUpdateManyWithoutBenchInput | null
  score?: ScoreUpdateOneRequiredInput | null
  goals?: GoalUpdateManyWithoutMatchInput | null
  assist?: AssistUpdateManyWithoutMatchInput | null
  substitutions?: SubstitutionsUpdateManyInput | null
  bookings?: BookingUpdateManyWithoutMatchInput | null
  referees?: string | null
  desc?: string | null
}
export type MatchUpdateWithoutLineupDataInputInputObject =
  | Extract<keyof MatchUpdateWithoutLineupDataInput, string>
  | { name: 'date', alias?: string  } 
  | { name: 'jornada', alias?: string  } 
  | { name: 'finished', alias?: string  } 
  | { name: 'homeTeam', alias?: string  } 
  | { name: 'opponent', alias?: string  } 
  | { name: 'win', alias?: string  } 
  | { name: 'competition', alias?: string  } 
  | { name: 'captain', alias?: string  } 
  | { name: 'staff', alias?: string  } 
  | { name: 'bench', alias?: string  } 
  | { name: 'score', alias?: string  } 
  | { name: 'goals', alias?: string  } 
  | { name: 'assist', alias?: string  } 
  | { name: 'substitutions', alias?: string  } 
  | { name: 'bookings', alias?: string  } 
  | { name: 'referees', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  
export interface ScoreUpdateOneRequiredInput {
  create?: ScoreCreateInput | null
  update?: ScoreUpdateDataInput | null
  upsert?: ScoreUpsertNestedInput | null
}
export type ScoreUpdateOneRequiredInputInputObject =
  | Extract<keyof ScoreUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  
export interface ScoreUpdateDataInput {
  fullTime?: HomeAndAwayUpdateOneRequiredInput | null
  halfTime?: HomeAndAwayUpdateOneInput | null
  extraTime?: HomeAndAwayUpdateOneInput | null
  penalties?: HomeAndAwayUpdateOneInput | null
}
export type ScoreUpdateDataInputInputObject =
  | Extract<keyof ScoreUpdateDataInput, string>
  | { name: 'fullTime', alias?: string  } 
  | { name: 'halfTime', alias?: string  } 
  | { name: 'extraTime', alias?: string  } 
  | { name: 'penalties', alias?: string  } 
  
export interface HomeAndAwayUpdateOneRequiredInput {
  create?: HomeAndAwayCreateInput | null
  update?: HomeAndAwayUpdateDataInput | null
  upsert?: HomeAndAwayUpsertNestedInput | null
}
export type HomeAndAwayUpdateOneRequiredInputInputObject =
  | Extract<keyof HomeAndAwayUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  
export interface HomeAndAwayUpdateDataInput {
  homeTeam?: number | null
  awayTeam?: number | null
}
export type HomeAndAwayUpdateDataInputInputObject =
  | Extract<keyof HomeAndAwayUpdateDataInput, string>
  | { name: 'homeTeam', alias?: string  } 
  | { name: 'awayTeam', alias?: string  } 
  
export interface HomeAndAwayUpsertNestedInput {
  update?: HomeAndAwayUpdateDataInput
  create?: HomeAndAwayCreateInput
}
export type HomeAndAwayUpsertNestedInputInputObject =
  | Extract<keyof HomeAndAwayUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface HomeAndAwayUpdateOneInput {
  create?: HomeAndAwayCreateInput | null
  update?: HomeAndAwayUpdateDataInput | null
  upsert?: HomeAndAwayUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
}
export type HomeAndAwayUpdateOneInputInputObject =
  | Extract<keyof HomeAndAwayUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  
export interface ScoreUpsertNestedInput {
  update?: ScoreUpdateDataInput
  create?: ScoreCreateInput
}
export type ScoreUpsertNestedInputInputObject =
  | Extract<keyof ScoreUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GoalUpdateManyWithoutMatchInput {
  create?: GoalCreateWithoutMatchInput[]
  delete?: GoalWhereUniqueInput[]
  connect?: GoalWhereUniqueInput[]
  set?: GoalWhereUniqueInput[]
  disconnect?: GoalWhereUniqueInput[]
  update?: GoalUpdateWithWhereUniqueWithoutMatchInput[]
  upsert?: GoalUpsertWithWhereUniqueWithoutMatchInput[]
  deleteMany?: GoalScalarWhereInput[]
  updateMany?: GoalUpdateManyWithWhereNestedInput[]
}
export type GoalUpdateManyWithoutMatchInputInputObject =
  | Extract<keyof GoalUpdateManyWithoutMatchInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface GoalUpdateWithWhereUniqueWithoutMatchInput {
  where?: GoalWhereUniqueInput
  data?: GoalUpdateWithoutMatchDataInput
}
export type GoalUpdateWithWhereUniqueWithoutMatchInputInputObject =
  | Extract<keyof GoalUpdateWithWhereUniqueWithoutMatchInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface GoalUpdateWithoutMatchDataInput {
  player?: PlayerUpdateOneRequiredWithoutGoalsInput | null
  min?: number | null
  desc?: string | null
}
export type GoalUpdateWithoutMatchDataInputInputObject =
  | Extract<keyof GoalUpdateWithoutMatchDataInput, string>
  | { name: 'player', alias?: string  } 
  | { name: 'min', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  
export interface PlayerUpdateOneRequiredWithoutGoalsInput {
  create?: PlayerCreateWithoutGoalsInput | null
  update?: PlayerUpdateWithoutGoalsDataInput | null
  upsert?: PlayerUpsertWithoutGoalsInput | null
  connect?: PlayerWhereUniqueInput | null
}
export type PlayerUpdateOneRequiredWithoutGoalsInputInputObject =
  | Extract<keyof PlayerUpdateOneRequiredWithoutGoalsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PlayerUpdateWithoutGoalsDataInput {
  nick?: string | null
  shirtNumber?: number | null
  imgUrl?: string | null
  team?: TeamUpdateOneWithoutPlayersInput | null
  captain?: boolean | null
  personalInfo?: PersonalInfoUpdateOneInput | null
  position?: prisma.PlayerPosition | null
  altPosition?: prisma.PlayerPosition | null
  assessment?: AssessmentUpdateOneInput | null
  foot?: prisma.Foot | null
  from?: WhereFromUpdateOneInput | null
  injured?: boolean | null
  injury?: InjuryUpdateManyWithoutPlayerInput | null
  sizes?: SizeUpdateOneInput | null
  assist?: AssistUpdateManyWithoutPlayerInput | null
  bookings?: BookingUpdateManyWithoutPlayerInput | null
  lineup?: MatchUpdateManyWithoutLineupInput | null
  bench?: MatchUpdateManyWithoutBenchInput | null
}
export type PlayerUpdateWithoutGoalsDataInputInputObject =
  | Extract<keyof PlayerUpdateWithoutGoalsDataInput, string>
  | { name: 'nick', alias?: string  } 
  | { name: 'shirtNumber', alias?: string  } 
  | { name: 'imgUrl', alias?: string  } 
  | { name: 'team', alias?: string  } 
  | { name: 'captain', alias?: string  } 
  | { name: 'personalInfo', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'altPosition', alias?: string  } 
  | { name: 'assessment', alias?: string  } 
  | { name: 'foot', alias?: string  } 
  | { name: 'from', alias?: string  } 
  | { name: 'injured', alias?: string  } 
  | { name: 'injury', alias?: string  } 
  | { name: 'sizes', alias?: string  } 
  | { name: 'assist', alias?: string  } 
  | { name: 'bookings', alias?: string  } 
  | { name: 'lineup', alias?: string  } 
  | { name: 'bench', alias?: string  } 
  
export interface MatchUpdateManyWithoutBenchInput {
  create?: MatchCreateWithoutBenchInput[]
  delete?: MatchWhereUniqueInput[]
  connect?: MatchWhereUniqueInput[]
  set?: MatchWhereUniqueInput[]
  disconnect?: MatchWhereUniqueInput[]
  update?: MatchUpdateWithWhereUniqueWithoutBenchInput[]
  upsert?: MatchUpsertWithWhereUniqueWithoutBenchInput[]
  deleteMany?: MatchScalarWhereInput[]
  updateMany?: MatchUpdateManyWithWhereNestedInput[]
}
export type MatchUpdateManyWithoutBenchInputInputObject =
  | Extract<keyof MatchUpdateManyWithoutBenchInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface MatchUpdateWithWhereUniqueWithoutBenchInput {
  where?: MatchWhereUniqueInput
  data?: MatchUpdateWithoutBenchDataInput
}
export type MatchUpdateWithWhereUniqueWithoutBenchInputInputObject =
  | Extract<keyof MatchUpdateWithWhereUniqueWithoutBenchInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface MatchUpdateWithoutBenchDataInput {
  date?: string | null
  jornada?: number | null
  finished?: boolean | null
  homeTeam?: boolean | null
  opponent?: TeamUpdateOneInput | null
  win?: boolean | null
  competition?: prisma.Competiton | null
  captain?: PlayerUpdateOneRequiredInput | null
  staff?: StaffUpdateManyWithoutMatchesInput | null
  lineup?: PlayerUpdateManyWithoutLineupInput | null
  score?: ScoreUpdateOneRequiredInput | null
  goals?: GoalUpdateManyWithoutMatchInput | null
  assist?: AssistUpdateManyWithoutMatchInput | null
  substitutions?: SubstitutionsUpdateManyInput | null
  bookings?: BookingUpdateManyWithoutMatchInput | null
  referees?: string | null
  desc?: string | null
}
export type MatchUpdateWithoutBenchDataInputInputObject =
  | Extract<keyof MatchUpdateWithoutBenchDataInput, string>
  | { name: 'date', alias?: string  } 
  | { name: 'jornada', alias?: string  } 
  | { name: 'finished', alias?: string  } 
  | { name: 'homeTeam', alias?: string  } 
  | { name: 'opponent', alias?: string  } 
  | { name: 'win', alias?: string  } 
  | { name: 'competition', alias?: string  } 
  | { name: 'captain', alias?: string  } 
  | { name: 'staff', alias?: string  } 
  | { name: 'lineup', alias?: string  } 
  | { name: 'score', alias?: string  } 
  | { name: 'goals', alias?: string  } 
  | { name: 'assist', alias?: string  } 
  | { name: 'substitutions', alias?: string  } 
  | { name: 'bookings', alias?: string  } 
  | { name: 'referees', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  
export interface AssistUpdateManyWithoutMatchInput {
  create?: AssistCreateWithoutMatchInput[]
  delete?: AssistWhereUniqueInput[]
  connect?: AssistWhereUniqueInput[]
  set?: AssistWhereUniqueInput[]
  disconnect?: AssistWhereUniqueInput[]
  update?: AssistUpdateWithWhereUniqueWithoutMatchInput[]
  upsert?: AssistUpsertWithWhereUniqueWithoutMatchInput[]
  deleteMany?: AssistScalarWhereInput[]
  updateMany?: AssistUpdateManyWithWhereNestedInput[]
}
export type AssistUpdateManyWithoutMatchInputInputObject =
  | Extract<keyof AssistUpdateManyWithoutMatchInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface AssistUpdateWithWhereUniqueWithoutMatchInput {
  where?: AssistWhereUniqueInput
  data?: AssistUpdateWithoutMatchDataInput
}
export type AssistUpdateWithWhereUniqueWithoutMatchInputInputObject =
  | Extract<keyof AssistUpdateWithWhereUniqueWithoutMatchInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface AssistUpdateWithoutMatchDataInput {
  player?: PlayerUpdateOneRequiredWithoutAssistInput | null
  min?: number | null
  desc?: string | null
}
export type AssistUpdateWithoutMatchDataInputInputObject =
  | Extract<keyof AssistUpdateWithoutMatchDataInput, string>
  | { name: 'player', alias?: string  } 
  | { name: 'min', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  
export interface PlayerUpdateOneRequiredWithoutAssistInput {
  create?: PlayerCreateWithoutAssistInput | null
  update?: PlayerUpdateWithoutAssistDataInput | null
  upsert?: PlayerUpsertWithoutAssistInput | null
  connect?: PlayerWhereUniqueInput | null
}
export type PlayerUpdateOneRequiredWithoutAssistInputInputObject =
  | Extract<keyof PlayerUpdateOneRequiredWithoutAssistInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PlayerUpdateWithoutAssistDataInput {
  nick?: string | null
  shirtNumber?: number | null
  imgUrl?: string | null
  team?: TeamUpdateOneWithoutPlayersInput | null
  captain?: boolean | null
  personalInfo?: PersonalInfoUpdateOneInput | null
  position?: prisma.PlayerPosition | null
  altPosition?: prisma.PlayerPosition | null
  assessment?: AssessmentUpdateOneInput | null
  foot?: prisma.Foot | null
  from?: WhereFromUpdateOneInput | null
  injured?: boolean | null
  injury?: InjuryUpdateManyWithoutPlayerInput | null
  sizes?: SizeUpdateOneInput | null
  goals?: GoalUpdateManyWithoutPlayerInput | null
  bookings?: BookingUpdateManyWithoutPlayerInput | null
  lineup?: MatchUpdateManyWithoutLineupInput | null
  bench?: MatchUpdateManyWithoutBenchInput | null
}
export type PlayerUpdateWithoutAssistDataInputInputObject =
  | Extract<keyof PlayerUpdateWithoutAssistDataInput, string>
  | { name: 'nick', alias?: string  } 
  | { name: 'shirtNumber', alias?: string  } 
  | { name: 'imgUrl', alias?: string  } 
  | { name: 'team', alias?: string  } 
  | { name: 'captain', alias?: string  } 
  | { name: 'personalInfo', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'altPosition', alias?: string  } 
  | { name: 'assessment', alias?: string  } 
  | { name: 'foot', alias?: string  } 
  | { name: 'from', alias?: string  } 
  | { name: 'injured', alias?: string  } 
  | { name: 'injury', alias?: string  } 
  | { name: 'sizes', alias?: string  } 
  | { name: 'goals', alias?: string  } 
  | { name: 'bookings', alias?: string  } 
  | { name: 'lineup', alias?: string  } 
  | { name: 'bench', alias?: string  } 
  
export interface PlayerUpsertWithoutAssistInput {
  update?: PlayerUpdateWithoutAssistDataInput
  create?: PlayerCreateWithoutAssistInput
}
export type PlayerUpsertWithoutAssistInputInputObject =
  | Extract<keyof PlayerUpsertWithoutAssistInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface AssistUpsertWithWhereUniqueWithoutMatchInput {
  where?: AssistWhereUniqueInput
  update?: AssistUpdateWithoutMatchDataInput
  create?: AssistCreateWithoutMatchInput
}
export type AssistUpsertWithWhereUniqueWithoutMatchInputInputObject =
  | Extract<keyof AssistUpsertWithWhereUniqueWithoutMatchInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface AssistScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  min?: number | null
  min_not?: number | null
  min_in?: number[]
  min_not_in?: number[]
  min_lt?: number | null
  min_lte?: number | null
  min_gt?: number | null
  min_gte?: number | null
  desc?: string | null
  desc_not?: string | null
  desc_in?: string[]
  desc_not_in?: string[]
  desc_lt?: string | null
  desc_lte?: string | null
  desc_gt?: string | null
  desc_gte?: string | null
  desc_contains?: string | null
  desc_not_contains?: string | null
  desc_starts_with?: string | null
  desc_not_starts_with?: string | null
  desc_ends_with?: string | null
  desc_not_ends_with?: string | null
  AND?: AssistScalarWhereInput[]
  OR?: AssistScalarWhereInput[]
  NOT?: AssistScalarWhereInput[]
}
export type AssistScalarWhereInputInputObject =
  | Extract<keyof AssistScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'min', alias?: string  } 
  | { name: 'min_not', alias?: string  } 
  | { name: 'min_in', alias?: string  } 
  | { name: 'min_not_in', alias?: string  } 
  | { name: 'min_lt', alias?: string  } 
  | { name: 'min_lte', alias?: string  } 
  | { name: 'min_gt', alias?: string  } 
  | { name: 'min_gte', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'desc_not', alias?: string  } 
  | { name: 'desc_in', alias?: string  } 
  | { name: 'desc_not_in', alias?: string  } 
  | { name: 'desc_lt', alias?: string  } 
  | { name: 'desc_lte', alias?: string  } 
  | { name: 'desc_gt', alias?: string  } 
  | { name: 'desc_gte', alias?: string  } 
  | { name: 'desc_contains', alias?: string  } 
  | { name: 'desc_not_contains', alias?: string  } 
  | { name: 'desc_starts_with', alias?: string  } 
  | { name: 'desc_not_starts_with', alias?: string  } 
  | { name: 'desc_ends_with', alias?: string  } 
  | { name: 'desc_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AssistUpdateManyWithWhereNestedInput {
  where?: AssistScalarWhereInput
  data?: AssistUpdateManyDataInput
}
export type AssistUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof AssistUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface AssistUpdateManyDataInput {
  min?: number | null
  desc?: string | null
}
export type AssistUpdateManyDataInputInputObject =
  | Extract<keyof AssistUpdateManyDataInput, string>
  | { name: 'min', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  
export interface SubstitutionsUpdateManyInput {
  create?: SubstitutionsCreateInput[]
  deleteMany?: SubstitutionsScalarWhereInput[]
  updateMany?: SubstitutionsUpdateManyWithWhereNestedInput[]
}
export type SubstitutionsUpdateManyInputInputObject =
  | Extract<keyof SubstitutionsUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface SubstitutionsScalarWhereInput {
  min?: number | null
  min_not?: number | null
  min_in?: number[]
  min_not_in?: number[]
  min_lt?: number | null
  min_lte?: number | null
  min_gt?: number | null
  min_gte?: number | null
  AND?: SubstitutionsScalarWhereInput[]
  OR?: SubstitutionsScalarWhereInput[]
  NOT?: SubstitutionsScalarWhereInput[]
}
export type SubstitutionsScalarWhereInputInputObject =
  | Extract<keyof SubstitutionsScalarWhereInput, string>
  | { name: 'min', alias?: string  } 
  | { name: 'min_not', alias?: string  } 
  | { name: 'min_in', alias?: string  } 
  | { name: 'min_not_in', alias?: string  } 
  | { name: 'min_lt', alias?: string  } 
  | { name: 'min_lte', alias?: string  } 
  | { name: 'min_gt', alias?: string  } 
  | { name: 'min_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface SubstitutionsUpdateManyWithWhereNestedInput {
  where?: SubstitutionsScalarWhereInput
  data?: SubstitutionsUpdateManyDataInput
}
export type SubstitutionsUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof SubstitutionsUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface SubstitutionsUpdateManyDataInput {
  min?: number | null
}
export type SubstitutionsUpdateManyDataInputInputObject =
  | Extract<keyof SubstitutionsUpdateManyDataInput, string>
  | { name: 'min', alias?: string  } 
  
export interface BookingUpdateManyWithoutMatchInput {
  create?: BookingCreateWithoutMatchInput[]
  delete?: BookingWhereUniqueInput[]
  connect?: BookingWhereUniqueInput[]
  set?: BookingWhereUniqueInput[]
  disconnect?: BookingWhereUniqueInput[]
  update?: BookingUpdateWithWhereUniqueWithoutMatchInput[]
  upsert?: BookingUpsertWithWhereUniqueWithoutMatchInput[]
  deleteMany?: BookingScalarWhereInput[]
  updateMany?: BookingUpdateManyWithWhereNestedInput[]
}
export type BookingUpdateManyWithoutMatchInputInputObject =
  | Extract<keyof BookingUpdateManyWithoutMatchInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface BookingUpdateWithWhereUniqueWithoutMatchInput {
  where?: BookingWhereUniqueInput
  data?: BookingUpdateWithoutMatchDataInput
}
export type BookingUpdateWithWhereUniqueWithoutMatchInputInputObject =
  | Extract<keyof BookingUpdateWithWhereUniqueWithoutMatchInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface BookingUpdateWithoutMatchDataInput {
  player?: PlayerUpdateOneRequiredWithoutBookingsInput | null
  min?: number | null
  desc?: string | null
  card?: prisma.ColorCard | null
}
export type BookingUpdateWithoutMatchDataInputInputObject =
  | Extract<keyof BookingUpdateWithoutMatchDataInput, string>
  | { name: 'player', alias?: string  } 
  | { name: 'min', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'card', alias?: string  } 
  
export interface PlayerUpdateOneRequiredWithoutBookingsInput {
  create?: PlayerCreateWithoutBookingsInput | null
  update?: PlayerUpdateWithoutBookingsDataInput | null
  upsert?: PlayerUpsertWithoutBookingsInput | null
  connect?: PlayerWhereUniqueInput | null
}
export type PlayerUpdateOneRequiredWithoutBookingsInputInputObject =
  | Extract<keyof PlayerUpdateOneRequiredWithoutBookingsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PlayerUpdateWithoutBookingsDataInput {
  nick?: string | null
  shirtNumber?: number | null
  imgUrl?: string | null
  team?: TeamUpdateOneWithoutPlayersInput | null
  captain?: boolean | null
  personalInfo?: PersonalInfoUpdateOneInput | null
  position?: prisma.PlayerPosition | null
  altPosition?: prisma.PlayerPosition | null
  assessment?: AssessmentUpdateOneInput | null
  foot?: prisma.Foot | null
  from?: WhereFromUpdateOneInput | null
  injured?: boolean | null
  injury?: InjuryUpdateManyWithoutPlayerInput | null
  sizes?: SizeUpdateOneInput | null
  goals?: GoalUpdateManyWithoutPlayerInput | null
  assist?: AssistUpdateManyWithoutPlayerInput | null
  lineup?: MatchUpdateManyWithoutLineupInput | null
  bench?: MatchUpdateManyWithoutBenchInput | null
}
export type PlayerUpdateWithoutBookingsDataInputInputObject =
  | Extract<keyof PlayerUpdateWithoutBookingsDataInput, string>
  | { name: 'nick', alias?: string  } 
  | { name: 'shirtNumber', alias?: string  } 
  | { name: 'imgUrl', alias?: string  } 
  | { name: 'team', alias?: string  } 
  | { name: 'captain', alias?: string  } 
  | { name: 'personalInfo', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'altPosition', alias?: string  } 
  | { name: 'assessment', alias?: string  } 
  | { name: 'foot', alias?: string  } 
  | { name: 'from', alias?: string  } 
  | { name: 'injured', alias?: string  } 
  | { name: 'injury', alias?: string  } 
  | { name: 'sizes', alias?: string  } 
  | { name: 'goals', alias?: string  } 
  | { name: 'assist', alias?: string  } 
  | { name: 'lineup', alias?: string  } 
  | { name: 'bench', alias?: string  } 
  
export interface PlayerUpsertWithoutBookingsInput {
  update?: PlayerUpdateWithoutBookingsDataInput
  create?: PlayerCreateWithoutBookingsInput
}
export type PlayerUpsertWithoutBookingsInputInputObject =
  | Extract<keyof PlayerUpsertWithoutBookingsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface BookingUpsertWithWhereUniqueWithoutMatchInput {
  where?: BookingWhereUniqueInput
  update?: BookingUpdateWithoutMatchDataInput
  create?: BookingCreateWithoutMatchInput
}
export type BookingUpsertWithWhereUniqueWithoutMatchInputInputObject =
  | Extract<keyof BookingUpsertWithWhereUniqueWithoutMatchInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface BookingScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  min?: number | null
  min_not?: number | null
  min_in?: number[]
  min_not_in?: number[]
  min_lt?: number | null
  min_lte?: number | null
  min_gt?: number | null
  min_gte?: number | null
  desc?: string | null
  desc_not?: string | null
  desc_in?: string[]
  desc_not_in?: string[]
  desc_lt?: string | null
  desc_lte?: string | null
  desc_gt?: string | null
  desc_gte?: string | null
  desc_contains?: string | null
  desc_not_contains?: string | null
  desc_starts_with?: string | null
  desc_not_starts_with?: string | null
  desc_ends_with?: string | null
  desc_not_ends_with?: string | null
  card?: prisma.ColorCard | null
  card_not?: prisma.ColorCard | null
  card_in?: prisma.ColorCard[]
  card_not_in?: prisma.ColorCard[]
  AND?: BookingScalarWhereInput[]
  OR?: BookingScalarWhereInput[]
  NOT?: BookingScalarWhereInput[]
}
export type BookingScalarWhereInputInputObject =
  | Extract<keyof BookingScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'min', alias?: string  } 
  | { name: 'min_not', alias?: string  } 
  | { name: 'min_in', alias?: string  } 
  | { name: 'min_not_in', alias?: string  } 
  | { name: 'min_lt', alias?: string  } 
  | { name: 'min_lte', alias?: string  } 
  | { name: 'min_gt', alias?: string  } 
  | { name: 'min_gte', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'desc_not', alias?: string  } 
  | { name: 'desc_in', alias?: string  } 
  | { name: 'desc_not_in', alias?: string  } 
  | { name: 'desc_lt', alias?: string  } 
  | { name: 'desc_lte', alias?: string  } 
  | { name: 'desc_gt', alias?: string  } 
  | { name: 'desc_gte', alias?: string  } 
  | { name: 'desc_contains', alias?: string  } 
  | { name: 'desc_not_contains', alias?: string  } 
  | { name: 'desc_starts_with', alias?: string  } 
  | { name: 'desc_not_starts_with', alias?: string  } 
  | { name: 'desc_ends_with', alias?: string  } 
  | { name: 'desc_not_ends_with', alias?: string  } 
  | { name: 'card', alias?: string  } 
  | { name: 'card_not', alias?: string  } 
  | { name: 'card_in', alias?: string  } 
  | { name: 'card_not_in', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface BookingUpdateManyWithWhereNestedInput {
  where?: BookingScalarWhereInput
  data?: BookingUpdateManyDataInput
}
export type BookingUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof BookingUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface BookingUpdateManyDataInput {
  min?: number | null
  desc?: string | null
  card?: prisma.ColorCard | null
}
export type BookingUpdateManyDataInputInputObject =
  | Extract<keyof BookingUpdateManyDataInput, string>
  | { name: 'min', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'card', alias?: string  } 
  
export interface MatchUpsertWithWhereUniqueWithoutBenchInput {
  where?: MatchWhereUniqueInput
  update?: MatchUpdateWithoutBenchDataInput
  create?: MatchCreateWithoutBenchInput
}
export type MatchUpsertWithWhereUniqueWithoutBenchInputInputObject =
  | Extract<keyof MatchUpsertWithWhereUniqueWithoutBenchInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface MatchScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  date?: string | null
  date_not?: string | null
  date_in?: string[]
  date_not_in?: string[]
  date_lt?: string | null
  date_lte?: string | null
  date_gt?: string | null
  date_gte?: string | null
  jornada?: number | null
  jornada_not?: number | null
  jornada_in?: number[]
  jornada_not_in?: number[]
  jornada_lt?: number | null
  jornada_lte?: number | null
  jornada_gt?: number | null
  jornada_gte?: number | null
  finished?: boolean | null
  finished_not?: boolean | null
  homeTeam?: boolean | null
  homeTeam_not?: boolean | null
  win?: boolean | null
  win_not?: boolean | null
  competition?: prisma.Competiton | null
  competition_not?: prisma.Competiton | null
  competition_in?: prisma.Competiton[]
  competition_not_in?: prisma.Competiton[]
  referees?: string | null
  referees_not?: string | null
  referees_in?: string[]
  referees_not_in?: string[]
  referees_lt?: string | null
  referees_lte?: string | null
  referees_gt?: string | null
  referees_gte?: string | null
  referees_contains?: string | null
  referees_not_contains?: string | null
  referees_starts_with?: string | null
  referees_not_starts_with?: string | null
  referees_ends_with?: string | null
  referees_not_ends_with?: string | null
  desc?: string | null
  desc_not?: string | null
  desc_in?: string[]
  desc_not_in?: string[]
  desc_lt?: string | null
  desc_lte?: string | null
  desc_gt?: string | null
  desc_gte?: string | null
  desc_contains?: string | null
  desc_not_contains?: string | null
  desc_starts_with?: string | null
  desc_not_starts_with?: string | null
  desc_ends_with?: string | null
  desc_not_ends_with?: string | null
  AND?: MatchScalarWhereInput[]
  OR?: MatchScalarWhereInput[]
  NOT?: MatchScalarWhereInput[]
}
export type MatchScalarWhereInputInputObject =
  | Extract<keyof MatchScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'date_not', alias?: string  } 
  | { name: 'date_in', alias?: string  } 
  | { name: 'date_not_in', alias?: string  } 
  | { name: 'date_lt', alias?: string  } 
  | { name: 'date_lte', alias?: string  } 
  | { name: 'date_gt', alias?: string  } 
  | { name: 'date_gte', alias?: string  } 
  | { name: 'jornada', alias?: string  } 
  | { name: 'jornada_not', alias?: string  } 
  | { name: 'jornada_in', alias?: string  } 
  | { name: 'jornada_not_in', alias?: string  } 
  | { name: 'jornada_lt', alias?: string  } 
  | { name: 'jornada_lte', alias?: string  } 
  | { name: 'jornada_gt', alias?: string  } 
  | { name: 'jornada_gte', alias?: string  } 
  | { name: 'finished', alias?: string  } 
  | { name: 'finished_not', alias?: string  } 
  | { name: 'homeTeam', alias?: string  } 
  | { name: 'homeTeam_not', alias?: string  } 
  | { name: 'win', alias?: string  } 
  | { name: 'win_not', alias?: string  } 
  | { name: 'competition', alias?: string  } 
  | { name: 'competition_not', alias?: string  } 
  | { name: 'competition_in', alias?: string  } 
  | { name: 'competition_not_in', alias?: string  } 
  | { name: 'referees', alias?: string  } 
  | { name: 'referees_not', alias?: string  } 
  | { name: 'referees_in', alias?: string  } 
  | { name: 'referees_not_in', alias?: string  } 
  | { name: 'referees_lt', alias?: string  } 
  | { name: 'referees_lte', alias?: string  } 
  | { name: 'referees_gt', alias?: string  } 
  | { name: 'referees_gte', alias?: string  } 
  | { name: 'referees_contains', alias?: string  } 
  | { name: 'referees_not_contains', alias?: string  } 
  | { name: 'referees_starts_with', alias?: string  } 
  | { name: 'referees_not_starts_with', alias?: string  } 
  | { name: 'referees_ends_with', alias?: string  } 
  | { name: 'referees_not_ends_with', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'desc_not', alias?: string  } 
  | { name: 'desc_in', alias?: string  } 
  | { name: 'desc_not_in', alias?: string  } 
  | { name: 'desc_lt', alias?: string  } 
  | { name: 'desc_lte', alias?: string  } 
  | { name: 'desc_gt', alias?: string  } 
  | { name: 'desc_gte', alias?: string  } 
  | { name: 'desc_contains', alias?: string  } 
  | { name: 'desc_not_contains', alias?: string  } 
  | { name: 'desc_starts_with', alias?: string  } 
  | { name: 'desc_not_starts_with', alias?: string  } 
  | { name: 'desc_ends_with', alias?: string  } 
  | { name: 'desc_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface MatchUpdateManyWithWhereNestedInput {
  where?: MatchScalarWhereInput
  data?: MatchUpdateManyDataInput
}
export type MatchUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof MatchUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface MatchUpdateManyDataInput {
  date?: string | null
  jornada?: number | null
  finished?: boolean | null
  homeTeam?: boolean | null
  win?: boolean | null
  competition?: prisma.Competiton | null
  referees?: string | null
  desc?: string | null
}
export type MatchUpdateManyDataInputInputObject =
  | Extract<keyof MatchUpdateManyDataInput, string>
  | { name: 'date', alias?: string  } 
  | { name: 'jornada', alias?: string  } 
  | { name: 'finished', alias?: string  } 
  | { name: 'homeTeam', alias?: string  } 
  | { name: 'win', alias?: string  } 
  | { name: 'competition', alias?: string  } 
  | { name: 'referees', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  
export interface PlayerUpsertWithoutGoalsInput {
  update?: PlayerUpdateWithoutGoalsDataInput
  create?: PlayerCreateWithoutGoalsInput
}
export type PlayerUpsertWithoutGoalsInputInputObject =
  | Extract<keyof PlayerUpsertWithoutGoalsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GoalUpsertWithWhereUniqueWithoutMatchInput {
  where?: GoalWhereUniqueInput
  update?: GoalUpdateWithoutMatchDataInput
  create?: GoalCreateWithoutMatchInput
}
export type GoalUpsertWithWhereUniqueWithoutMatchInputInputObject =
  | Extract<keyof GoalUpsertWithWhereUniqueWithoutMatchInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GoalScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  min?: number | null
  min_not?: number | null
  min_in?: number[]
  min_not_in?: number[]
  min_lt?: number | null
  min_lte?: number | null
  min_gt?: number | null
  min_gte?: number | null
  desc?: string | null
  desc_not?: string | null
  desc_in?: string[]
  desc_not_in?: string[]
  desc_lt?: string | null
  desc_lte?: string | null
  desc_gt?: string | null
  desc_gte?: string | null
  desc_contains?: string | null
  desc_not_contains?: string | null
  desc_starts_with?: string | null
  desc_not_starts_with?: string | null
  desc_ends_with?: string | null
  desc_not_ends_with?: string | null
  AND?: GoalScalarWhereInput[]
  OR?: GoalScalarWhereInput[]
  NOT?: GoalScalarWhereInput[]
}
export type GoalScalarWhereInputInputObject =
  | Extract<keyof GoalScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'min', alias?: string  } 
  | { name: 'min_not', alias?: string  } 
  | { name: 'min_in', alias?: string  } 
  | { name: 'min_not_in', alias?: string  } 
  | { name: 'min_lt', alias?: string  } 
  | { name: 'min_lte', alias?: string  } 
  | { name: 'min_gt', alias?: string  } 
  | { name: 'min_gte', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'desc_not', alias?: string  } 
  | { name: 'desc_in', alias?: string  } 
  | { name: 'desc_not_in', alias?: string  } 
  | { name: 'desc_lt', alias?: string  } 
  | { name: 'desc_lte', alias?: string  } 
  | { name: 'desc_gt', alias?: string  } 
  | { name: 'desc_gte', alias?: string  } 
  | { name: 'desc_contains', alias?: string  } 
  | { name: 'desc_not_contains', alias?: string  } 
  | { name: 'desc_starts_with', alias?: string  } 
  | { name: 'desc_not_starts_with', alias?: string  } 
  | { name: 'desc_ends_with', alias?: string  } 
  | { name: 'desc_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GoalUpdateManyWithWhereNestedInput {
  where?: GoalScalarWhereInput
  data?: GoalUpdateManyDataInput
}
export type GoalUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof GoalUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface GoalUpdateManyDataInput {
  min?: number | null
  desc?: string | null
}
export type GoalUpdateManyDataInputInputObject =
  | Extract<keyof GoalUpdateManyDataInput, string>
  | { name: 'min', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  
export interface MatchUpsertWithWhereUniqueWithoutLineupInput {
  where?: MatchWhereUniqueInput
  update?: MatchUpdateWithoutLineupDataInput
  create?: MatchCreateWithoutLineupInput
}
export type MatchUpsertWithWhereUniqueWithoutLineupInputInputObject =
  | Extract<keyof MatchUpsertWithWhereUniqueWithoutLineupInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PlayerUpsertWithWhereUniqueWithoutBenchInput {
  where?: PlayerWhereUniqueInput
  update?: PlayerUpdateWithoutBenchDataInput
  create?: PlayerCreateWithoutBenchInput
}
export type PlayerUpsertWithWhereUniqueWithoutBenchInputInputObject =
  | Extract<keyof PlayerUpsertWithWhereUniqueWithoutBenchInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PlayerScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  nick?: string | null
  nick_not?: string | null
  nick_in?: string[]
  nick_not_in?: string[]
  nick_lt?: string | null
  nick_lte?: string | null
  nick_gt?: string | null
  nick_gte?: string | null
  nick_contains?: string | null
  nick_not_contains?: string | null
  nick_starts_with?: string | null
  nick_not_starts_with?: string | null
  nick_ends_with?: string | null
  nick_not_ends_with?: string | null
  shirtNumber?: number | null
  shirtNumber_not?: number | null
  shirtNumber_in?: number[]
  shirtNumber_not_in?: number[]
  shirtNumber_lt?: number | null
  shirtNumber_lte?: number | null
  shirtNumber_gt?: number | null
  shirtNumber_gte?: number | null
  imgUrl?: string | null
  imgUrl_not?: string | null
  imgUrl_in?: string[]
  imgUrl_not_in?: string[]
  imgUrl_lt?: string | null
  imgUrl_lte?: string | null
  imgUrl_gt?: string | null
  imgUrl_gte?: string | null
  imgUrl_contains?: string | null
  imgUrl_not_contains?: string | null
  imgUrl_starts_with?: string | null
  imgUrl_not_starts_with?: string | null
  imgUrl_ends_with?: string | null
  imgUrl_not_ends_with?: string | null
  captain?: boolean | null
  captain_not?: boolean | null
  position?: prisma.PlayerPosition | null
  position_not?: prisma.PlayerPosition | null
  position_in?: prisma.PlayerPosition[]
  position_not_in?: prisma.PlayerPosition[]
  altPosition?: prisma.PlayerPosition | null
  altPosition_not?: prisma.PlayerPosition | null
  altPosition_in?: prisma.PlayerPosition[]
  altPosition_not_in?: prisma.PlayerPosition[]
  foot?: prisma.Foot | null
  foot_not?: prisma.Foot | null
  foot_in?: prisma.Foot[]
  foot_not_in?: prisma.Foot[]
  injured?: boolean | null
  injured_not?: boolean | null
  AND?: PlayerScalarWhereInput[]
  OR?: PlayerScalarWhereInput[]
  NOT?: PlayerScalarWhereInput[]
}
export type PlayerScalarWhereInputInputObject =
  | Extract<keyof PlayerScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'nick', alias?: string  } 
  | { name: 'nick_not', alias?: string  } 
  | { name: 'nick_in', alias?: string  } 
  | { name: 'nick_not_in', alias?: string  } 
  | { name: 'nick_lt', alias?: string  } 
  | { name: 'nick_lte', alias?: string  } 
  | { name: 'nick_gt', alias?: string  } 
  | { name: 'nick_gte', alias?: string  } 
  | { name: 'nick_contains', alias?: string  } 
  | { name: 'nick_not_contains', alias?: string  } 
  | { name: 'nick_starts_with', alias?: string  } 
  | { name: 'nick_not_starts_with', alias?: string  } 
  | { name: 'nick_ends_with', alias?: string  } 
  | { name: 'nick_not_ends_with', alias?: string  } 
  | { name: 'shirtNumber', alias?: string  } 
  | { name: 'shirtNumber_not', alias?: string  } 
  | { name: 'shirtNumber_in', alias?: string  } 
  | { name: 'shirtNumber_not_in', alias?: string  } 
  | { name: 'shirtNumber_lt', alias?: string  } 
  | { name: 'shirtNumber_lte', alias?: string  } 
  | { name: 'shirtNumber_gt', alias?: string  } 
  | { name: 'shirtNumber_gte', alias?: string  } 
  | { name: 'imgUrl', alias?: string  } 
  | { name: 'imgUrl_not', alias?: string  } 
  | { name: 'imgUrl_in', alias?: string  } 
  | { name: 'imgUrl_not_in', alias?: string  } 
  | { name: 'imgUrl_lt', alias?: string  } 
  | { name: 'imgUrl_lte', alias?: string  } 
  | { name: 'imgUrl_gt', alias?: string  } 
  | { name: 'imgUrl_gte', alias?: string  } 
  | { name: 'imgUrl_contains', alias?: string  } 
  | { name: 'imgUrl_not_contains', alias?: string  } 
  | { name: 'imgUrl_starts_with', alias?: string  } 
  | { name: 'imgUrl_not_starts_with', alias?: string  } 
  | { name: 'imgUrl_ends_with', alias?: string  } 
  | { name: 'imgUrl_not_ends_with', alias?: string  } 
  | { name: 'captain', alias?: string  } 
  | { name: 'captain_not', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'position_not', alias?: string  } 
  | { name: 'position_in', alias?: string  } 
  | { name: 'position_not_in', alias?: string  } 
  | { name: 'altPosition', alias?: string  } 
  | { name: 'altPosition_not', alias?: string  } 
  | { name: 'altPosition_in', alias?: string  } 
  | { name: 'altPosition_not_in', alias?: string  } 
  | { name: 'foot', alias?: string  } 
  | { name: 'foot_not', alias?: string  } 
  | { name: 'foot_in', alias?: string  } 
  | { name: 'foot_not_in', alias?: string  } 
  | { name: 'injured', alias?: string  } 
  | { name: 'injured_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PlayerUpdateManyWithWhereNestedInput {
  where?: PlayerScalarWhereInput
  data?: PlayerUpdateManyDataInput
}
export type PlayerUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof PlayerUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PlayerUpdateManyDataInput {
  nick?: string | null
  shirtNumber?: number | null
  imgUrl?: string | null
  captain?: boolean | null
  position?: prisma.PlayerPosition | null
  altPosition?: prisma.PlayerPosition | null
  foot?: prisma.Foot | null
  injured?: boolean | null
}
export type PlayerUpdateManyDataInputInputObject =
  | Extract<keyof PlayerUpdateManyDataInput, string>
  | { name: 'nick', alias?: string  } 
  | { name: 'shirtNumber', alias?: string  } 
  | { name: 'imgUrl', alias?: string  } 
  | { name: 'captain', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'altPosition', alias?: string  } 
  | { name: 'foot', alias?: string  } 
  | { name: 'injured', alias?: string  } 
  
export interface MatchUpsertWithoutBookingsInput {
  update?: MatchUpdateWithoutBookingsDataInput
  create?: MatchCreateWithoutBookingsInput
}
export type MatchUpsertWithoutBookingsInputInputObject =
  | Extract<keyof MatchUpsertWithoutBookingsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface BookingUpsertWithWhereUniqueWithoutPlayerInput {
  where?: BookingWhereUniqueInput
  update?: BookingUpdateWithoutPlayerDataInput
  create?: BookingCreateWithoutPlayerInput
}
export type BookingUpsertWithWhereUniqueWithoutPlayerInputInputObject =
  | Extract<keyof BookingUpsertWithWhereUniqueWithoutPlayerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PlayerUpsertWithWhereUniqueWithoutLineupInput {
  where?: PlayerWhereUniqueInput
  update?: PlayerUpdateWithoutLineupDataInput
  create?: PlayerCreateWithoutLineupInput
}
export type PlayerUpsertWithWhereUniqueWithoutLineupInputInputObject =
  | Extract<keyof PlayerUpsertWithWhereUniqueWithoutLineupInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface MatchUpsertWithoutAssistInput {
  update?: MatchUpdateWithoutAssistDataInput
  create?: MatchCreateWithoutAssistInput
}
export type MatchUpsertWithoutAssistInputInputObject =
  | Extract<keyof MatchUpsertWithoutAssistInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface AssistUpsertWithWhereUniqueWithoutPlayerInput {
  where?: AssistWhereUniqueInput
  update?: AssistUpdateWithoutPlayerDataInput
  create?: AssistCreateWithoutPlayerInput
}
export type AssistUpsertWithWhereUniqueWithoutPlayerInputInputObject =
  | Extract<keyof AssistUpsertWithWhereUniqueWithoutPlayerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PlayerUpsertNestedInput {
  update?: PlayerUpdateDataInput
  create?: PlayerCreateInput
}
export type PlayerUpsertNestedInputInputObject =
  | Extract<keyof PlayerUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface MatchUpsertWithoutGoalsInput {
  update?: MatchUpdateWithoutGoalsDataInput
  create?: MatchCreateWithoutGoalsInput
}
export type MatchUpsertWithoutGoalsInputInputObject =
  | Extract<keyof MatchUpsertWithoutGoalsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GoalUpsertWithWhereUniqueWithoutPlayerInput {
  where?: GoalWhereUniqueInput
  update?: GoalUpdateWithoutPlayerDataInput
  create?: GoalCreateWithoutPlayerInput
}
export type GoalUpsertWithWhereUniqueWithoutPlayerInputInputObject =
  | Extract<keyof GoalUpsertWithWhereUniqueWithoutPlayerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PlayerUpsertWithWhereUniqueWithoutTeamInput {
  where?: PlayerWhereUniqueInput
  update?: PlayerUpdateWithoutTeamDataInput
  create?: PlayerCreateWithoutTeamInput
}
export type PlayerUpsertWithWhereUniqueWithoutTeamInputInputObject =
  | Extract<keyof PlayerUpsertWithWhereUniqueWithoutTeamInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TeamUpsertNestedInput {
  update?: TeamUpdateDataInput
  create?: TeamCreateInput
}
export type TeamUpsertNestedInputInputObject =
  | Extract<keyof TeamUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface MatchUpsertWithWhereUniqueWithoutStaffInput {
  where?: MatchWhereUniqueInput
  update?: MatchUpdateWithoutStaffDataInput
  create?: MatchCreateWithoutStaffInput
}
export type MatchUpsertWithWhereUniqueWithoutStaffInputInputObject =
  | Extract<keyof MatchUpsertWithWhereUniqueWithoutStaffInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface StaffUpsertWithWhereUniqueWithoutTeamInput {
  where?: StaffWhereUniqueInput
  update?: StaffUpdateWithoutTeamDataInput
  create?: StaffCreateWithoutTeamInput
}
export type StaffUpsertWithWhereUniqueWithoutTeamInputInputObject =
  | Extract<keyof StaffUpsertWithWhereUniqueWithoutTeamInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TeamUpsertWithoutPlayersInput {
  update?: TeamUpdateWithoutPlayersDataInput
  create?: TeamCreateWithoutPlayersInput
}
export type TeamUpsertWithoutPlayersInputInputObject =
  | Extract<keyof TeamUpsertWithoutPlayersInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PlayerUpdateManyMutationInput {
  nick?: string | null
  shirtNumber?: number | null
  imgUrl?: string | null
  captain?: boolean | null
  position?: prisma.PlayerPosition | null
  altPosition?: prisma.PlayerPosition | null
  foot?: prisma.Foot | null
  injured?: boolean | null
}
export type PlayerUpdateManyMutationInputInputObject =
  | Extract<keyof PlayerUpdateManyMutationInput, string>
  | { name: 'nick', alias?: string  } 
  | { name: 'shirtNumber', alias?: string  } 
  | { name: 'imgUrl', alias?: string  } 
  | { name: 'captain', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'altPosition', alias?: string  } 
  | { name: 'foot', alias?: string  } 
  | { name: 'injured', alias?: string  } 
  
export interface InjuryCreateInput {
  startAt?: string
  endAt?: string | null
  desc?: string
  player?: PlayerCreateOneWithoutInjuryInput | null
}
export type InjuryCreateInputInputObject =
  | Extract<keyof InjuryCreateInput, string>
  | { name: 'startAt', alias?: string  } 
  | { name: 'endAt', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'player', alias?: string  } 
  
export interface PlayerCreateOneWithoutInjuryInput {
  create?: PlayerCreateWithoutInjuryInput | null
  connect?: PlayerWhereUniqueInput | null
}
export type PlayerCreateOneWithoutInjuryInputInputObject =
  | Extract<keyof PlayerCreateOneWithoutInjuryInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PlayerCreateWithoutInjuryInput {
  nick?: string
  shirtNumber?: number
  imgUrl?: string | null
  team?: TeamCreateOneWithoutPlayersInput | null
  captain?: boolean | null
  personalInfo?: PersonalInfoCreateOneInput | null
  position?: prisma.PlayerPosition
  altPosition?: prisma.PlayerPosition | null
  assessment?: AssessmentCreateOneInput | null
  foot?: prisma.Foot | null
  from?: WhereFromCreateOneInput | null
  injured?: boolean | null
  sizes?: SizeCreateOneInput | null
  goals?: GoalCreateManyWithoutPlayerInput | null
  assist?: AssistCreateManyWithoutPlayerInput | null
  bookings?: BookingCreateManyWithoutPlayerInput | null
  lineup?: MatchCreateManyWithoutLineupInput | null
  bench?: MatchCreateManyWithoutBenchInput | null
}
export type PlayerCreateWithoutInjuryInputInputObject =
  | Extract<keyof PlayerCreateWithoutInjuryInput, string>
  | { name: 'nick', alias?: string  } 
  | { name: 'shirtNumber', alias?: string  } 
  | { name: 'imgUrl', alias?: string  } 
  | { name: 'team', alias?: string  } 
  | { name: 'captain', alias?: string  } 
  | { name: 'personalInfo', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'altPosition', alias?: string  } 
  | { name: 'assessment', alias?: string  } 
  | { name: 'foot', alias?: string  } 
  | { name: 'from', alias?: string  } 
  | { name: 'injured', alias?: string  } 
  | { name: 'sizes', alias?: string  } 
  | { name: 'goals', alias?: string  } 
  | { name: 'assist', alias?: string  } 
  | { name: 'bookings', alias?: string  } 
  | { name: 'lineup', alias?: string  } 
  | { name: 'bench', alias?: string  } 
  
export interface InjuryUpdateInput {
  startAt?: string | null
  endAt?: string | null
  desc?: string | null
  player?: PlayerUpdateOneWithoutInjuryInput | null
}
export type InjuryUpdateInputInputObject =
  | Extract<keyof InjuryUpdateInput, string>
  | { name: 'startAt', alias?: string  } 
  | { name: 'endAt', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'player', alias?: string  } 
  
export interface PlayerUpdateOneWithoutInjuryInput {
  create?: PlayerCreateWithoutInjuryInput | null
  update?: PlayerUpdateWithoutInjuryDataInput | null
  upsert?: PlayerUpsertWithoutInjuryInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: PlayerWhereUniqueInput | null
}
export type PlayerUpdateOneWithoutInjuryInputInputObject =
  | Extract<keyof PlayerUpdateOneWithoutInjuryInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PlayerUpdateWithoutInjuryDataInput {
  nick?: string | null
  shirtNumber?: number | null
  imgUrl?: string | null
  team?: TeamUpdateOneWithoutPlayersInput | null
  captain?: boolean | null
  personalInfo?: PersonalInfoUpdateOneInput | null
  position?: prisma.PlayerPosition | null
  altPosition?: prisma.PlayerPosition | null
  assessment?: AssessmentUpdateOneInput | null
  foot?: prisma.Foot | null
  from?: WhereFromUpdateOneInput | null
  injured?: boolean | null
  sizes?: SizeUpdateOneInput | null
  goals?: GoalUpdateManyWithoutPlayerInput | null
  assist?: AssistUpdateManyWithoutPlayerInput | null
  bookings?: BookingUpdateManyWithoutPlayerInput | null
  lineup?: MatchUpdateManyWithoutLineupInput | null
  bench?: MatchUpdateManyWithoutBenchInput | null
}
export type PlayerUpdateWithoutInjuryDataInputInputObject =
  | Extract<keyof PlayerUpdateWithoutInjuryDataInput, string>
  | { name: 'nick', alias?: string  } 
  | { name: 'shirtNumber', alias?: string  } 
  | { name: 'imgUrl', alias?: string  } 
  | { name: 'team', alias?: string  } 
  | { name: 'captain', alias?: string  } 
  | { name: 'personalInfo', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'altPosition', alias?: string  } 
  | { name: 'assessment', alias?: string  } 
  | { name: 'foot', alias?: string  } 
  | { name: 'from', alias?: string  } 
  | { name: 'injured', alias?: string  } 
  | { name: 'sizes', alias?: string  } 
  | { name: 'goals', alias?: string  } 
  | { name: 'assist', alias?: string  } 
  | { name: 'bookings', alias?: string  } 
  | { name: 'lineup', alias?: string  } 
  | { name: 'bench', alias?: string  } 
  
export interface PlayerUpsertWithoutInjuryInput {
  update?: PlayerUpdateWithoutInjuryDataInput
  create?: PlayerCreateWithoutInjuryInput
}
export type PlayerUpsertWithoutInjuryInputInputObject =
  | Extract<keyof PlayerUpsertWithoutInjuryInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface InjuryUpdateManyMutationInput {
  startAt?: string | null
  endAt?: string | null
  desc?: string | null
}
export type InjuryUpdateManyMutationInputInputObject =
  | Extract<keyof InjuryUpdateManyMutationInput, string>
  | { name: 'startAt', alias?: string  } 
  | { name: 'endAt', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  
export interface MatchCreateInput {
  date?: string | null
  jornada?: number
  finished?: boolean | null
  homeTeam?: boolean | null
  opponent?: TeamCreateOneInput | null
  win?: boolean | null
  competition?: prisma.Competiton | null
  captain?: PlayerCreateOneInput
  staff?: StaffCreateManyWithoutMatchesInput | null
  lineup?: PlayerCreateManyWithoutLineupInput | null
  bench?: PlayerCreateManyWithoutBenchInput | null
  score?: ScoreCreateOneInput
  goals?: GoalCreateManyWithoutMatchInput | null
  assist?: AssistCreateManyWithoutMatchInput | null
  substitutions?: SubstitutionsCreateManyInput | null
  bookings?: BookingCreateManyWithoutMatchInput | null
  referees?: string | null
  desc?: string | null
}
export type MatchCreateInputInputObject =
  | Extract<keyof MatchCreateInput, string>
  | { name: 'date', alias?: string  } 
  | { name: 'jornada', alias?: string  } 
  | { name: 'finished', alias?: string  } 
  | { name: 'homeTeam', alias?: string  } 
  | { name: 'opponent', alias?: string  } 
  | { name: 'win', alias?: string  } 
  | { name: 'competition', alias?: string  } 
  | { name: 'captain', alias?: string  } 
  | { name: 'staff', alias?: string  } 
  | { name: 'lineup', alias?: string  } 
  | { name: 'bench', alias?: string  } 
  | { name: 'score', alias?: string  } 
  | { name: 'goals', alias?: string  } 
  | { name: 'assist', alias?: string  } 
  | { name: 'substitutions', alias?: string  } 
  | { name: 'bookings', alias?: string  } 
  | { name: 'referees', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  
export interface MatchUpdateInput {
  date?: string | null
  jornada?: number | null
  finished?: boolean | null
  homeTeam?: boolean | null
  opponent?: TeamUpdateOneInput | null
  win?: boolean | null
  competition?: prisma.Competiton | null
  captain?: PlayerUpdateOneRequiredInput | null
  staff?: StaffUpdateManyWithoutMatchesInput | null
  lineup?: PlayerUpdateManyWithoutLineupInput | null
  bench?: PlayerUpdateManyWithoutBenchInput | null
  score?: ScoreUpdateOneRequiredInput | null
  goals?: GoalUpdateManyWithoutMatchInput | null
  assist?: AssistUpdateManyWithoutMatchInput | null
  substitutions?: SubstitutionsUpdateManyInput | null
  bookings?: BookingUpdateManyWithoutMatchInput | null
  referees?: string | null
  desc?: string | null
}
export type MatchUpdateInputInputObject =
  | Extract<keyof MatchUpdateInput, string>
  | { name: 'date', alias?: string  } 
  | { name: 'jornada', alias?: string  } 
  | { name: 'finished', alias?: string  } 
  | { name: 'homeTeam', alias?: string  } 
  | { name: 'opponent', alias?: string  } 
  | { name: 'win', alias?: string  } 
  | { name: 'competition', alias?: string  } 
  | { name: 'captain', alias?: string  } 
  | { name: 'staff', alias?: string  } 
  | { name: 'lineup', alias?: string  } 
  | { name: 'bench', alias?: string  } 
  | { name: 'score', alias?: string  } 
  | { name: 'goals', alias?: string  } 
  | { name: 'assist', alias?: string  } 
  | { name: 'substitutions', alias?: string  } 
  | { name: 'bookings', alias?: string  } 
  | { name: 'referees', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  
export interface MatchUpdateManyMutationInput {
  date?: string | null
  jornada?: number | null
  finished?: boolean | null
  homeTeam?: boolean | null
  win?: boolean | null
  competition?: prisma.Competiton | null
  referees?: string | null
  desc?: string | null
}
export type MatchUpdateManyMutationInputInputObject =
  | Extract<keyof MatchUpdateManyMutationInput, string>
  | { name: 'date', alias?: string  } 
  | { name: 'jornada', alias?: string  } 
  | { name: 'finished', alias?: string  } 
  | { name: 'homeTeam', alias?: string  } 
  | { name: 'win', alias?: string  } 
  | { name: 'competition', alias?: string  } 
  | { name: 'referees', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  
export interface GoalCreateInput {
  player?: PlayerCreateOneWithoutGoalsInput
  match?: MatchCreateOneWithoutGoalsInput
  min?: number | null
  desc?: string | null
}
export type GoalCreateInputInputObject =
  | Extract<keyof GoalCreateInput, string>
  | { name: 'player', alias?: string  } 
  | { name: 'match', alias?: string  } 
  | { name: 'min', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  
export interface GoalUpdateInput {
  player?: PlayerUpdateOneRequiredWithoutGoalsInput | null
  match?: MatchUpdateOneRequiredWithoutGoalsInput | null
  min?: number | null
  desc?: string | null
}
export type GoalUpdateInputInputObject =
  | Extract<keyof GoalUpdateInput, string>
  | { name: 'player', alias?: string  } 
  | { name: 'match', alias?: string  } 
  | { name: 'min', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  
export interface GoalUpdateManyMutationInput {
  min?: number | null
  desc?: string | null
}
export type GoalUpdateManyMutationInputInputObject =
  | Extract<keyof GoalUpdateManyMutationInput, string>
  | { name: 'min', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  
export interface AssistCreateInput {
  player?: PlayerCreateOneWithoutAssistInput
  match?: MatchCreateOneWithoutAssistInput
  min?: number | null
  desc?: string | null
}
export type AssistCreateInputInputObject =
  | Extract<keyof AssistCreateInput, string>
  | { name: 'player', alias?: string  } 
  | { name: 'match', alias?: string  } 
  | { name: 'min', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  
export interface AssistUpdateInput {
  player?: PlayerUpdateOneRequiredWithoutAssistInput | null
  match?: MatchUpdateOneRequiredWithoutAssistInput | null
  min?: number | null
  desc?: string | null
}
export type AssistUpdateInputInputObject =
  | Extract<keyof AssistUpdateInput, string>
  | { name: 'player', alias?: string  } 
  | { name: 'match', alias?: string  } 
  | { name: 'min', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  
export interface AssistUpdateManyMutationInput {
  min?: number | null
  desc?: string | null
}
export type AssistUpdateManyMutationInputInputObject =
  | Extract<keyof AssistUpdateManyMutationInput, string>
  | { name: 'min', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  
export interface BookingCreateInput {
  player?: PlayerCreateOneWithoutBookingsInput
  match?: MatchCreateOneWithoutBookingsInput
  min?: number | null
  desc?: string | null
  card?: prisma.ColorCard | null
}
export type BookingCreateInputInputObject =
  | Extract<keyof BookingCreateInput, string>
  | { name: 'player', alias?: string  } 
  | { name: 'match', alias?: string  } 
  | { name: 'min', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'card', alias?: string  } 
  
export interface BookingUpdateInput {
  player?: PlayerUpdateOneRequiredWithoutBookingsInput | null
  match?: MatchUpdateOneRequiredWithoutBookingsInput | null
  min?: number | null
  desc?: string | null
  card?: prisma.ColorCard | null
}
export type BookingUpdateInputInputObject =
  | Extract<keyof BookingUpdateInput, string>
  | { name: 'player', alias?: string  } 
  | { name: 'match', alias?: string  } 
  | { name: 'min', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'card', alias?: string  } 
  
export interface BookingUpdateManyMutationInput {
  min?: number | null
  desc?: string | null
  card?: prisma.ColorCard | null
}
export type BookingUpdateManyMutationInputInputObject =
  | Extract<keyof BookingUpdateManyMutationInput, string>
  | { name: 'min', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'card', alias?: string  } 
  
export interface TeamUpdateInput {
  logoUrl?: string | null
  name?: string | null
  players?: PlayerUpdateManyWithoutTeamInput | null
  staff?: StaffUpdateManyWithoutTeamInput | null
}
export type TeamUpdateInputInputObject =
  | Extract<keyof TeamUpdateInput, string>
  | { name: 'logoUrl', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'players', alias?: string  } 
  | { name: 'staff', alias?: string  } 
  
export interface TeamUpdateManyMutationInput {
  logoUrl?: string | null
  name?: string | null
}
export type TeamUpdateManyMutationInputInputObject =
  | Extract<keyof TeamUpdateManyMutationInput, string>
  | { name: 'logoUrl', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface StaffCreateInput {
  nick?: string
  imgUrl?: string | null
  team?: TeamCreateOneWithoutStaffInput | null
  personalInfo?: StaffInfoCreateOneInput | null
  from?: StaffFromCreateOneInput | null
  sizes?: StaffSizeCreateOneInput | null
  role?: string | null
  matches?: MatchCreateManyWithoutStaffInput | null
}
export type StaffCreateInputInputObject =
  | Extract<keyof StaffCreateInput, string>
  | { name: 'nick', alias?: string  } 
  | { name: 'imgUrl', alias?: string  } 
  | { name: 'team', alias?: string  } 
  | { name: 'personalInfo', alias?: string  } 
  | { name: 'from', alias?: string  } 
  | { name: 'sizes', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'matches', alias?: string  } 
  
export interface StaffUpdateInput {
  nick?: string | null
  imgUrl?: string | null
  team?: TeamUpdateOneWithoutStaffInput | null
  personalInfo?: StaffInfoUpdateOneInput | null
  from?: StaffFromUpdateOneInput | null
  sizes?: StaffSizeUpdateOneInput | null
  role?: string | null
  matches?: MatchUpdateManyWithoutStaffInput | null
}
export type StaffUpdateInputInputObject =
  | Extract<keyof StaffUpdateInput, string>
  | { name: 'nick', alias?: string  } 
  | { name: 'imgUrl', alias?: string  } 
  | { name: 'team', alias?: string  } 
  | { name: 'personalInfo', alias?: string  } 
  | { name: 'from', alias?: string  } 
  | { name: 'sizes', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'matches', alias?: string  } 
  
export interface StaffUpdateManyMutationInput {
  nick?: string | null
  imgUrl?: string | null
  role?: string | null
}
export type StaffUpdateManyMutationInputInputObject =
  | Extract<keyof StaffUpdateManyMutationInput, string>
  | { name: 'nick', alias?: string  } 
  | { name: 'imgUrl', alias?: string  } 
  | { name: 'role', alias?: string  } 
  
export interface PlayerSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PlayerWhereInput | null
  AND?: PlayerSubscriptionWhereInput[]
}
export type PlayerSubscriptionWhereInputInputObject =
  | Extract<keyof PlayerSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface InjurySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: InjuryWhereInput | null
  AND?: InjurySubscriptionWhereInput[]
}
export type InjurySubscriptionWhereInputInputObject =
  | Extract<keyof InjurySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface MatchSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: MatchWhereInput | null
  AND?: MatchSubscriptionWhereInput[]
}
export type MatchSubscriptionWhereInputInputObject =
  | Extract<keyof MatchSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface GoalSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: GoalWhereInput | null
  AND?: GoalSubscriptionWhereInput[]
}
export type GoalSubscriptionWhereInputInputObject =
  | Extract<keyof GoalSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface AssistSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: AssistWhereInput | null
  AND?: AssistSubscriptionWhereInput[]
}
export type AssistSubscriptionWhereInputInputObject =
  | Extract<keyof AssistSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface BookingSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: BookingWhereInput | null
  AND?: BookingSubscriptionWhereInput[]
}
export type BookingSubscriptionWhereInputInputObject =
  | Extract<keyof BookingSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface TeamSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: TeamWhereInput | null
  AND?: TeamSubscriptionWhereInput[]
}
export type TeamSubscriptionWhereInputInputObject =
  | Extract<keyof TeamSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface StaffSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: StaffWhereInput | null
  AND?: StaffSubscriptionWhereInput[]
}
export type StaffSubscriptionWhereInputInputObject =
  | Extract<keyof StaffSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  

export type CompetitonValues =
  | 'FRIENDLY'
  | 'LEAGUE'
  | 'CUP'
  
export type ColorCardValues =
  | 'YELLOW'
  | 'RED'
  
export type PlayerPositionValues =
  | 'GOALKEEPER'
  | 'CENTRE_BACK'
  | 'LEFT_BACK'
  | 'RIGHT_BACK'
  | 'DEFENSIVE_MIDFIELD'
  | 'CENTRE_MIDFIELD'
  | 'LEFT_MIDFIELD'
  | 'RIGHT_MIDFIELD'
  | 'ATTACKING_MIDFIELD'
  | 'LEFT_WINGER'
  | 'RIGHT_WINGER'
  | 'SECOND_STRIKE'
  | 'CENTRE_FORWARD'
  
export type FootValues =
  | 'LEFT'
  | 'RIGHT'
  | 'AMB'
  | 'UNKNOWN'
  
export type PlayerOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'nick_ASC'
  | 'nick_DESC'
  | 'shirtNumber_ASC'
  | 'shirtNumber_DESC'
  | 'imgUrl_ASC'
  | 'imgUrl_DESC'
  | 'captain_ASC'
  | 'captain_DESC'
  | 'position_ASC'
  | 'position_DESC'
  | 'altPosition_ASC'
  | 'altPosition_DESC'
  | 'foot_ASC'
  | 'foot_DESC'
  | 'injured_ASC'
  | 'injured_DESC'
  
export type StaffOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'nick_ASC'
  | 'nick_DESC'
  | 'imgUrl_ASC'
  | 'imgUrl_DESC'
  | 'role_ASC'
  | 'role_DESC'
  
export type MatchOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'date_ASC'
  | 'date_DESC'
  | 'jornada_ASC'
  | 'jornada_DESC'
  | 'finished_ASC'
  | 'finished_DESC'
  | 'homeTeam_ASC'
  | 'homeTeam_DESC'
  | 'win_ASC'
  | 'win_DESC'
  | 'competition_ASC'
  | 'competition_DESC'
  | 'referees_ASC'
  | 'referees_DESC'
  | 'desc_ASC'
  | 'desc_DESC'
  
export type GoalOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'min_ASC'
  | 'min_DESC'
  | 'desc_ASC'
  | 'desc_DESC'
  
export type AssistOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'min_ASC'
  | 'min_DESC'
  | 'desc_ASC'
  | 'desc_DESC'
  
export type BookingOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'min_ASC'
  | 'min_DESC'
  | 'desc_ASC'
  | 'desc_DESC'
  | 'card_ASC'
  | 'card_DESC'
  
export type InjuryOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'startAt_ASC'
  | 'startAt_DESC'
  | 'endAt_ASC'
  | 'endAt_DESC'
  | 'desc_ASC'
  | 'desc_DESC'
  
export type TeamOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'logoUrl_ASC'
  | 'logoUrl_DESC'
  | 'name_ASC'
  | 'name_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  